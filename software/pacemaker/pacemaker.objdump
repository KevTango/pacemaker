
pacemaker.elf:     file format elf32-littlenios2
pacemaker.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800244

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00006a6c memsz 0x00006a6c flags r-x
    LOAD off    0x00007a8c vaddr 0x00806a8c paddr 0x008082d0 align 2**12
         filesz 0x00001844 memsz 0x00001844 flags rw-
    LOAD off    0x00009b14 vaddr 0x00809b14 paddr 0x00809b14 align 2**12
         filesz 0x00000000 memsz 0x000001cc flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00006580  00800244  00800244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000002c8  008067c4  008067c4  000077c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001844  00806a8c  008082d0  00007a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000001cc  00809b14  00809b14  00009b14  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00809ce0  00809ce0  000092d0  2**0
                  CONTENTS
  7 .onchip_mem   00000000  01080000  01080000  000092d0  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000092d0  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000730  00000000  00000000  000092f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0000a41f  00000000  00000000  00009a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000036ae  00000000  00000000  00013e47  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000042f2  00000000  00000000  000174f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000fec  00000000  00000000  0001b7e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002516  00000000  00000000  0001c7d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00000dc4  00000000  00000000  0001ecea  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  0001fab0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000200  00000000  00000000  0001fb10  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00022b81  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  00022b84  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00022b87  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00022b88  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00022b89  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00022b8d  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00022b91  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  00022b95  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  00022b9e  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  00022ba7  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000c  00000000  00000000  00022bb0  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000020  00000000  00000000  00022bbc  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0006ef27  00000000  00000000  00022bdc  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800244 l    d  .text	00000000 .text
008067c4 l    d  .rodata	00000000 .rodata
00806a8c l    d  .rwdata	00000000 .rwdata
00809b14 l    d  .bss	00000000 .bss
00809ce0 l    d  .sdram	00000000 .sdram
01080000 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../pacemaker_bsp//obj/HAL/src/crt0.o
0080028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 pacemaker.c
00000000 l    df *ABS*	00000000 alt_load.c
00802708 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00802870 l     F .text	00000038 alt_dev_reg
00806a8c l     O .rwdata	00001060 jtag_uart
00807aec l     O .rwdata	00000120 lcd
00807c0c l     O .rwdata	000000c4 uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00802ba8 l     F .text	0000020c altera_avalon_jtag_uart_irq
00802db4 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
0080829c l     O .rwdata	00000004 colstart
008033f4 l     F .text	000000b8 lcd_write_command
008034ac l     F .text	000000d8 lcd_write_data
00803584 l     F .text	000000d0 lcd_clear_screen
00803654 l     F .text	000001ec lcd_repaint_screen
00803840 l     F .text	000000cc lcd_scroll_up
0080390c l     F .text	000002bc lcd_handle_escape
008040b0 l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
008042f8 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
008045b8 l     F .text	0000009c altera_avalon_uart_irq
00804654 l     F .text	000000e4 altera_avalon_uart_rxirq
00804738 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
008048d4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00804b00 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00804e3c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00804fa4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00804fd0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00805488 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
008055c8 l     F .text	00000050 alt_get_errno
00805618 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
00806907 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00807e78 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_exit.c
00809bd8 g     O .bss	00000004 alt_instruction_exception_handler
00809b14 g     O .bss	00000001 g40
008027f4 g     F .text	0000007c alt_main
00809b15 g     O .bss	00000001 APace
00809be0 g     O .bss	00000100 alt_irq
00809b16 g     O .bss	00000001 g19_e2
00809b17 g     O .bss	00000001 g4
008082d0 g       *ABS*	00000000 __flash_rwdata_start
00809b18 g     O .bss	00000001 g19
00809b19 g     O .bss	00000001 g77_fix0
00809b1a g     O .bss	00000001 AVIEnd
00809b1b g     O .bss	00000001 g55
00809b1c g     O .bss	00000001 g27
00809b1d g     O .bss	00000001 g3
00809b1e g     O .bss	00000001 PRE_g63
00809b1f g     O .bss	00000001 PRE_g27
00809b20 g     O .bss	00000001 g55b
00809b21 g     O .bss	00000001 g47
00809b22 g     O .bss	00000001 g42
00809b23 g     O .bss	00000001 g9
00809b24 g     O .bss	00000001 _cg7
00809b28 g     O .bss	00000004 _PRE_GO
00809b2c g     O .bss	00000001 PRE_g3
00809b2d g     O .bss	00000001 g31_e3
00805a74 g     F .text	00000024 altera_nios2_gen2_irq_init
00800000 g     F .entry	0000001c __reset
00809b2e g     O .bss	00000001 PRE_g13
00800020 g       *ABS*	00000000 __flash_exceptions_start
00809b2f g     O .bss	00000001 PRE_g72
00809bdc g     O .bss	00000004 errno
00809b30 g     O .bss	00000001 g44
00809b31 g     O .bss	00000001 VRPExpired
00809b32 g     O .bss	00000001 AEIStop
00809bc4 g     O .bss	00000004 alt_argv
0081029c g       *ABS*	00000000 _gp
00805a44 g     F .text	00000030 usleep
00800290 g     F .text	00000114 reset
00809b33 g     O .bss	00000001 g1
00809b34 g     O .bss	00000001 g61
00807cf8 g     O .rwdata	00000180 alt_fd_list
00809b35 g     O .bss	00000001 g71
00805bf0 g     F .text	00000090 alt_find_dev
0080603c g     F .text	00000148 memcpy
00809b36 g     O .bss	00000001 g82
0080554c g     F .text	0000007c alt_io_redirect
00809b37 g     O .bss	00000001 PRE_g69
008067c4 g       *ABS*	00000000 __DTOR_END__
00809b38 g     O .bss	00000001 g12
00805ed8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00809b39 g     O .bss	00000001 g52
00809b3a g     O .bss	00000001 g58_e6
00809b3b g     O .bss	00000001 _cg46
00802fb4 g     F .text	0000021c altera_avalon_jtag_uart_read
00809b3c g     O .bss	00000001 _cg74
008066d4 g     F .text	00000064 .hidden __udivsi3
00809b3d g     O .bss	00000001 g17
00809b3e g     O .bss	00000001 g76
00809b3f g     O .bss	00000001 g31
00805e48 g     F .text	00000090 alt_icache_flush
00809b40 g     O .bss	00000001 g37
00809b41 g     O .bss	00000001 g62
00809b42 g     O .bss	00000001 g41
00809b43 g     O .bss	00000001 _cg61
00809b44 g     O .bss	00000001 _cg26
00809b45 g     O .bss	00000001 AVIStop
008082b0 g     O .rwdata	00000004 alt_max_fd
00809b46 g     O .bss	00000001 _cg34
00809b47 g     O .bss	00000001 g18
00809b48 g     O .bss	00000001 ASense
008082c8 g     O .rwdata	00000004 _global_impure_ptr
00809b49 g     O .bss	00000001 g48
00809ce0 g       *ABS*	00000000 __bss_end
00805398 g     F .text	000000f0 alt_iic_isr_register
00809b4a g     O .bss	00000001 VR
0080593c g     F .text	00000108 alt_tick
00809b4b g     O .bss	00000001 g38
0080450c g     F .text	000000ac altera_avalon_uart_init
0080534c g     F .text	0000004c alt_ic_irq_enabled
00809b4c g     O .bss	00000001 PRE_g42
008058a0 g     F .text	0000009c alt_alarm_stop
00809bcc g     O .bss	00000004 alt_irq_active
01080000 g       *ABS*	00000000 __alt_mem_onchip_mem
008000fc g     F .exceptions	000000d4 alt_irq_handler
00807cd0 g     O .rwdata	00000028 alt_dev_null
00809b4d g     O .bss	00000001 _cg43
00804f5c g     F .text	00000048 alt_dcache_flush_all
00809b4e g     O .bss	00000001 g14b
00809b4f g     O .bss	00000001 g64
00809b50 g     O .bss	00000001 g21
00809b51 g     O .bss	00000001 _cg14
00809b52 g     O .bss	00000001 g79
00809b53 g     O .bss	00000001 g34
008082d0 g       *ABS*	00000000 __ram_rwdata_end
00809b54 g     O .bss	00000001 g5
008082a8 g     O .rwdata	00000008 alt_dev_list
00809b55 g     O .bss	00000001 g49
00809b56 g     O .bss	00000001 g2
00809b57 g     O .bss	00000001 g7
00809b58 g     O .bss	00000001 _cg53
00809b59 g     O .bss	00000001 _cg16
00806a8c g       *ABS*	00000000 __ram_rodata_end
00809b5a g     O .bss	00000001 g67_e7
00809b5b g     O .bss	00000001 PVARPStart
00809b5c g     O .bss	00000001 g80
00809b5d g     O .bss	00000001 PRE_g25
00806738 g     F .text	00000058 .hidden __umodsi3
00809ce0 g       *ABS*	00000000 end
00803bc8 g     F .text	000004e8 altera_avalon_lcd_16207_write
00809b5e g     O .bss	00000001 g77_e1_fix
00809b5f g     O .bss	00000001 g59
00809b60 g     O .bss	00000001 g54
00804b50 g     F .text	000001ac altera_avalon_uart_write
00809b61 g     O .bss	00000001 g66
00809b62 g     O .bss	00000001 g23
00802ae0 g     F .text	000000c8 altera_avalon_jtag_uart_init
008001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
008067c4 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00809b63 g     O .bss	00000001 _cg48
00809b64 g     O .bss	00000001 AVIExpired
00804370 g     F .text	0000008c alt_avalon_timer_sc_init
0080445c g     F .text	00000060 altera_avalon_uart_write_fd
008044bc g     F .text	00000050 altera_avalon_uart_close_fd
008031d0 g     F .text	00000224 altera_avalon_jtag_uart_write
00809b65 g     O .bss	00000001 g14
00809b66 g     O .bss	00000001 PRE_g79
00809b67 g     O .bss	00000001 PRE_g36
00809b68 g     O .bss	00000001 VRPStart
0080645c g     F .text	00000180 __call_exitprocs
00800244 g     F .text	0000004c _start
00809bd0 g     O .bss	00000004 _alt_tick_rate
00809b69 g     O .bss	00000001 g56
00809b6a g     O .bss	00000001 PRE_g52
00809b6b g     O .bss	00000001 VSense
00809bd4 g     O .bss	00000004 _alt_nticks
00809b6c g     O .bss	00000001 PRE_g6
008028e0 g     F .text	0000009c alt_sys_init
00809b6d g     O .bss	00000001 g78
00809b6e g     O .bss	00000001 g33
00806344 g     F .text	00000118 __register_exitproc
00809b6f g     O .bss	00000001 g11_e1
00802e5c g     F .text	00000068 altera_avalon_jtag_uart_close
00806a8c g       *ABS*	00000000 __ram_rwdata_start
008067c4 g       *ABS*	00000000 __ram_rodata_start
00809b70 g     O .bss	00000001 g50_e5
00809b71 g     O .bss	00000001 _cg29
0080297c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00809b72 g     O .bss	00000001 g35
00805d94 g     F .text	000000b4 alt_get_fd
00809b73 g     O .bss	00000001 _cg38
00805a98 g     F .text	00000158 alt_busy_sleep
00809b74 g     O .bss	00000001 g15
00809b75 g     O .bss	00000001 _GO
00805fc0 g     F .text	0000007c memcmp
00802a3c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00809b76 g     O .bss	00000001 PRE_g54
00809ce0 g       *ABS*	00000000 __alt_stack_base
00802a8c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00809b77 g     O .bss	00000001 VRPStop
00809b78 g     O .bss	00000001 g81_e2
008003a4 g     F .text	00002304 tick
00809b79 g     O .bss	00000001 g63
00809b7a g     O .bss	00000001 g20
00809b7b g     O .bss	00000001 g60
00809b7c g     O .bss	00000001 _cg10
00809b7d g     O .bss	00000001 AVIStart
00805c80 g     F .text	00000114 alt_find_file
00805020 g     F .text	000000a4 alt_dev_llist_insert
00809b7e g     O .bss	00000001 _cg22
00809b14 g       *ABS*	00000000 __bss_start
00809b7f g     O .bss	00000001 g43
00806184 g     F .text	00000128 memset
008026a8 g     F .text	00000060 main
00809b80 g     O .bss	00000001 _cg65
00809bc8 g     O .bss	00000004 alt_envp
008029dc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00809b81 g     O .bss	00000001 g53b
00809b82 g     O .bss	00000001 g36
0080415c g     F .text	0000013c altera_avalon_lcd_16207_init
00809b83 g     O .bss	00000001 g76_e8
00809b84 g     O .bss	00000001 g46
008082b4 g     O .rwdata	00000004 alt_errno
00809b85 g     O .bss	00000001 g50
00809b86 g     O .bss	00000001 g51
008065dc g     F .text	00000084 .hidden __divsi3
008067c4 g       *ABS*	00000000 __CTOR_END__
00809b87 g     O .bss	00000001 PRE_g60
00809b88 g     O .bss	00000001 _cg70
008067c4 g       *ABS*	00000000 __flash_rodata_start
008067c4 g       *ABS*	00000000 __DTOR_LIST__
008028a8 g     F .text	00000038 alt_irq_init
0080583c g     F .text	00000064 alt_release_fd
00809b89 g     O .bss	00000001 g13
00809b8a g     O .bss	00000001 g53
00809b8b g     O .bss	00000001 g8
00809b8c g     O .bss	00000001 g57
00805f74 g     F .text	00000014 atexit
00809b8d g     O .bss	00000001 g70
00809b8e g     O .bss	00000001 AR
008082cc g     O .rwdata	00000004 _impure_ptr
00809bc0 g     O .bss	00000004 alt_argc
00809b8f g     O .bss	00000001 g6
00809b90 g     O .bss	00000001 _cg56
00805124 g     F .text	00000060 _do_dtors
00809b91 g     O .bss	00000001 g72
00809b92 g     O .bss	00000001 g81
00800020 g       .exceptions	00000000 alt_irq_entry
00809b93 g     O .bss	00000001 PRE_g33
00804298 g     F .text	00000060 altera_avalon_lcd_16207_write_fd
00809b94 g     O .bss	00000001 _cg9
008082a0 g     O .rwdata	00000008 alt_fs_list
00809b95 g     O .bss	00000001 g0
00809b96 g     O .bss	00000001 _cg17
00809b97 g     O .bss	00000001 g75
00809b98 g     O .bss	00000001 g30
00800020 g       *ABS*	00000000 __ram_exceptions_start
00809b99 g     O .bss	00000001 PRE_g15
00809b9a g     O .bss	00000001 PRE_g21
00809b9b g     O .bss	00000001 g16
00809b9c g     O .bss	00000001 _cg24
008051b8 g     F .text	00000050 alt_ic_isr_register
00809b9d g     O .bss	00000001 g58
00809b9e g     O .bss	00000001 g68
00809b9f g     O .bss	00000001 g25
008082d0 g       *ABS*	00000000 _edata
008043fc g     F .text	00000060 altera_avalon_uart_read_fd
00809ba0 g     O .bss	00000001 PVARPStop
00809ce0 g       *ABS*	00000000 _end
00809ba1 g     O .bss	00000001 AEIExpired
00809ba2 g     O .bss	00000001 g11
00800244 g       *ABS*	00000000 __ram_exceptions_end
00802ec4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00809ba3 g     O .bss	00000001 g65
00809ba4 g     O .bss	00000001 g22
00809ba5 g     O .bss	00000001 g28
00809ba6 g     O .bss	00000001 g73
00809ba7 g     O .bss	00000001 g16b
008052a8 g     F .text	000000a4 alt_ic_irq_disable
00805f88 g     F .text	00000038 exit
00809ba8 g     O .bss	00000001 g40_e4
00809ba9 g     O .bss	00000001 g77
00809baa g     O .bss	00000001 g32
00806660 g     F .text	00000074 .hidden __modsi3
008082c4 g     O .rwdata	00000004 __ctype_ptr__
00809bab g     O .bss	00000001 AEIStart
00809bac g     O .bss	00000001 g45
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00800000 g       *ABS*	00000000 __alt_mem_sdram
00809bad g     O .bss	00000001 _cg55
00809bae g     O .bss	00000001 PRE_g45
00806806 g     O .rodata	00000101 _ctype_
00804880 g     F .text	00000054 altera_avalon_uart_close
00806790 g     F .text	00000034 _exit
00804cfc g     F .text	00000140 alt_alarm_start
00809baf g     O .bss	00000001 VPace
008062ac g     F .text	00000098 strlen
00809bb0 g     O .bss	00000001 g39
008056e4 g     F .text	00000158 open
00809bb1 g     O .bss	00000001 _cg49
00805184 g     F .text	00000034 alt_icache_flush_all
00809bb2 g     O .bss	00000001 g29
00809bb3 g     O .bss	00000001 _cg4
00809bb4 g     O .bss	00000001 g67
00809bb5 g     O .bss	00000001 g24
008082b8 g     O .rwdata	00000004 alt_priority_mask
00809bb6 g     O .bss	00000001 AEIEnd
00805208 g     F .text	000000a0 alt_ic_irq_enable
00804924 g     F .text	000001dc altera_avalon_uart_read
00809bb7 g     O .bss	00000001 g10
008082bc g     O .rwdata	00000008 alt_alarm_list
00809bb8 g     O .bss	00000001 PVARPExpired
008050c4 g     F .text	00000060 _do_ctors
00809bb9 g     O .bss	00000001 g26b
00809bba g     O .bss	00000001 g69
00809bbb g     O .bss	00000001 g26
00804e8c g     F .text	000000d0 close
00802770 g     F .text	00000084 alt_load
00809bbc g     O .bss	00000001 g77_e1
00809bbd g     O .bss	00000001 g74



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_mem_onchip_mem+0xff780004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08409114 	ori	at,at,580
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d00 	call	8001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001426 	beq	r2,zero,80018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80013c:	00802074 	movhi	r2,129
  800140:	10a6f804 	addi	r2,r2,-25632
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	00802074 	movhi	r2,129
  800158:	10a6f804 	addi	r2,r2,-25632
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	1105883a 	add	r2,r2,r4
  800168:	10800104 	addi	r2,r2,4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	1009883a 	mov	r4,r2
  800174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  800178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  80017c:	0005313a 	rdctl	r2,ipending
  800180:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800184:	e0bfff17 	ldw	r2,-4(fp)
  800188:	00000706 	br	8001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  80018c:	e0bffc17 	ldw	r2,-16(fp)
  800190:	1085883a 	add	r2,r2,r2
  800194:	e0bffc15 	stw	r2,-16(fp)
      i++;
  800198:	e0bffd17 	ldw	r2,-12(fp)
  80019c:	10800044 	addi	r2,r2,1
  8001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a4:	003fe106 	br	80012c <__alt_mem_onchip_mem+0xff78012c>

    active = alt_irq_pending ();
  8001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001ac:	e0bffb17 	ldw	r2,-20(fp)
  8001b0:	103fdb1e 	bne	r2,zero,800120 <__alt_mem_onchip_mem+0xff780120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b4:	0001883a 	nop
}
  8001b8:	0001883a 	nop
  8001bc:	e037883a 	mov	sp,fp
  8001c0:	dfc00117 	ldw	ra,4(sp)
  8001c4:	df000017 	ldw	fp,0(sp)
  8001c8:	dec00204 	addi	sp,sp,8
  8001cc:	f800283a 	ret

008001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d0:	defffb04 	addi	sp,sp,-20
  8001d4:	dfc00415 	stw	ra,16(sp)
  8001d8:	df000315 	stw	fp,12(sp)
  8001dc:	df000304 	addi	fp,sp,12
  8001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e4:	000531fa 	rdctl	r2,exception
  8001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001ec:	e0bffd17 	ldw	r2,-12(fp)
  8001f0:	10801f0c 	andi	r2,r2,124
  8001f4:	1004d0ba 	srli	r2,r2,2
  8001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001fc:	0005333a 	rdctl	r2,badaddr
  800200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800204:	d0a64f17 	ldw	r2,-26308(gp)
  800208:	10000726 	beq	r2,zero,800228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  80020c:	d0a64f17 	ldw	r2,-26308(gp)
  800210:	e0fffd17 	ldw	r3,-12(fp)
  800214:	e1bffe17 	ldw	r6,-8(fp)
  800218:	e17fff17 	ldw	r5,-4(fp)
  80021c:	1809883a 	mov	r4,r3
  800220:	103ee83a 	callr	r2
  800224:	00000206 	br	800230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  80022c:	0005883a 	mov	r2,zero
}
  800230:	e037883a 	mov	sp,fp
  800234:	dfc00117 	ldw	ra,4(sp)
  800238:	df000017 	ldw	fp,0(sp)
  80023c:	dec00204 	addi	sp,sp,8
  800240:	f800283a 	ret

Disassembly of section .text:

00800244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800250:	00bffd16 	blt	zero,r2,800248 <__alt_mem_onchip_mem+0xff780248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  80025c:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  800260:	d680a714 	ori	gp,gp,668
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800264:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  800268:	10a6c514 	ori	r2,r2,39700

    movhi r3, %hi(__bss_end)
  80026c:	00c02034 	movhi	r3,128
    ori r3, r3, %lo(__bss_end)
  800270:	18e73814 	ori	r3,r3,40160

    beq r2, r3, 1f
  800274:	10c00326 	beq	r2,r3,800284 <_start+0x40>

0:
    stw zero, (r2)
  800278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  80027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800280:	10fffd36 	bltu	r2,r3,800278 <__alt_mem_onchip_mem+0xff780278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800284:	08027700 	call	802770 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800288:	08027f40 	call	8027f4 <alt_main>

0080028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  80028c:	003fff06 	br	80028c <__alt_mem_onchip_mem+0xff78028c>

00800290 <reset>:
char g77_fix0;
char g77_e1_fix;
char g77_e1;
char g81_e2;
int _PRE_GO;
void reset(){
  800290:	deffff04 	addi	sp,sp,-4
  800294:	df000015 	stw	fp,0(sp)
  800298:	d839883a 	mov	fp,sp
   _GO = 1;
  80029c:	00802074 	movhi	r2,129
  8002a0:	10a6dd44 	addi	r2,r2,-25739
  8002a4:	00c00044 	movi	r3,1
  8002a8:	10c00005 	stb	r3,0(r2)
   _PRE_GO = 0;
  8002ac:	00802074 	movhi	r2,129
  8002b0:	10a6ca04 	addi	r2,r2,-25816
  8002b4:	10000015 	stw	zero,0(r2)
   PRE_g3 = 0;
  8002b8:	00802074 	movhi	r2,129
  8002bc:	10a6cb04 	addi	r2,r2,-25812
  8002c0:	10000005 	stb	zero,0(r2)
   PRE_g6 = 0;
  8002c4:	00802074 	movhi	r2,129
  8002c8:	10a6db04 	addi	r2,r2,-25748
  8002cc:	10000005 	stb	zero,0(r2)
   PRE_g13 = 0;
  8002d0:	00802074 	movhi	r2,129
  8002d4:	10a6cb84 	addi	r2,r2,-25810
  8002d8:	10000005 	stb	zero,0(r2)
   PRE_g15 = 0;
  8002dc:	00802074 	movhi	r2,129
  8002e0:	10a6e644 	addi	r2,r2,-25703
  8002e4:	10000005 	stb	zero,0(r2)
   PRE_g21 = 0;
  8002e8:	00802074 	movhi	r2,129
  8002ec:	10a6e684 	addi	r2,r2,-25702
  8002f0:	10000005 	stb	zero,0(r2)
   PRE_g25 = 0;
  8002f4:	00802074 	movhi	r2,129
  8002f8:	10a6d744 	addi	r2,r2,-25763
  8002fc:	10000005 	stb	zero,0(r2)
   PRE_g27 = 0;
  800300:	00802074 	movhi	r2,129
  800304:	10a6c7c4 	addi	r2,r2,-25825
  800308:	10000005 	stb	zero,0(r2)
   PRE_g33 = 0;
  80030c:	00802074 	movhi	r2,129
  800310:	10a6e4c4 	addi	r2,r2,-25709
  800314:	10000005 	stb	zero,0(r2)
   PRE_g36 = 0;
  800318:	00802074 	movhi	r2,129
  80031c:	10a6d9c4 	addi	r2,r2,-25753
  800320:	10000005 	stb	zero,0(r2)
   PRE_g42 = 0;
  800324:	00802074 	movhi	r2,129
  800328:	10a6d304 	addi	r2,r2,-25780
  80032c:	10000005 	stb	zero,0(r2)
   PRE_g45 = 0;
  800330:	00802074 	movhi	r2,129
  800334:	10a6eb84 	addi	r2,r2,-25682
  800338:	10000005 	stb	zero,0(r2)
   PRE_g52 = 0;
  80033c:	00802074 	movhi	r2,129
  800340:	10a6da84 	addi	r2,r2,-25750
  800344:	10000005 	stb	zero,0(r2)
   PRE_g54 = 0;
  800348:	00802074 	movhi	r2,129
  80034c:	10a6dd84 	addi	r2,r2,-25738
  800350:	10000005 	stb	zero,0(r2)
   PRE_g60 = 0;
  800354:	00802074 	movhi	r2,129
  800358:	10a6e1c4 	addi	r2,r2,-25721
  80035c:	10000005 	stb	zero,0(r2)
   PRE_g63 = 0;
  800360:	00802074 	movhi	r2,129
  800364:	10a6c784 	addi	r2,r2,-25826
  800368:	10000005 	stb	zero,0(r2)
   PRE_g69 = 0;
  80036c:	00802074 	movhi	r2,129
  800370:	10a6cdc4 	addi	r2,r2,-25801
  800374:	10000005 	stb	zero,0(r2)
   PRE_g72 = 0;
  800378:	00802074 	movhi	r2,129
  80037c:	10a6cbc4 	addi	r2,r2,-25809
  800380:	10000005 	stb	zero,0(r2)
   PRE_g79 = 0;
  800384:	00802074 	movhi	r2,129
  800388:	10a6d984 	addi	r2,r2,-25754
  80038c:	10000005 	stb	zero,0(r2)
   return;
  800390:	0001883a 	nop
}
  800394:	e037883a 	mov	sp,fp
  800398:	df000017 	ldw	fp,0(sp)
  80039c:	dec00104 	addi	sp,sp,4
  8003a0:	f800283a 	ret

008003a4 <tick>:
void tick(){
  8003a4:	deffff04 	addi	sp,sp,-4
  8003a8:	df000015 	stw	fp,0(sp)
  8003ac:	d839883a 	mov	fp,sp
   if(_PRE_GO == 1){
  8003b0:	00802074 	movhi	r2,129
  8003b4:	10a6ca04 	addi	r2,r2,-25816
  8003b8:	10800017 	ldw	r2,0(r2)
  8003bc:	10800058 	cmpnei	r2,r2,1
  8003c0:	1000031e 	bne	r2,zero,8003d0 <tick+0x2c>
      _GO = 0;
  8003c4:	00802074 	movhi	r2,129
  8003c8:	10a6dd44 	addi	r2,r2,-25739
  8003cc:	10000005 	stb	zero,0(r2)
   }
   {
      g0 = _GO;
  8003d0:	00802074 	movhi	r2,129
  8003d4:	10a6dd44 	addi	r2,r2,-25739
  8003d8:	10c00003 	ldbu	r3,0(r2)
  8003dc:	00802074 	movhi	r2,129
  8003e0:	10a6e544 	addi	r2,r2,-25707
  8003e4:	10c00005 	stb	r3,0(r2)
      g1 = g0;
  8003e8:	00802074 	movhi	r2,129
  8003ec:	10a6e544 	addi	r2,r2,-25707
  8003f0:	10c00003 	ldbu	r3,0(r2)
  8003f4:	00802074 	movhi	r2,129
  8003f8:	10a6ccc4 	addi	r2,r2,-25805
  8003fc:	10c00005 	stb	r3,0(r2)
      g2 = g1;
  800400:	00802074 	movhi	r2,129
  800404:	10a6ccc4 	addi	r2,r2,-25805
  800408:	10c00003 	ldbu	r3,0(r2)
  80040c:	00802074 	movhi	r2,129
  800410:	10a6d584 	addi	r2,r2,-25770
  800414:	10c00005 	stb	r3,0(r2)
      g7 =(PRE_g6);
  800418:	00802074 	movhi	r2,129
  80041c:	10a6db04 	addi	r2,r2,-25748
  800420:	10c00003 	ldbu	r3,0(r2)
  800424:	00802074 	movhi	r2,129
  800428:	10a6d5c4 	addi	r2,r2,-25769
  80042c:	10c00005 	stb	r3,0(r2)
      _cg7 = VSense;
  800430:	00802074 	movhi	r2,129
  800434:	10a6dac4 	addi	r2,r2,-25749
  800438:	10c00003 	ldbu	r3,0(r2)
  80043c:	00802074 	movhi	r2,129
  800440:	10a6c904 	addi	r2,r2,-25820
  800444:	10c00005 	stb	r3,0(r2)
      g9 =(g7&&(!(_cg7)));
  800448:	00802074 	movhi	r2,129
  80044c:	10a6d5c4 	addi	r2,r2,-25769
  800450:	10800003 	ldbu	r2,0(r2)
  800454:	10803fcc 	andi	r2,r2,255
  800458:	1080201c 	xori	r2,r2,128
  80045c:	10bfe004 	addi	r2,r2,-128
  800460:	10000926 	beq	r2,zero,800488 <tick+0xe4>
  800464:	00802074 	movhi	r2,129
  800468:	10a6c904 	addi	r2,r2,-25820
  80046c:	10800003 	ldbu	r2,0(r2)
  800470:	10803fcc 	andi	r2,r2,255
  800474:	1080201c 	xori	r2,r2,128
  800478:	10bfe004 	addi	r2,r2,-128
  80047c:	1000021e 	bne	r2,zero,800488 <tick+0xe4>
  800480:	00800044 	movi	r2,1
  800484:	00000106 	br	80048c <tick+0xe8>
  800488:	0005883a 	mov	r2,zero
  80048c:	1007883a 	mov	r3,r2
  800490:	00802074 	movhi	r2,129
  800494:	10a6c8c4 	addi	r2,r2,-25821
  800498:	10c00005 	stb	r3,0(r2)
      _cg9 = AVIExpired;
  80049c:	00802074 	movhi	r2,129
  8004a0:	10a6d904 	addi	r2,r2,-25756
  8004a4:	10c00003 	ldbu	r3,0(r2)
  8004a8:	00802074 	movhi	r2,129
  8004ac:	10a6e504 	addi	r2,r2,-25708
  8004b0:	10c00005 	stb	r3,0(r2)
      g80 =(PRE_g79);
  8004b4:	00802074 	movhi	r2,129
  8004b8:	10a6d984 	addi	r2,r2,-25754
  8004bc:	10c00003 	ldbu	r3,0(r2)
  8004c0:	00802074 	movhi	r2,129
  8004c4:	10a6d704 	addi	r2,r2,-25764
  8004c8:	10c00005 	stb	r3,0(r2)
      g78 = g0;
  8004cc:	00802074 	movhi	r2,129
  8004d0:	10a6e544 	addi	r2,r2,-25707
  8004d4:	10c00003 	ldbu	r3,0(r2)
  8004d8:	00802074 	movhi	r2,129
  8004dc:	10a6db44 	addi	r2,r2,-25747
  8004e0:	10c00005 	stb	r3,0(r2)
      g79 =(g80||g78);
  8004e4:	00802074 	movhi	r2,129
  8004e8:	10a6d704 	addi	r2,r2,-25764
  8004ec:	10800003 	ldbu	r2,0(r2)
  8004f0:	10803fcc 	andi	r2,r2,255
  8004f4:	1080201c 	xori	r2,r2,128
  8004f8:	10bfe004 	addi	r2,r2,-128
  8004fc:	1000071e 	bne	r2,zero,80051c <tick+0x178>
  800500:	00802074 	movhi	r2,129
  800504:	10a6db44 	addi	r2,r2,-25747
  800508:	10800003 	ldbu	r2,0(r2)
  80050c:	10803fcc 	andi	r2,r2,255
  800510:	1080201c 	xori	r2,r2,128
  800514:	10bfe004 	addi	r2,r2,-128
  800518:	10000226 	beq	r2,zero,800524 <tick+0x180>
  80051c:	00800044 	movi	r2,1
  800520:	00000106 	br	800528 <tick+0x184>
  800524:	0005883a 	mov	r2,zero
  800528:	1007883a 	mov	r3,r2
  80052c:	00802074 	movhi	r2,129
  800530:	10a6d484 	addi	r2,r2,-25774
  800534:	10c00005 	stb	r3,0(r2)
      if(g79){
  800538:	00802074 	movhi	r2,129
  80053c:	10a6d484 	addi	r2,r2,-25774
  800540:	10800003 	ldbu	r2,0(r2)
  800544:	10803fcc 	andi	r2,r2,255
  800548:	1080201c 	xori	r2,r2,128
  80054c:	10bfe004 	addi	r2,r2,-128
  800550:	10002426 	beq	r2,zero,8005e4 <tick+0x240>
         AEIStart = 0;
  800554:	00802074 	movhi	r2,129
  800558:	10a6eac4 	addi	r2,r2,-25685
  80055c:	10000005 	stb	zero,0(r2)
         AVIStart = 0;
  800560:	00802074 	movhi	r2,129
  800564:	10a6df44 	addi	r2,r2,-25731
  800568:	10000005 	stb	zero,0(r2)
         PVARPStart = 0;
  80056c:	00802074 	movhi	r2,129
  800570:	10a6d6c4 	addi	r2,r2,-25765
  800574:	10000005 	stb	zero,0(r2)
         VRPStart = 0;
  800578:	00802074 	movhi	r2,129
  80057c:	10a6da04 	addi	r2,r2,-25752
  800580:	10000005 	stb	zero,0(r2)
         AEIStop = 0;
  800584:	00802074 	movhi	r2,129
  800588:	10a6cc84 	addi	r2,r2,-25806
  80058c:	10000005 	stb	zero,0(r2)
         AVIStop = 0;
  800590:	00802074 	movhi	r2,129
  800594:	10a6d144 	addi	r2,r2,-25787
  800598:	10000005 	stb	zero,0(r2)
         PVARPStop = 0;
  80059c:	00802074 	movhi	r2,129
  8005a0:	10a6e804 	addi	r2,r2,-25696
  8005a4:	10000005 	stb	zero,0(r2)
         VRPStop = 0;
  8005a8:	00802074 	movhi	r2,129
  8005ac:	10a6ddc4 	addi	r2,r2,-25737
  8005b0:	10000005 	stb	zero,0(r2)
         APace = 0;
  8005b4:	00802074 	movhi	r2,129
  8005b8:	10a6c544 	addi	r2,r2,-25835
  8005bc:	10000005 	stb	zero,0(r2)
         VPace = 0;
  8005c0:	00802074 	movhi	r2,129
  8005c4:	10a6ebc4 	addi	r2,r2,-25681
  8005c8:	10000005 	stb	zero,0(r2)
         AR = 0;
  8005cc:	00802074 	movhi	r2,129
  8005d0:	10a6e384 	addi	r2,r2,-25714
  8005d4:	10000005 	stb	zero,0(r2)
         VR = 0;
  8005d8:	00802074 	movhi	r2,129
  8005dc:	10a6d284 	addi	r2,r2,-25782
  8005e0:	10000005 	stb	zero,0(r2)
      }
      g46 =(PRE_g45);
  8005e4:	00802074 	movhi	r2,129
  8005e8:	10a6eb84 	addi	r2,r2,-25682
  8005ec:	10c00003 	ldbu	r3,0(r2)
  8005f0:	00802074 	movhi	r2,129
  8005f4:	10a6e104 	addi	r2,r2,-25724
  8005f8:	10c00005 	stb	r3,0(r2)
      _cg46 = ASense;
  8005fc:	00802074 	movhi	r2,129
  800600:	10a6d204 	addi	r2,r2,-25784
  800604:	10c00003 	ldbu	r3,0(r2)
  800608:	00802074 	movhi	r2,129
  80060c:	10a6cec4 	addi	r2,r2,-25797
  800610:	10c00005 	stb	r3,0(r2)
      g47 =(g46&&_cg46);
  800614:	00802074 	movhi	r2,129
  800618:	10a6e104 	addi	r2,r2,-25724
  80061c:	10800003 	ldbu	r2,0(r2)
  800620:	10803fcc 	andi	r2,r2,255
  800624:	1080201c 	xori	r2,r2,128
  800628:	10bfe004 	addi	r2,r2,-128
  80062c:	10000926 	beq	r2,zero,800654 <tick+0x2b0>
  800630:	00802074 	movhi	r2,129
  800634:	10a6cec4 	addi	r2,r2,-25797
  800638:	10800003 	ldbu	r2,0(r2)
  80063c:	10803fcc 	andi	r2,r2,255
  800640:	1080201c 	xori	r2,r2,128
  800644:	10bfe004 	addi	r2,r2,-128
  800648:	10000226 	beq	r2,zero,800654 <tick+0x2b0>
  80064c:	00800044 	movi	r2,1
  800650:	00000106 	br	800658 <tick+0x2b4>
  800654:	0005883a 	mov	r2,zero
  800658:	1007883a 	mov	r3,r2
  80065c:	00802074 	movhi	r2,129
  800660:	10a6c844 	addi	r2,r2,-25823
  800664:	10c00005 	stb	r3,0(r2)
      if(g47){
  800668:	00802074 	movhi	r2,129
  80066c:	10a6c844 	addi	r2,r2,-25823
  800670:	10800003 	ldbu	r2,0(r2)
  800674:	10803fcc 	andi	r2,r2,255
  800678:	1080201c 	xori	r2,r2,128
  80067c:	10bfe004 	addi	r2,r2,-128
  800680:	10000426 	beq	r2,zero,800694 <tick+0x2f0>
         AEIStop =(AEIStop||1);
  800684:	00802074 	movhi	r2,129
  800688:	10a6cc84 	addi	r2,r2,-25806
  80068c:	00c00044 	movi	r3,1
  800690:	10c00005 	stb	r3,0(r2)
      }
      g55 =(PRE_g54);
  800694:	00802074 	movhi	r2,129
  800698:	10a6dd84 	addi	r2,r2,-25738
  80069c:	10c00003 	ldbu	r3,0(r2)
  8006a0:	00802074 	movhi	r2,129
  8006a4:	10a6c6c4 	addi	r2,r2,-25829
  8006a8:	10c00005 	stb	r3,0(r2)
      g55b = g55;
  8006ac:	00802074 	movhi	r2,129
  8006b0:	10a6c6c4 	addi	r2,r2,-25829
  8006b4:	10c00003 	ldbu	r3,0(r2)
  8006b8:	00802074 	movhi	r2,129
  8006bc:	10a6c804 	addi	r2,r2,-25824
  8006c0:	10c00005 	stb	r3,0(r2)
      _cg55 = AEIStop;
  8006c4:	00802074 	movhi	r2,129
  8006c8:	10a6cc84 	addi	r2,r2,-25806
  8006cc:	10c00003 	ldbu	r3,0(r2)
  8006d0:	00802074 	movhi	r2,129
  8006d4:	10a6eb44 	addi	r2,r2,-25683
  8006d8:	10c00005 	stb	r3,0(r2)
      g56 =(g55b&&(!(_cg55)));
  8006dc:	00802074 	movhi	r2,129
  8006e0:	10a6c804 	addi	r2,r2,-25824
  8006e4:	10800003 	ldbu	r2,0(r2)
  8006e8:	10803fcc 	andi	r2,r2,255
  8006ec:	1080201c 	xori	r2,r2,128
  8006f0:	10bfe004 	addi	r2,r2,-128
  8006f4:	10000926 	beq	r2,zero,80071c <tick+0x378>
  8006f8:	00802074 	movhi	r2,129
  8006fc:	10a6eb44 	addi	r2,r2,-25683
  800700:	10800003 	ldbu	r2,0(r2)
  800704:	10803fcc 	andi	r2,r2,255
  800708:	1080201c 	xori	r2,r2,128
  80070c:	10bfe004 	addi	r2,r2,-128
  800710:	1000021e 	bne	r2,zero,80071c <tick+0x378>
  800714:	00800044 	movi	r2,1
  800718:	00000106 	br	800720 <tick+0x37c>
  80071c:	0005883a 	mov	r2,zero
  800720:	1007883a 	mov	r3,r2
  800724:	00802074 	movhi	r2,129
  800728:	10a6da44 	addi	r2,r2,-25751
  80072c:	10c00005 	stb	r3,0(r2)
      _cg56 = AEIExpired;
  800730:	00802074 	movhi	r2,129
  800734:	10a6e844 	addi	r2,r2,-25695
  800738:	10c00003 	ldbu	r3,0(r2)
  80073c:	00802074 	movhi	r2,129
  800740:	10a6e404 	addi	r2,r2,-25712
  800744:	10c00005 	stb	r3,0(r2)
      g57 =(g56&&_cg56);
  800748:	00802074 	movhi	r2,129
  80074c:	10a6da44 	addi	r2,r2,-25751
  800750:	10800003 	ldbu	r2,0(r2)
  800754:	10803fcc 	andi	r2,r2,255
  800758:	1080201c 	xori	r2,r2,128
  80075c:	10bfe004 	addi	r2,r2,-128
  800760:	10000926 	beq	r2,zero,800788 <tick+0x3e4>
  800764:	00802074 	movhi	r2,129
  800768:	10a6e404 	addi	r2,r2,-25712
  80076c:	10800003 	ldbu	r2,0(r2)
  800770:	10803fcc 	andi	r2,r2,255
  800774:	1080201c 	xori	r2,r2,128
  800778:	10bfe004 	addi	r2,r2,-128
  80077c:	10000226 	beq	r2,zero,800788 <tick+0x3e4>
  800780:	00800044 	movi	r2,1
  800784:	00000106 	br	80078c <tick+0x3e8>
  800788:	0005883a 	mov	r2,zero
  80078c:	1007883a 	mov	r3,r2
  800790:	00802074 	movhi	r2,129
  800794:	10a6e304 	addi	r2,r2,-25716
  800798:	10c00005 	stb	r3,0(r2)
      if(g57){
  80079c:	00802074 	movhi	r2,129
  8007a0:	10a6e304 	addi	r2,r2,-25716
  8007a4:	10800003 	ldbu	r2,0(r2)
  8007a8:	10803fcc 	andi	r2,r2,255
  8007ac:	1080201c 	xori	r2,r2,128
  8007b0:	10bfe004 	addi	r2,r2,-128
  8007b4:	10000426 	beq	r2,zero,8007c8 <tick+0x424>
         APace =(APace||1);
  8007b8:	00802074 	movhi	r2,129
  8007bc:	10a6c544 	addi	r2,r2,-25835
  8007c0:	00c00044 	movi	r3,1
  8007c4:	10c00005 	stb	r3,0(r2)
      }
      g4 =(PRE_g3);
  8007c8:	00802074 	movhi	r2,129
  8007cc:	10a6cb04 	addi	r2,r2,-25812
  8007d0:	10c00003 	ldbu	r3,0(r2)
  8007d4:	00802074 	movhi	r2,129
  8007d8:	10a6c5c4 	addi	r2,r2,-25833
  8007dc:	10c00005 	stb	r3,0(r2)
      _cg4 = ASense;
  8007e0:	00802074 	movhi	r2,129
  8007e4:	10a6d204 	addi	r2,r2,-25784
  8007e8:	10c00003 	ldbu	r3,0(r2)
  8007ec:	00802074 	movhi	r2,129
  8007f0:	10a6ecc4 	addi	r2,r2,-25677
  8007f4:	10c00005 	stb	r3,0(r2)
      g10 =(g4&&(!(_cg4)));
  8007f8:	00802074 	movhi	r2,129
  8007fc:	10a6c5c4 	addi	r2,r2,-25833
  800800:	10800003 	ldbu	r2,0(r2)
  800804:	10803fcc 	andi	r2,r2,255
  800808:	1080201c 	xori	r2,r2,128
  80080c:	10bfe004 	addi	r2,r2,-128
  800810:	10000926 	beq	r2,zero,800838 <tick+0x494>
  800814:	00802074 	movhi	r2,129
  800818:	10a6ecc4 	addi	r2,r2,-25677
  80081c:	10800003 	ldbu	r2,0(r2)
  800820:	10803fcc 	andi	r2,r2,255
  800824:	1080201c 	xori	r2,r2,128
  800828:	10bfe004 	addi	r2,r2,-128
  80082c:	1000021e 	bne	r2,zero,800838 <tick+0x494>
  800830:	00800044 	movi	r2,1
  800834:	00000106 	br	80083c <tick+0x498>
  800838:	0005883a 	mov	r2,zero
  80083c:	1007883a 	mov	r3,r2
  800840:	00802074 	movhi	r2,129
  800844:	10a6edc4 	addi	r2,r2,-25673
  800848:	10c00005 	stb	r3,0(r2)
      _cg10 = APace;
  80084c:	00802074 	movhi	r2,129
  800850:	10a6c544 	addi	r2,r2,-25835
  800854:	10c00003 	ldbu	r3,0(r2)
  800858:	00802074 	movhi	r2,129
  80085c:	10a6df04 	addi	r2,r2,-25732
  800860:	10c00005 	stb	r3,0(r2)
      g8 =(g7&&_cg7);
  800864:	00802074 	movhi	r2,129
  800868:	10a6d5c4 	addi	r2,r2,-25769
  80086c:	10800003 	ldbu	r2,0(r2)
  800870:	10803fcc 	andi	r2,r2,255
  800874:	1080201c 	xori	r2,r2,128
  800878:	10bfe004 	addi	r2,r2,-128
  80087c:	10000926 	beq	r2,zero,8008a4 <tick+0x500>
  800880:	00802074 	movhi	r2,129
  800884:	10a6c904 	addi	r2,r2,-25820
  800888:	10800003 	ldbu	r2,0(r2)
  80088c:	10803fcc 	andi	r2,r2,255
  800890:	1080201c 	xori	r2,r2,128
  800894:	10bfe004 	addi	r2,r2,-128
  800898:	10000226 	beq	r2,zero,8008a4 <tick+0x500>
  80089c:	00800044 	movi	r2,1
  8008a0:	00000106 	br	8008a8 <tick+0x504>
  8008a4:	0005883a 	mov	r2,zero
  8008a8:	1007883a 	mov	r3,r2
  8008ac:	00802074 	movhi	r2,129
  8008b0:	10a6e2c4 	addi	r2,r2,-25717
  8008b4:	10c00005 	stb	r3,0(r2)
      if(g8){
  8008b8:	00802074 	movhi	r2,129
  8008bc:	10a6e2c4 	addi	r2,r2,-25717
  8008c0:	10800003 	ldbu	r2,0(r2)
  8008c4:	10803fcc 	andi	r2,r2,255
  8008c8:	1080201c 	xori	r2,r2,128
  8008cc:	10bfe004 	addi	r2,r2,-128
  8008d0:	10000426 	beq	r2,zero,8008e4 <tick+0x540>
         AVIStop =(AVIStop||1);
  8008d4:	00802074 	movhi	r2,129
  8008d8:	10a6d144 	addi	r2,r2,-25787
  8008dc:	00c00044 	movi	r3,1
  8008e0:	10c00005 	stb	r3,0(r2)
      }
      g3 =(g2||(g9&&_cg9)||(g10&&(!(_cg10)))||g8);
  8008e4:	00802074 	movhi	r2,129
  8008e8:	10a6d584 	addi	r2,r2,-25770
  8008ec:	10800003 	ldbu	r2,0(r2)
  8008f0:	10803fcc 	andi	r2,r2,255
  8008f4:	1080201c 	xori	r2,r2,128
  8008f8:	10bfe004 	addi	r2,r2,-128
  8008fc:	1000231e 	bne	r2,zero,80098c <tick+0x5e8>
  800900:	00802074 	movhi	r2,129
  800904:	10a6c8c4 	addi	r2,r2,-25821
  800908:	10800003 	ldbu	r2,0(r2)
  80090c:	10803fcc 	andi	r2,r2,255
  800910:	1080201c 	xori	r2,r2,128
  800914:	10bfe004 	addi	r2,r2,-128
  800918:	10000726 	beq	r2,zero,800938 <tick+0x594>
  80091c:	00802074 	movhi	r2,129
  800920:	10a6e504 	addi	r2,r2,-25708
  800924:	10800003 	ldbu	r2,0(r2)
  800928:	10803fcc 	andi	r2,r2,255
  80092c:	1080201c 	xori	r2,r2,128
  800930:	10bfe004 	addi	r2,r2,-128
  800934:	1000151e 	bne	r2,zero,80098c <tick+0x5e8>
  800938:	00802074 	movhi	r2,129
  80093c:	10a6edc4 	addi	r2,r2,-25673
  800940:	10800003 	ldbu	r2,0(r2)
  800944:	10803fcc 	andi	r2,r2,255
  800948:	1080201c 	xori	r2,r2,128
  80094c:	10bfe004 	addi	r2,r2,-128
  800950:	10000726 	beq	r2,zero,800970 <tick+0x5cc>
  800954:	00802074 	movhi	r2,129
  800958:	10a6df04 	addi	r2,r2,-25732
  80095c:	10800003 	ldbu	r2,0(r2)
  800960:	10803fcc 	andi	r2,r2,255
  800964:	1080201c 	xori	r2,r2,128
  800968:	10bfe004 	addi	r2,r2,-128
  80096c:	10000726 	beq	r2,zero,80098c <tick+0x5e8>
  800970:	00802074 	movhi	r2,129
  800974:	10a6e2c4 	addi	r2,r2,-25717
  800978:	10800003 	ldbu	r2,0(r2)
  80097c:	10803fcc 	andi	r2,r2,255
  800980:	1080201c 	xori	r2,r2,128
  800984:	10bfe004 	addi	r2,r2,-128
  800988:	10000226 	beq	r2,zero,800994 <tick+0x5f0>
  80098c:	00800044 	movi	r2,1
  800990:	00000106 	br	800998 <tick+0x5f4>
  800994:	0005883a 	mov	r2,zero
  800998:	1007883a 	mov	r3,r2
  80099c:	00802074 	movhi	r2,129
  8009a0:	10a6c744 	addi	r2,r2,-25827
  8009a4:	10c00005 	stb	r3,0(r2)
      g5 =((g4&&_cg4)||(g10&&_cg10));
  8009a8:	00802074 	movhi	r2,129
  8009ac:	10a6c5c4 	addi	r2,r2,-25833
  8009b0:	10800003 	ldbu	r2,0(r2)
  8009b4:	10803fcc 	andi	r2,r2,255
  8009b8:	1080201c 	xori	r2,r2,128
  8009bc:	10bfe004 	addi	r2,r2,-128
  8009c0:	10000726 	beq	r2,zero,8009e0 <tick+0x63c>
  8009c4:	00802074 	movhi	r2,129
  8009c8:	10a6ecc4 	addi	r2,r2,-25677
  8009cc:	10800003 	ldbu	r2,0(r2)
  8009d0:	10803fcc 	andi	r2,r2,255
  8009d4:	1080201c 	xori	r2,r2,128
  8009d8:	10bfe004 	addi	r2,r2,-128
  8009dc:	10000e1e 	bne	r2,zero,800a18 <tick+0x674>
  8009e0:	00802074 	movhi	r2,129
  8009e4:	10a6edc4 	addi	r2,r2,-25673
  8009e8:	10800003 	ldbu	r2,0(r2)
  8009ec:	10803fcc 	andi	r2,r2,255
  8009f0:	1080201c 	xori	r2,r2,128
  8009f4:	10bfe004 	addi	r2,r2,-128
  8009f8:	10000926 	beq	r2,zero,800a20 <tick+0x67c>
  8009fc:	00802074 	movhi	r2,129
  800a00:	10a6df04 	addi	r2,r2,-25732
  800a04:	10800003 	ldbu	r2,0(r2)
  800a08:	10803fcc 	andi	r2,r2,255
  800a0c:	1080201c 	xori	r2,r2,128
  800a10:	10bfe004 	addi	r2,r2,-128
  800a14:	10000226 	beq	r2,zero,800a20 <tick+0x67c>
  800a18:	00800044 	movi	r2,1
  800a1c:	00000106 	br	800a24 <tick+0x680>
  800a20:	0005883a 	mov	r2,zero
  800a24:	1007883a 	mov	r3,r2
  800a28:	00802074 	movhi	r2,129
  800a2c:	10a6d504 	addi	r2,r2,-25772
  800a30:	10c00005 	stb	r3,0(r2)
      if(g5){
  800a34:	00802074 	movhi	r2,129
  800a38:	10a6d504 	addi	r2,r2,-25772
  800a3c:	10800003 	ldbu	r2,0(r2)
  800a40:	10803fcc 	andi	r2,r2,255
  800a44:	1080201c 	xori	r2,r2,128
  800a48:	10bfe004 	addi	r2,r2,-128
  800a4c:	10000426 	beq	r2,zero,800a60 <tick+0x6bc>
         AVIStart =(AVIStart||1);
  800a50:	00802074 	movhi	r2,129
  800a54:	10a6df44 	addi	r2,r2,-25731
  800a58:	00c00044 	movi	r3,1
  800a5c:	10c00005 	stb	r3,0(r2)
      }
      g6 =(g5||(g9&&(!(_cg9))));
  800a60:	00802074 	movhi	r2,129
  800a64:	10a6d504 	addi	r2,r2,-25772
  800a68:	10800003 	ldbu	r2,0(r2)
  800a6c:	10803fcc 	andi	r2,r2,255
  800a70:	1080201c 	xori	r2,r2,128
  800a74:	10bfe004 	addi	r2,r2,-128
  800a78:	10000e1e 	bne	r2,zero,800ab4 <tick+0x710>
  800a7c:	00802074 	movhi	r2,129
  800a80:	10a6c8c4 	addi	r2,r2,-25821
  800a84:	10800003 	ldbu	r2,0(r2)
  800a88:	10803fcc 	andi	r2,r2,255
  800a8c:	1080201c 	xori	r2,r2,128
  800a90:	10bfe004 	addi	r2,r2,-128
  800a94:	10000926 	beq	r2,zero,800abc <tick+0x718>
  800a98:	00802074 	movhi	r2,129
  800a9c:	10a6e504 	addi	r2,r2,-25708
  800aa0:	10800003 	ldbu	r2,0(r2)
  800aa4:	10803fcc 	andi	r2,r2,255
  800aa8:	1080201c 	xori	r2,r2,128
  800aac:	10bfe004 	addi	r2,r2,-128
  800ab0:	1000021e 	bne	r2,zero,800abc <tick+0x718>
  800ab4:	00800044 	movi	r2,1
  800ab8:	00000106 	br	800ac0 <tick+0x71c>
  800abc:	0005883a 	mov	r2,zero
  800ac0:	1007883a 	mov	r3,r2
  800ac4:	00802074 	movhi	r2,129
  800ac8:	10a6e3c4 	addi	r2,r2,-25713
  800acc:	10c00005 	stb	r3,0(r2)
      g12 = g1;
  800ad0:	00802074 	movhi	r2,129
  800ad4:	10a6ccc4 	addi	r2,r2,-25805
  800ad8:	10c00003 	ldbu	r3,0(r2)
  800adc:	00802074 	movhi	r2,129
  800ae0:	10a6ce04 	addi	r2,r2,-25800
  800ae4:	10c00005 	stb	r3,0(r2)
      g16 =(PRE_g15);
  800ae8:	00802074 	movhi	r2,129
  800aec:	10a6e644 	addi	r2,r2,-25703
  800af0:	10c00003 	ldbu	r3,0(r2)
  800af4:	00802074 	movhi	r2,129
  800af8:	10a6e6c4 	addi	r2,r2,-25701
  800afc:	10c00005 	stb	r3,0(r2)
      g16b = g16;
  800b00:	00802074 	movhi	r2,129
  800b04:	10a6e6c4 	addi	r2,r2,-25701
  800b08:	10c00003 	ldbu	r3,0(r2)
  800b0c:	00802074 	movhi	r2,129
  800b10:	10a6e9c4 	addi	r2,r2,-25689
  800b14:	10c00005 	stb	r3,0(r2)
      _cg16 = AVIStop;
  800b18:	00802074 	movhi	r2,129
  800b1c:	10a6d144 	addi	r2,r2,-25787
  800b20:	10c00003 	ldbu	r3,0(r2)
  800b24:	00802074 	movhi	r2,129
  800b28:	10a6d644 	addi	r2,r2,-25767
  800b2c:	10c00005 	stb	r3,0(r2)
      g17 =(g16b&&(!(_cg16)));
  800b30:	00802074 	movhi	r2,129
  800b34:	10a6e9c4 	addi	r2,r2,-25689
  800b38:	10800003 	ldbu	r2,0(r2)
  800b3c:	10803fcc 	andi	r2,r2,255
  800b40:	1080201c 	xori	r2,r2,128
  800b44:	10bfe004 	addi	r2,r2,-128
  800b48:	10000926 	beq	r2,zero,800b70 <tick+0x7cc>
  800b4c:	00802074 	movhi	r2,129
  800b50:	10a6d644 	addi	r2,r2,-25767
  800b54:	10800003 	ldbu	r2,0(r2)
  800b58:	10803fcc 	andi	r2,r2,255
  800b5c:	1080201c 	xori	r2,r2,128
  800b60:	10bfe004 	addi	r2,r2,-128
  800b64:	1000021e 	bne	r2,zero,800b70 <tick+0x7cc>
  800b68:	00800044 	movi	r2,1
  800b6c:	00000106 	br	800b74 <tick+0x7d0>
  800b70:	0005883a 	mov	r2,zero
  800b74:	1007883a 	mov	r3,r2
  800b78:	00802074 	movhi	r2,129
  800b7c:	10a6cf44 	addi	r2,r2,-25795
  800b80:	10c00005 	stb	r3,0(r2)
      _cg17 = AVIExpired;
  800b84:	00802074 	movhi	r2,129
  800b88:	10a6d904 	addi	r2,r2,-25756
  800b8c:	10c00003 	ldbu	r3,0(r2)
  800b90:	00802074 	movhi	r2,129
  800b94:	10a6e584 	addi	r2,r2,-25706
  800b98:	10c00005 	stb	r3,0(r2)
      g18 =(g17&&_cg17);
  800b9c:	00802074 	movhi	r2,129
  800ba0:	10a6cf44 	addi	r2,r2,-25795
  800ba4:	10800003 	ldbu	r2,0(r2)
  800ba8:	10803fcc 	andi	r2,r2,255
  800bac:	1080201c 	xori	r2,r2,128
  800bb0:	10bfe004 	addi	r2,r2,-128
  800bb4:	10000926 	beq	r2,zero,800bdc <tick+0x838>
  800bb8:	00802074 	movhi	r2,129
  800bbc:	10a6e584 	addi	r2,r2,-25706
  800bc0:	10800003 	ldbu	r2,0(r2)
  800bc4:	10803fcc 	andi	r2,r2,255
  800bc8:	1080201c 	xori	r2,r2,128
  800bcc:	10bfe004 	addi	r2,r2,-128
  800bd0:	10000226 	beq	r2,zero,800bdc <tick+0x838>
  800bd4:	00800044 	movi	r2,1
  800bd8:	00000106 	br	800be0 <tick+0x83c>
  800bdc:	0005883a 	mov	r2,zero
  800be0:	1007883a 	mov	r3,r2
  800be4:	00802074 	movhi	r2,129
  800be8:	10a6d1c4 	addi	r2,r2,-25785
  800bec:	10c00005 	stb	r3,0(r2)
      if(g18){
  800bf0:	00802074 	movhi	r2,129
  800bf4:	10a6d1c4 	addi	r2,r2,-25785
  800bf8:	10800003 	ldbu	r2,0(r2)
  800bfc:	10803fcc 	andi	r2,r2,255
  800c00:	1080201c 	xori	r2,r2,128
  800c04:	10bfe004 	addi	r2,r2,-128
  800c08:	10000426 	beq	r2,zero,800c1c <tick+0x878>
         VPace =(VPace||1);
  800c0c:	00802074 	movhi	r2,129
  800c10:	10a6ebc4 	addi	r2,r2,-25681
  800c14:	00c00044 	movi	r3,1
  800c18:	10c00005 	stb	r3,0(r2)
      }
      g14 =(PRE_g13);
  800c1c:	00802074 	movhi	r2,129
  800c20:	10a6cb84 	addi	r2,r2,-25810
  800c24:	10c00003 	ldbu	r3,0(r2)
  800c28:	00802074 	movhi	r2,129
  800c2c:	10a6d944 	addi	r2,r2,-25755
  800c30:	10c00005 	stb	r3,0(r2)
      g14b = g14;
  800c34:	00802074 	movhi	r2,129
  800c38:	10a6d944 	addi	r2,r2,-25755
  800c3c:	10c00003 	ldbu	r3,0(r2)
  800c40:	00802074 	movhi	r2,129
  800c44:	10a6d384 	addi	r2,r2,-25778
  800c48:	10c00005 	stb	r3,0(r2)
      _cg14 = AVIStart;
  800c4c:	00802074 	movhi	r2,129
  800c50:	10a6df44 	addi	r2,r2,-25731
  800c54:	10c00003 	ldbu	r3,0(r2)
  800c58:	00802074 	movhi	r2,129
  800c5c:	10a6d444 	addi	r2,r2,-25775
  800c60:	10c00005 	stb	r3,0(r2)
      g13 =(g12||g18||(g16b&&_cg16)||(g14b&&(!(_cg14))));
  800c64:	00802074 	movhi	r2,129
  800c68:	10a6ce04 	addi	r2,r2,-25800
  800c6c:	10800003 	ldbu	r2,0(r2)
  800c70:	10803fcc 	andi	r2,r2,255
  800c74:	1080201c 	xori	r2,r2,128
  800c78:	10bfe004 	addi	r2,r2,-128
  800c7c:	1000231e 	bne	r2,zero,800d0c <tick+0x968>
  800c80:	00802074 	movhi	r2,129
  800c84:	10a6d1c4 	addi	r2,r2,-25785
  800c88:	10800003 	ldbu	r2,0(r2)
  800c8c:	10803fcc 	andi	r2,r2,255
  800c90:	1080201c 	xori	r2,r2,128
  800c94:	10bfe004 	addi	r2,r2,-128
  800c98:	10001c1e 	bne	r2,zero,800d0c <tick+0x968>
  800c9c:	00802074 	movhi	r2,129
  800ca0:	10a6e9c4 	addi	r2,r2,-25689
  800ca4:	10800003 	ldbu	r2,0(r2)
  800ca8:	10803fcc 	andi	r2,r2,255
  800cac:	1080201c 	xori	r2,r2,128
  800cb0:	10bfe004 	addi	r2,r2,-128
  800cb4:	10000726 	beq	r2,zero,800cd4 <tick+0x930>
  800cb8:	00802074 	movhi	r2,129
  800cbc:	10a6d644 	addi	r2,r2,-25767
  800cc0:	10800003 	ldbu	r2,0(r2)
  800cc4:	10803fcc 	andi	r2,r2,255
  800cc8:	1080201c 	xori	r2,r2,128
  800ccc:	10bfe004 	addi	r2,r2,-128
  800cd0:	10000e1e 	bne	r2,zero,800d0c <tick+0x968>
  800cd4:	00802074 	movhi	r2,129
  800cd8:	10a6d384 	addi	r2,r2,-25778
  800cdc:	10800003 	ldbu	r2,0(r2)
  800ce0:	10803fcc 	andi	r2,r2,255
  800ce4:	1080201c 	xori	r2,r2,128
  800ce8:	10bfe004 	addi	r2,r2,-128
  800cec:	10000926 	beq	r2,zero,800d14 <tick+0x970>
  800cf0:	00802074 	movhi	r2,129
  800cf4:	10a6d444 	addi	r2,r2,-25775
  800cf8:	10800003 	ldbu	r2,0(r2)
  800cfc:	10803fcc 	andi	r2,r2,255
  800d00:	1080201c 	xori	r2,r2,128
  800d04:	10bfe004 	addi	r2,r2,-128
  800d08:	1000021e 	bne	r2,zero,800d14 <tick+0x970>
  800d0c:	00800044 	movi	r2,1
  800d10:	00000106 	br	800d18 <tick+0x974>
  800d14:	0005883a 	mov	r2,zero
  800d18:	1007883a 	mov	r3,r2
  800d1c:	00802074 	movhi	r2,129
  800d20:	10a6e244 	addi	r2,r2,-25719
  800d24:	10c00005 	stb	r3,0(r2)
      g15 =((g14b&&_cg14)||(g17&&(!(_cg17))));
  800d28:	00802074 	movhi	r2,129
  800d2c:	10a6d384 	addi	r2,r2,-25778
  800d30:	10800003 	ldbu	r2,0(r2)
  800d34:	10803fcc 	andi	r2,r2,255
  800d38:	1080201c 	xori	r2,r2,128
  800d3c:	10bfe004 	addi	r2,r2,-128
  800d40:	10000726 	beq	r2,zero,800d60 <tick+0x9bc>
  800d44:	00802074 	movhi	r2,129
  800d48:	10a6d444 	addi	r2,r2,-25775
  800d4c:	10800003 	ldbu	r2,0(r2)
  800d50:	10803fcc 	andi	r2,r2,255
  800d54:	1080201c 	xori	r2,r2,128
  800d58:	10bfe004 	addi	r2,r2,-128
  800d5c:	10000e1e 	bne	r2,zero,800d98 <tick+0x9f4>
  800d60:	00802074 	movhi	r2,129
  800d64:	10a6cf44 	addi	r2,r2,-25795
  800d68:	10800003 	ldbu	r2,0(r2)
  800d6c:	10803fcc 	andi	r2,r2,255
  800d70:	1080201c 	xori	r2,r2,128
  800d74:	10bfe004 	addi	r2,r2,-128
  800d78:	10000926 	beq	r2,zero,800da0 <tick+0x9fc>
  800d7c:	00802074 	movhi	r2,129
  800d80:	10a6e584 	addi	r2,r2,-25706
  800d84:	10800003 	ldbu	r2,0(r2)
  800d88:	10803fcc 	andi	r2,r2,255
  800d8c:	1080201c 	xori	r2,r2,128
  800d90:	10bfe004 	addi	r2,r2,-128
  800d94:	1000021e 	bne	r2,zero,800da0 <tick+0x9fc>
  800d98:	00800044 	movi	r2,1
  800d9c:	00000106 	br	800da4 <tick+0xa00>
  800da0:	0005883a 	mov	r2,zero
  800da4:	1007883a 	mov	r3,r2
  800da8:	00802074 	movhi	r2,129
  800dac:	10a6dd04 	addi	r2,r2,-25740
  800db0:	10c00005 	stb	r3,0(r2)
      g20 = g1;
  800db4:	00802074 	movhi	r2,129
  800db8:	10a6ccc4 	addi	r2,r2,-25805
  800dbc:	10c00003 	ldbu	r3,0(r2)
  800dc0:	00802074 	movhi	r2,129
  800dc4:	10a6de84 	addi	r2,r2,-25734
  800dc8:	10c00005 	stb	r3,0(r2)
      g26 =(PRE_g25);
  800dcc:	00802074 	movhi	r2,129
  800dd0:	10a6d744 	addi	r2,r2,-25763
  800dd4:	10c00003 	ldbu	r3,0(r2)
  800dd8:	00802074 	movhi	r2,129
  800ddc:	10a6eec4 	addi	r2,r2,-25669
  800de0:	10c00005 	stb	r3,0(r2)
      g26b = g26;
  800de4:	00802074 	movhi	r2,129
  800de8:	10a6eec4 	addi	r2,r2,-25669
  800dec:	10c00003 	ldbu	r3,0(r2)
  800df0:	00802074 	movhi	r2,129
  800df4:	10a6ee44 	addi	r2,r2,-25671
  800df8:	10c00005 	stb	r3,0(r2)
      _cg26 =(!(AR));
  800dfc:	00802074 	movhi	r2,129
  800e00:	10a6e384 	addi	r2,r2,-25714
  800e04:	10800003 	ldbu	r2,0(r2)
  800e08:	10803fcc 	andi	r2,r2,255
  800e0c:	1080201c 	xori	r2,r2,128
  800e10:	10bfe004 	addi	r2,r2,-128
  800e14:	1005003a 	cmpeq	r2,r2,zero
  800e18:	1007883a 	mov	r3,r2
  800e1c:	00802074 	movhi	r2,129
  800e20:	10a6d104 	addi	r2,r2,-25788
  800e24:	10c00005 	stb	r3,0(r2)
      g22 =(PRE_g21);
  800e28:	00802074 	movhi	r2,129
  800e2c:	10a6e684 	addi	r2,r2,-25702
  800e30:	10c00003 	ldbu	r3,0(r2)
  800e34:	00802074 	movhi	r2,129
  800e38:	10a6e904 	addi	r2,r2,-25692
  800e3c:	10c00005 	stb	r3,0(r2)
      _cg22 = ASense;
  800e40:	00802074 	movhi	r2,129
  800e44:	10a6d204 	addi	r2,r2,-25784
  800e48:	10c00003 	ldbu	r3,0(r2)
  800e4c:	00802074 	movhi	r2,129
  800e50:	10a6df84 	addi	r2,r2,-25730
  800e54:	10c00005 	stb	r3,0(r2)
      g29 =(g22&&(!(_cg22)));
  800e58:	00802074 	movhi	r2,129
  800e5c:	10a6e904 	addi	r2,r2,-25692
  800e60:	10800003 	ldbu	r2,0(r2)
  800e64:	10803fcc 	andi	r2,r2,255
  800e68:	1080201c 	xori	r2,r2,128
  800e6c:	10bfe004 	addi	r2,r2,-128
  800e70:	10000926 	beq	r2,zero,800e98 <tick+0xaf4>
  800e74:	00802074 	movhi	r2,129
  800e78:	10a6df84 	addi	r2,r2,-25730
  800e7c:	10800003 	ldbu	r2,0(r2)
  800e80:	10803fcc 	andi	r2,r2,255
  800e84:	1080201c 	xori	r2,r2,128
  800e88:	10bfe004 	addi	r2,r2,-128
  800e8c:	1000021e 	bne	r2,zero,800e98 <tick+0xaf4>
  800e90:	00800044 	movi	r2,1
  800e94:	00000106 	br	800e9c <tick+0xaf8>
  800e98:	0005883a 	mov	r2,zero
  800e9c:	1007883a 	mov	r3,r2
  800ea0:	00802074 	movhi	r2,129
  800ea4:	10a6ec84 	addi	r2,r2,-25678
  800ea8:	10c00005 	stb	r3,0(r2)
      _cg29 = APace;
  800eac:	00802074 	movhi	r2,129
  800eb0:	10a6c544 	addi	r2,r2,-25835
  800eb4:	10c00003 	ldbu	r3,0(r2)
  800eb8:	00802074 	movhi	r2,129
  800ebc:	10a6dc44 	addi	r2,r2,-25743
  800ec0:	10c00005 	stb	r3,0(r2)
      g21 =((g26b&&_cg26)||(g29&&(!(_cg29)))||g20);
  800ec4:	00802074 	movhi	r2,129
  800ec8:	10a6ee44 	addi	r2,r2,-25671
  800ecc:	10800003 	ldbu	r2,0(r2)
  800ed0:	10803fcc 	andi	r2,r2,255
  800ed4:	1080201c 	xori	r2,r2,128
  800ed8:	10bfe004 	addi	r2,r2,-128
  800edc:	10000726 	beq	r2,zero,800efc <tick+0xb58>
  800ee0:	00802074 	movhi	r2,129
  800ee4:	10a6d104 	addi	r2,r2,-25788
  800ee8:	10800003 	ldbu	r2,0(r2)
  800eec:	10803fcc 	andi	r2,r2,255
  800ef0:	1080201c 	xori	r2,r2,128
  800ef4:	10bfe004 	addi	r2,r2,-128
  800ef8:	1000151e 	bne	r2,zero,800f50 <tick+0xbac>
  800efc:	00802074 	movhi	r2,129
  800f00:	10a6ec84 	addi	r2,r2,-25678
  800f04:	10800003 	ldbu	r2,0(r2)
  800f08:	10803fcc 	andi	r2,r2,255
  800f0c:	1080201c 	xori	r2,r2,128
  800f10:	10bfe004 	addi	r2,r2,-128
  800f14:	10000726 	beq	r2,zero,800f34 <tick+0xb90>
  800f18:	00802074 	movhi	r2,129
  800f1c:	10a6dc44 	addi	r2,r2,-25743
  800f20:	10800003 	ldbu	r2,0(r2)
  800f24:	10803fcc 	andi	r2,r2,255
  800f28:	1080201c 	xori	r2,r2,128
  800f2c:	10bfe004 	addi	r2,r2,-128
  800f30:	10000726 	beq	r2,zero,800f50 <tick+0xbac>
  800f34:	00802074 	movhi	r2,129
  800f38:	10a6de84 	addi	r2,r2,-25734
  800f3c:	10800003 	ldbu	r2,0(r2)
  800f40:	10803fcc 	andi	r2,r2,255
  800f44:	1080201c 	xori	r2,r2,128
  800f48:	10bfe004 	addi	r2,r2,-128
  800f4c:	10000226 	beq	r2,zero,800f58 <tick+0xbb4>
  800f50:	00800044 	movi	r2,1
  800f54:	00000106 	br	800f5c <tick+0xbb8>
  800f58:	0005883a 	mov	r2,zero
  800f5c:	1007883a 	mov	r3,r2
  800f60:	00802074 	movhi	r2,129
  800f64:	10a6d404 	addi	r2,r2,-25776
  800f68:	10c00005 	stb	r3,0(r2)
      g23 =(g22&&_cg22);
  800f6c:	00802074 	movhi	r2,129
  800f70:	10a6e904 	addi	r2,r2,-25692
  800f74:	10800003 	ldbu	r2,0(r2)
  800f78:	10803fcc 	andi	r2,r2,255
  800f7c:	1080201c 	xori	r2,r2,128
  800f80:	10bfe004 	addi	r2,r2,-128
  800f84:	10000926 	beq	r2,zero,800fac <tick+0xc08>
  800f88:	00802074 	movhi	r2,129
  800f8c:	10a6df84 	addi	r2,r2,-25730
  800f90:	10800003 	ldbu	r2,0(r2)
  800f94:	10803fcc 	andi	r2,r2,255
  800f98:	1080201c 	xori	r2,r2,128
  800f9c:	10bfe004 	addi	r2,r2,-128
  800fa0:	10000226 	beq	r2,zero,800fac <tick+0xc08>
  800fa4:	00800044 	movi	r2,1
  800fa8:	00000106 	br	800fb0 <tick+0xc0c>
  800fac:	0005883a 	mov	r2,zero
  800fb0:	1007883a 	mov	r3,r2
  800fb4:	00802074 	movhi	r2,129
  800fb8:	10a6d884 	addi	r2,r2,-25758
  800fbc:	10c00005 	stb	r3,0(r2)
      if(g23){
  800fc0:	00802074 	movhi	r2,129
  800fc4:	10a6d884 	addi	r2,r2,-25758
  800fc8:	10800003 	ldbu	r2,0(r2)
  800fcc:	10803fcc 	andi	r2,r2,255
  800fd0:	1080201c 	xori	r2,r2,128
  800fd4:	10bfe004 	addi	r2,r2,-128
  800fd8:	10000426 	beq	r2,zero,800fec <tick+0xc48>
         PVARPStart =(PVARPStart||1);
  800fdc:	00802074 	movhi	r2,129
  800fe0:	10a6d6c4 	addi	r2,r2,-25765
  800fe4:	00c00044 	movi	r3,1
  800fe8:	10c00005 	stb	r3,0(r2)
      }
      g30 =(g29&&_cg29);
  800fec:	00802074 	movhi	r2,129
  800ff0:	10a6ec84 	addi	r2,r2,-25678
  800ff4:	10800003 	ldbu	r2,0(r2)
  800ff8:	10803fcc 	andi	r2,r2,255
  800ffc:	1080201c 	xori	r2,r2,128
  801000:	10bfe004 	addi	r2,r2,-128
  801004:	10000926 	beq	r2,zero,80102c <tick+0xc88>
  801008:	00802074 	movhi	r2,129
  80100c:	10a6dc44 	addi	r2,r2,-25743
  801010:	10800003 	ldbu	r2,0(r2)
  801014:	10803fcc 	andi	r2,r2,255
  801018:	1080201c 	xori	r2,r2,128
  80101c:	10bfe004 	addi	r2,r2,-128
  801020:	10000226 	beq	r2,zero,80102c <tick+0xc88>
  801024:	00800044 	movi	r2,1
  801028:	00000106 	br	801030 <tick+0xc8c>
  80102c:	0005883a 	mov	r2,zero
  801030:	1007883a 	mov	r3,r2
  801034:	00802074 	movhi	r2,129
  801038:	10a6e604 	addi	r2,r2,-25704
  80103c:	10c00005 	stb	r3,0(r2)
      if(g30){
  801040:	00802074 	movhi	r2,129
  801044:	10a6e604 	addi	r2,r2,-25704
  801048:	10800003 	ldbu	r2,0(r2)
  80104c:	10803fcc 	andi	r2,r2,255
  801050:	1080201c 	xori	r2,r2,128
  801054:	10bfe004 	addi	r2,r2,-128
  801058:	10000426 	beq	r2,zero,80106c <tick+0xcc8>
         PVARPStart =(PVARPStart||1);
  80105c:	00802074 	movhi	r2,129
  801060:	10a6d6c4 	addi	r2,r2,-25765
  801064:	00c00044 	movi	r3,1
  801068:	10c00005 	stb	r3,0(r2)
      }
      g28 =(PRE_g27);
  80106c:	00802074 	movhi	r2,129
  801070:	10a6c7c4 	addi	r2,r2,-25825
  801074:	10c00003 	ldbu	r3,0(r2)
  801078:	00802074 	movhi	r2,129
  80107c:	10a6e944 	addi	r2,r2,-25691
  801080:	10c00005 	stb	r3,0(r2)
      g24 =(g30||g23||g28);
  801084:	00802074 	movhi	r2,129
  801088:	10a6e604 	addi	r2,r2,-25704
  80108c:	10800003 	ldbu	r2,0(r2)
  801090:	10803fcc 	andi	r2,r2,255
  801094:	1080201c 	xori	r2,r2,128
  801098:	10bfe004 	addi	r2,r2,-128
  80109c:	10000e1e 	bne	r2,zero,8010d8 <tick+0xd34>
  8010a0:	00802074 	movhi	r2,129
  8010a4:	10a6d884 	addi	r2,r2,-25758
  8010a8:	10800003 	ldbu	r2,0(r2)
  8010ac:	10803fcc 	andi	r2,r2,255
  8010b0:	1080201c 	xori	r2,r2,128
  8010b4:	10bfe004 	addi	r2,r2,-128
  8010b8:	1000071e 	bne	r2,zero,8010d8 <tick+0xd34>
  8010bc:	00802074 	movhi	r2,129
  8010c0:	10a6e944 	addi	r2,r2,-25691
  8010c4:	10800003 	ldbu	r2,0(r2)
  8010c8:	10803fcc 	andi	r2,r2,255
  8010cc:	1080201c 	xori	r2,r2,128
  8010d0:	10bfe004 	addi	r2,r2,-128
  8010d4:	10000226 	beq	r2,zero,8010e0 <tick+0xd3c>
  8010d8:	00800044 	movi	r2,1
  8010dc:	00000106 	br	8010e4 <tick+0xd40>
  8010e0:	0005883a 	mov	r2,zero
  8010e4:	1007883a 	mov	r3,r2
  8010e8:	00802074 	movhi	r2,129
  8010ec:	10a6ed44 	addi	r2,r2,-25675
  8010f0:	10c00005 	stb	r3,0(r2)
      _cg24 = AR;
  8010f4:	00802074 	movhi	r2,129
  8010f8:	10a6e384 	addi	r2,r2,-25714
  8010fc:	10c00003 	ldbu	r3,0(r2)
  801100:	00802074 	movhi	r2,129
  801104:	10a6e704 	addi	r2,r2,-25700
  801108:	10c00005 	stb	r3,0(r2)
      g25 =((g26b&&(!(_cg26)))||(g24&&_cg24));
  80110c:	00802074 	movhi	r2,129
  801110:	10a6ee44 	addi	r2,r2,-25671
  801114:	10800003 	ldbu	r2,0(r2)
  801118:	10803fcc 	andi	r2,r2,255
  80111c:	1080201c 	xori	r2,r2,128
  801120:	10bfe004 	addi	r2,r2,-128
  801124:	10000726 	beq	r2,zero,801144 <tick+0xda0>
  801128:	00802074 	movhi	r2,129
  80112c:	10a6d104 	addi	r2,r2,-25788
  801130:	10800003 	ldbu	r2,0(r2)
  801134:	10803fcc 	andi	r2,r2,255
  801138:	1080201c 	xori	r2,r2,128
  80113c:	10bfe004 	addi	r2,r2,-128
  801140:	10000e26 	beq	r2,zero,80117c <tick+0xdd8>
  801144:	00802074 	movhi	r2,129
  801148:	10a6ed44 	addi	r2,r2,-25675
  80114c:	10800003 	ldbu	r2,0(r2)
  801150:	10803fcc 	andi	r2,r2,255
  801154:	1080201c 	xori	r2,r2,128
  801158:	10bfe004 	addi	r2,r2,-128
  80115c:	10000926 	beq	r2,zero,801184 <tick+0xde0>
  801160:	00802074 	movhi	r2,129
  801164:	10a6e704 	addi	r2,r2,-25700
  801168:	10800003 	ldbu	r2,0(r2)
  80116c:	10803fcc 	andi	r2,r2,255
  801170:	1080201c 	xori	r2,r2,128
  801174:	10bfe004 	addi	r2,r2,-128
  801178:	10000226 	beq	r2,zero,801184 <tick+0xde0>
  80117c:	00800044 	movi	r2,1
  801180:	00000106 	br	801188 <tick+0xde4>
  801184:	0005883a 	mov	r2,zero
  801188:	1007883a 	mov	r3,r2
  80118c:	00802074 	movhi	r2,129
  801190:	10a6e7c4 	addi	r2,r2,-25697
  801194:	10c00005 	stb	r3,0(r2)
      g27 =(g24&&(!(_cg24)));
  801198:	00802074 	movhi	r2,129
  80119c:	10a6ed44 	addi	r2,r2,-25675
  8011a0:	10800003 	ldbu	r2,0(r2)
  8011a4:	10803fcc 	andi	r2,r2,255
  8011a8:	1080201c 	xori	r2,r2,128
  8011ac:	10bfe004 	addi	r2,r2,-128
  8011b0:	10000926 	beq	r2,zero,8011d8 <tick+0xe34>
  8011b4:	00802074 	movhi	r2,129
  8011b8:	10a6e704 	addi	r2,r2,-25700
  8011bc:	10800003 	ldbu	r2,0(r2)
  8011c0:	10803fcc 	andi	r2,r2,255
  8011c4:	1080201c 	xori	r2,r2,128
  8011c8:	10bfe004 	addi	r2,r2,-128
  8011cc:	1000021e 	bne	r2,zero,8011d8 <tick+0xe34>
  8011d0:	00800044 	movi	r2,1
  8011d4:	00000106 	br	8011dc <tick+0xe38>
  8011d8:	0005883a 	mov	r2,zero
  8011dc:	1007883a 	mov	r3,r2
  8011e0:	00802074 	movhi	r2,129
  8011e4:	10a6c704 	addi	r2,r2,-25828
  8011e8:	10c00005 	stb	r3,0(r2)
      g32 = g1;
  8011ec:	00802074 	movhi	r2,129
  8011f0:	10a6ccc4 	addi	r2,r2,-25805
  8011f4:	10c00003 	ldbu	r3,0(r2)
  8011f8:	00802074 	movhi	r2,129
  8011fc:	10a6ea84 	addi	r2,r2,-25686
  801200:	10c00005 	stb	r3,0(r2)
      g34 =(PRE_g33);
  801204:	00802074 	movhi	r2,129
  801208:	10a6e4c4 	addi	r2,r2,-25709
  80120c:	10c00003 	ldbu	r3,0(r2)
  801210:	00802074 	movhi	r2,129
  801214:	10a6d4c4 	addi	r2,r2,-25773
  801218:	10c00005 	stb	r3,0(r2)
      _cg34 = ASense;
  80121c:	00802074 	movhi	r2,129
  801220:	10a6d204 	addi	r2,r2,-25784
  801224:	10c00003 	ldbu	r3,0(r2)
  801228:	00802074 	movhi	r2,129
  80122c:	10a6d184 	addi	r2,r2,-25786
  801230:	10c00005 	stb	r3,0(r2)
      g38 =(g34&&(!(_cg34)));
  801234:	00802074 	movhi	r2,129
  801238:	10a6d4c4 	addi	r2,r2,-25773
  80123c:	10800003 	ldbu	r2,0(r2)
  801240:	10803fcc 	andi	r2,r2,255
  801244:	1080201c 	xori	r2,r2,128
  801248:	10bfe004 	addi	r2,r2,-128
  80124c:	10000926 	beq	r2,zero,801274 <tick+0xed0>
  801250:	00802074 	movhi	r2,129
  801254:	10a6d184 	addi	r2,r2,-25786
  801258:	10800003 	ldbu	r2,0(r2)
  80125c:	10803fcc 	andi	r2,r2,255
  801260:	1080201c 	xori	r2,r2,128
  801264:	10bfe004 	addi	r2,r2,-128
  801268:	1000021e 	bne	r2,zero,801274 <tick+0xed0>
  80126c:	00800044 	movi	r2,1
  801270:	00000106 	br	801278 <tick+0xed4>
  801274:	0005883a 	mov	r2,zero
  801278:	1007883a 	mov	r3,r2
  80127c:	00802074 	movhi	r2,129
  801280:	10a6d2c4 	addi	r2,r2,-25781
  801284:	10c00005 	stb	r3,0(r2)
      _cg38 = APace;
  801288:	00802074 	movhi	r2,129
  80128c:	10a6c544 	addi	r2,r2,-25835
  801290:	10c00003 	ldbu	r3,0(r2)
  801294:	00802074 	movhi	r2,129
  801298:	10a6dcc4 	addi	r2,r2,-25741
  80129c:	10c00005 	stb	r3,0(r2)
      g33 =((g38&&(!(_cg38)))||g32);
  8012a0:	00802074 	movhi	r2,129
  8012a4:	10a6d2c4 	addi	r2,r2,-25781
  8012a8:	10800003 	ldbu	r2,0(r2)
  8012ac:	10803fcc 	andi	r2,r2,255
  8012b0:	1080201c 	xori	r2,r2,128
  8012b4:	10bfe004 	addi	r2,r2,-128
  8012b8:	10000726 	beq	r2,zero,8012d8 <tick+0xf34>
  8012bc:	00802074 	movhi	r2,129
  8012c0:	10a6dcc4 	addi	r2,r2,-25741
  8012c4:	10800003 	ldbu	r2,0(r2)
  8012c8:	10803fcc 	andi	r2,r2,255
  8012cc:	1080201c 	xori	r2,r2,128
  8012d0:	10bfe004 	addi	r2,r2,-128
  8012d4:	10000726 	beq	r2,zero,8012f4 <tick+0xf50>
  8012d8:	00802074 	movhi	r2,129
  8012dc:	10a6ea84 	addi	r2,r2,-25686
  8012e0:	10800003 	ldbu	r2,0(r2)
  8012e4:	10803fcc 	andi	r2,r2,255
  8012e8:	1080201c 	xori	r2,r2,128
  8012ec:	10bfe004 	addi	r2,r2,-128
  8012f0:	10000226 	beq	r2,zero,8012fc <tick+0xf58>
  8012f4:	00800044 	movi	r2,1
  8012f8:	00000106 	br	801300 <tick+0xf5c>
  8012fc:	0005883a 	mov	r2,zero
  801300:	1007883a 	mov	r3,r2
  801304:	00802074 	movhi	r2,129
  801308:	10a6db84 	addi	r2,r2,-25746
  80130c:	10c00005 	stb	r3,0(r2)
      g35 =(g34&&_cg34);
  801310:	00802074 	movhi	r2,129
  801314:	10a6d4c4 	addi	r2,r2,-25773
  801318:	10800003 	ldbu	r2,0(r2)
  80131c:	10803fcc 	andi	r2,r2,255
  801320:	1080201c 	xori	r2,r2,128
  801324:	10bfe004 	addi	r2,r2,-128
  801328:	10000926 	beq	r2,zero,801350 <tick+0xfac>
  80132c:	00802074 	movhi	r2,129
  801330:	10a6d184 	addi	r2,r2,-25786
  801334:	10800003 	ldbu	r2,0(r2)
  801338:	10803fcc 	andi	r2,r2,255
  80133c:	1080201c 	xori	r2,r2,128
  801340:	10bfe004 	addi	r2,r2,-128
  801344:	10000226 	beq	r2,zero,801350 <tick+0xfac>
  801348:	00800044 	movi	r2,1
  80134c:	00000106 	br	801354 <tick+0xfb0>
  801350:	0005883a 	mov	r2,zero
  801354:	1007883a 	mov	r3,r2
  801358:	00802074 	movhi	r2,129
  80135c:	10a6dc84 	addi	r2,r2,-25742
  801360:	10c00005 	stb	r3,0(r2)
      if(g35){
  801364:	00802074 	movhi	r2,129
  801368:	10a6dc84 	addi	r2,r2,-25742
  80136c:	10800003 	ldbu	r2,0(r2)
  801370:	10803fcc 	andi	r2,r2,255
  801374:	1080201c 	xori	r2,r2,128
  801378:	10bfe004 	addi	r2,r2,-128
  80137c:	10000426 	beq	r2,zero,801390 <tick+0xfec>
         VRPStart =(VRPStart||1);
  801380:	00802074 	movhi	r2,129
  801384:	10a6da04 	addi	r2,r2,-25752
  801388:	00c00044 	movi	r3,1
  80138c:	10c00005 	stb	r3,0(r2)
      }
      g37 =(PRE_g36);
  801390:	00802074 	movhi	r2,129
  801394:	10a6d9c4 	addi	r2,r2,-25753
  801398:	10c00003 	ldbu	r3,0(r2)
  80139c:	00802074 	movhi	r2,129
  8013a0:	10a6d004 	addi	r2,r2,-25792
  8013a4:	10c00005 	stb	r3,0(r2)
      g39 =(g38&&_cg38);
  8013a8:	00802074 	movhi	r2,129
  8013ac:	10a6d2c4 	addi	r2,r2,-25781
  8013b0:	10800003 	ldbu	r2,0(r2)
  8013b4:	10803fcc 	andi	r2,r2,255
  8013b8:	1080201c 	xori	r2,r2,128
  8013bc:	10bfe004 	addi	r2,r2,-128
  8013c0:	10000926 	beq	r2,zero,8013e8 <tick+0x1044>
  8013c4:	00802074 	movhi	r2,129
  8013c8:	10a6dcc4 	addi	r2,r2,-25741
  8013cc:	10800003 	ldbu	r2,0(r2)
  8013d0:	10803fcc 	andi	r2,r2,255
  8013d4:	1080201c 	xori	r2,r2,128
  8013d8:	10bfe004 	addi	r2,r2,-128
  8013dc:	10000226 	beq	r2,zero,8013e8 <tick+0x1044>
  8013e0:	00800044 	movi	r2,1
  8013e4:	00000106 	br	8013ec <tick+0x1048>
  8013e8:	0005883a 	mov	r2,zero
  8013ec:	1007883a 	mov	r3,r2
  8013f0:	00802074 	movhi	r2,129
  8013f4:	10a6ec04 	addi	r2,r2,-25680
  8013f8:	10c00005 	stb	r3,0(r2)
      if(g39){
  8013fc:	00802074 	movhi	r2,129
  801400:	10a6ec04 	addi	r2,r2,-25680
  801404:	10800003 	ldbu	r2,0(r2)
  801408:	10803fcc 	andi	r2,r2,255
  80140c:	1080201c 	xori	r2,r2,128
  801410:	10bfe004 	addi	r2,r2,-128
  801414:	10000426 	beq	r2,zero,801428 <tick+0x1084>
         VRPStart =(VRPStart||1);
  801418:	00802074 	movhi	r2,129
  80141c:	10a6da04 	addi	r2,r2,-25752
  801420:	00c00044 	movi	r3,1
  801424:	10c00005 	stb	r3,0(r2)
      }
      g36 =(g35||g37||g39);
  801428:	00802074 	movhi	r2,129
  80142c:	10a6dc84 	addi	r2,r2,-25742
  801430:	10800003 	ldbu	r2,0(r2)
  801434:	10803fcc 	andi	r2,r2,255
  801438:	1080201c 	xori	r2,r2,128
  80143c:	10bfe004 	addi	r2,r2,-128
  801440:	10000e1e 	bne	r2,zero,80147c <tick+0x10d8>
  801444:	00802074 	movhi	r2,129
  801448:	10a6d004 	addi	r2,r2,-25792
  80144c:	10800003 	ldbu	r2,0(r2)
  801450:	10803fcc 	andi	r2,r2,255
  801454:	1080201c 	xori	r2,r2,128
  801458:	10bfe004 	addi	r2,r2,-128
  80145c:	1000071e 	bne	r2,zero,80147c <tick+0x10d8>
  801460:	00802074 	movhi	r2,129
  801464:	10a6ec04 	addi	r2,r2,-25680
  801468:	10800003 	ldbu	r2,0(r2)
  80146c:	10803fcc 	andi	r2,r2,255
  801470:	1080201c 	xori	r2,r2,128
  801474:	10bfe004 	addi	r2,r2,-128
  801478:	10000226 	beq	r2,zero,801484 <tick+0x10e0>
  80147c:	00800044 	movi	r2,1
  801480:	00000106 	br	801488 <tick+0x10e4>
  801484:	0005883a 	mov	r2,zero
  801488:	1007883a 	mov	r3,r2
  80148c:	00802074 	movhi	r2,129
  801490:	10a6e084 	addi	r2,r2,-25726
  801494:	10c00005 	stb	r3,0(r2)
      g41 = g1;
  801498:	00802074 	movhi	r2,129
  80149c:	10a6ccc4 	addi	r2,r2,-25805
  8014a0:	10c00003 	ldbu	r3,0(r2)
  8014a4:	00802074 	movhi	r2,129
  8014a8:	10a6d084 	addi	r2,r2,-25790
  8014ac:	10c00005 	stb	r3,0(r2)
      g43 =(PRE_g42);
  8014b0:	00802074 	movhi	r2,129
  8014b4:	10a6d304 	addi	r2,r2,-25780
  8014b8:	10c00003 	ldbu	r3,0(r2)
  8014bc:	00802074 	movhi	r2,129
  8014c0:	10a6dfc4 	addi	r2,r2,-25729
  8014c4:	10c00005 	stb	r3,0(r2)
      _cg43 = VSense;
  8014c8:	00802074 	movhi	r2,129
  8014cc:	10a6dac4 	addi	r2,r2,-25749
  8014d0:	10c00003 	ldbu	r3,0(r2)
  8014d4:	00802074 	movhi	r2,129
  8014d8:	10a6d344 	addi	r2,r2,-25779
  8014dc:	10c00005 	stb	r3,0(r2)
      g49 =(g43&&(!(_cg43)));
  8014e0:	00802074 	movhi	r2,129
  8014e4:	10a6dfc4 	addi	r2,r2,-25729
  8014e8:	10800003 	ldbu	r2,0(r2)
  8014ec:	10803fcc 	andi	r2,r2,255
  8014f0:	1080201c 	xori	r2,r2,128
  8014f4:	10bfe004 	addi	r2,r2,-128
  8014f8:	10000926 	beq	r2,zero,801520 <tick+0x117c>
  8014fc:	00802074 	movhi	r2,129
  801500:	10a6d344 	addi	r2,r2,-25779
  801504:	10800003 	ldbu	r2,0(r2)
  801508:	10803fcc 	andi	r2,r2,255
  80150c:	1080201c 	xori	r2,r2,128
  801510:	10bfe004 	addi	r2,r2,-128
  801514:	1000021e 	bne	r2,zero,801520 <tick+0x117c>
  801518:	00800044 	movi	r2,1
  80151c:	00000106 	br	801524 <tick+0x1180>
  801520:	0005883a 	mov	r2,zero
  801524:	1007883a 	mov	r3,r2
  801528:	00802074 	movhi	r2,129
  80152c:	10a6d544 	addi	r2,r2,-25771
  801530:	10c00005 	stb	r3,0(r2)
      _cg49 = VPace;
  801534:	00802074 	movhi	r2,129
  801538:	10a6ebc4 	addi	r2,r2,-25681
  80153c:	10c00003 	ldbu	r3,0(r2)
  801540:	00802074 	movhi	r2,129
  801544:	10a6ec44 	addi	r2,r2,-25679
  801548:	10c00005 	stb	r3,0(r2)
      g48 =(g46&&(!(_cg46)));
  80154c:	00802074 	movhi	r2,129
  801550:	10a6e104 	addi	r2,r2,-25724
  801554:	10800003 	ldbu	r2,0(r2)
  801558:	10803fcc 	andi	r2,r2,255
  80155c:	1080201c 	xori	r2,r2,128
  801560:	10bfe004 	addi	r2,r2,-128
  801564:	10000926 	beq	r2,zero,80158c <tick+0x11e8>
  801568:	00802074 	movhi	r2,129
  80156c:	10a6cec4 	addi	r2,r2,-25797
  801570:	10800003 	ldbu	r2,0(r2)
  801574:	10803fcc 	andi	r2,r2,255
  801578:	1080201c 	xori	r2,r2,128
  80157c:	10bfe004 	addi	r2,r2,-128
  801580:	1000021e 	bne	r2,zero,80158c <tick+0x11e8>
  801584:	00800044 	movi	r2,1
  801588:	00000106 	br	801590 <tick+0x11ec>
  80158c:	0005883a 	mov	r2,zero
  801590:	1007883a 	mov	r3,r2
  801594:	00802074 	movhi	r2,129
  801598:	10a6d244 	addi	r2,r2,-25783
  80159c:	10c00005 	stb	r3,0(r2)
      _cg48 = AEIExpired;
  8015a0:	00802074 	movhi	r2,129
  8015a4:	10a6e844 	addi	r2,r2,-25695
  8015a8:	10c00003 	ldbu	r3,0(r2)
  8015ac:	00802074 	movhi	r2,129
  8015b0:	10a6d8c4 	addi	r2,r2,-25757
  8015b4:	10c00005 	stb	r3,0(r2)
      g42 =((g49&&(!(_cg49)))||(g48&&_cg48)||g41||g47);
  8015b8:	00802074 	movhi	r2,129
  8015bc:	10a6d544 	addi	r2,r2,-25771
  8015c0:	10800003 	ldbu	r2,0(r2)
  8015c4:	10803fcc 	andi	r2,r2,255
  8015c8:	1080201c 	xori	r2,r2,128
  8015cc:	10bfe004 	addi	r2,r2,-128
  8015d0:	10000726 	beq	r2,zero,8015f0 <tick+0x124c>
  8015d4:	00802074 	movhi	r2,129
  8015d8:	10a6ec44 	addi	r2,r2,-25679
  8015dc:	10800003 	ldbu	r2,0(r2)
  8015e0:	10803fcc 	andi	r2,r2,255
  8015e4:	1080201c 	xori	r2,r2,128
  8015e8:	10bfe004 	addi	r2,r2,-128
  8015ec:	10001c26 	beq	r2,zero,801660 <tick+0x12bc>
  8015f0:	00802074 	movhi	r2,129
  8015f4:	10a6d244 	addi	r2,r2,-25783
  8015f8:	10800003 	ldbu	r2,0(r2)
  8015fc:	10803fcc 	andi	r2,r2,255
  801600:	1080201c 	xori	r2,r2,128
  801604:	10bfe004 	addi	r2,r2,-128
  801608:	10000726 	beq	r2,zero,801628 <tick+0x1284>
  80160c:	00802074 	movhi	r2,129
  801610:	10a6d8c4 	addi	r2,r2,-25757
  801614:	10800003 	ldbu	r2,0(r2)
  801618:	10803fcc 	andi	r2,r2,255
  80161c:	1080201c 	xori	r2,r2,128
  801620:	10bfe004 	addi	r2,r2,-128
  801624:	10000e1e 	bne	r2,zero,801660 <tick+0x12bc>
  801628:	00802074 	movhi	r2,129
  80162c:	10a6d084 	addi	r2,r2,-25790
  801630:	10800003 	ldbu	r2,0(r2)
  801634:	10803fcc 	andi	r2,r2,255
  801638:	1080201c 	xori	r2,r2,128
  80163c:	10bfe004 	addi	r2,r2,-128
  801640:	1000071e 	bne	r2,zero,801660 <tick+0x12bc>
  801644:	00802074 	movhi	r2,129
  801648:	10a6c844 	addi	r2,r2,-25823
  80164c:	10800003 	ldbu	r2,0(r2)
  801650:	10803fcc 	andi	r2,r2,255
  801654:	1080201c 	xori	r2,r2,128
  801658:	10bfe004 	addi	r2,r2,-128
  80165c:	10000226 	beq	r2,zero,801668 <tick+0x12c4>
  801660:	00800044 	movi	r2,1
  801664:	00000106 	br	80166c <tick+0x12c8>
  801668:	0005883a 	mov	r2,zero
  80166c:	1007883a 	mov	r3,r2
  801670:	00802074 	movhi	r2,129
  801674:	10a6c884 	addi	r2,r2,-25822
  801678:	10c00005 	stb	r3,0(r2)
      g44 =((g43&&_cg43)||(g49&&_cg49));
  80167c:	00802074 	movhi	r2,129
  801680:	10a6dfc4 	addi	r2,r2,-25729
  801684:	10800003 	ldbu	r2,0(r2)
  801688:	10803fcc 	andi	r2,r2,255
  80168c:	1080201c 	xori	r2,r2,128
  801690:	10bfe004 	addi	r2,r2,-128
  801694:	10000726 	beq	r2,zero,8016b4 <tick+0x1310>
  801698:	00802074 	movhi	r2,129
  80169c:	10a6d344 	addi	r2,r2,-25779
  8016a0:	10800003 	ldbu	r2,0(r2)
  8016a4:	10803fcc 	andi	r2,r2,255
  8016a8:	1080201c 	xori	r2,r2,128
  8016ac:	10bfe004 	addi	r2,r2,-128
  8016b0:	10000e1e 	bne	r2,zero,8016ec <tick+0x1348>
  8016b4:	00802074 	movhi	r2,129
  8016b8:	10a6d544 	addi	r2,r2,-25771
  8016bc:	10800003 	ldbu	r2,0(r2)
  8016c0:	10803fcc 	andi	r2,r2,255
  8016c4:	1080201c 	xori	r2,r2,128
  8016c8:	10bfe004 	addi	r2,r2,-128
  8016cc:	10000926 	beq	r2,zero,8016f4 <tick+0x1350>
  8016d0:	00802074 	movhi	r2,129
  8016d4:	10a6ec44 	addi	r2,r2,-25679
  8016d8:	10800003 	ldbu	r2,0(r2)
  8016dc:	10803fcc 	andi	r2,r2,255
  8016e0:	1080201c 	xori	r2,r2,128
  8016e4:	10bfe004 	addi	r2,r2,-128
  8016e8:	10000226 	beq	r2,zero,8016f4 <tick+0x1350>
  8016ec:	00800044 	movi	r2,1
  8016f0:	00000106 	br	8016f8 <tick+0x1354>
  8016f4:	0005883a 	mov	r2,zero
  8016f8:	1007883a 	mov	r3,r2
  8016fc:	00802074 	movhi	r2,129
  801700:	10a6cc04 	addi	r2,r2,-25808
  801704:	10c00005 	stb	r3,0(r2)
      if(g44){
  801708:	00802074 	movhi	r2,129
  80170c:	10a6cc04 	addi	r2,r2,-25808
  801710:	10800003 	ldbu	r2,0(r2)
  801714:	10803fcc 	andi	r2,r2,255
  801718:	1080201c 	xori	r2,r2,128
  80171c:	10bfe004 	addi	r2,r2,-128
  801720:	10000426 	beq	r2,zero,801734 <tick+0x1390>
         AEIStart =(AEIStart||1);
  801724:	00802074 	movhi	r2,129
  801728:	10a6eac4 	addi	r2,r2,-25685
  80172c:	00c00044 	movi	r3,1
  801730:	10c00005 	stb	r3,0(r2)
      }
      g45 =((g48&&(!(_cg48)))||g44);
  801734:	00802074 	movhi	r2,129
  801738:	10a6d244 	addi	r2,r2,-25783
  80173c:	10800003 	ldbu	r2,0(r2)
  801740:	10803fcc 	andi	r2,r2,255
  801744:	1080201c 	xori	r2,r2,128
  801748:	10bfe004 	addi	r2,r2,-128
  80174c:	10000726 	beq	r2,zero,80176c <tick+0x13c8>
  801750:	00802074 	movhi	r2,129
  801754:	10a6d8c4 	addi	r2,r2,-25757
  801758:	10800003 	ldbu	r2,0(r2)
  80175c:	10803fcc 	andi	r2,r2,255
  801760:	1080201c 	xori	r2,r2,128
  801764:	10bfe004 	addi	r2,r2,-128
  801768:	10000726 	beq	r2,zero,801788 <tick+0x13e4>
  80176c:	00802074 	movhi	r2,129
  801770:	10a6cc04 	addi	r2,r2,-25808
  801774:	10800003 	ldbu	r2,0(r2)
  801778:	10803fcc 	andi	r2,r2,255
  80177c:	1080201c 	xori	r2,r2,128
  801780:	10bfe004 	addi	r2,r2,-128
  801784:	10000226 	beq	r2,zero,801790 <tick+0x13ec>
  801788:	00800044 	movi	r2,1
  80178c:	00000106 	br	801794 <tick+0x13f0>
  801790:	0005883a 	mov	r2,zero
  801794:	1007883a 	mov	r3,r2
  801798:	00802074 	movhi	r2,129
  80179c:	10a6eb04 	addi	r2,r2,-25684
  8017a0:	10c00005 	stb	r3,0(r2)
      g51 = g1;
  8017a4:	00802074 	movhi	r2,129
  8017a8:	10a6ccc4 	addi	r2,r2,-25805
  8017ac:	10c00003 	ldbu	r3,0(r2)
  8017b0:	00802074 	movhi	r2,129
  8017b4:	10a6e184 	addi	r2,r2,-25722
  8017b8:	10c00005 	stb	r3,0(r2)
      g61 =(PRE_g60);
  8017bc:	00802074 	movhi	r2,129
  8017c0:	10a6e1c4 	addi	r2,r2,-25721
  8017c4:	10c00003 	ldbu	r3,0(r2)
  8017c8:	00802074 	movhi	r2,129
  8017cc:	10a6cd04 	addi	r2,r2,-25804
  8017d0:	10c00005 	stb	r3,0(r2)
      _cg61 = VSense;
  8017d4:	00802074 	movhi	r2,129
  8017d8:	10a6dac4 	addi	r2,r2,-25749
  8017dc:	10c00003 	ldbu	r3,0(r2)
  8017e0:	00802074 	movhi	r2,129
  8017e4:	10a6d0c4 	addi	r2,r2,-25789
  8017e8:	10c00005 	stb	r3,0(r2)
      g62 =(g61&&_cg61);
  8017ec:	00802074 	movhi	r2,129
  8017f0:	10a6cd04 	addi	r2,r2,-25804
  8017f4:	10800003 	ldbu	r2,0(r2)
  8017f8:	10803fcc 	andi	r2,r2,255
  8017fc:	1080201c 	xori	r2,r2,128
  801800:	10bfe004 	addi	r2,r2,-128
  801804:	10000926 	beq	r2,zero,80182c <tick+0x1488>
  801808:	00802074 	movhi	r2,129
  80180c:	10a6d0c4 	addi	r2,r2,-25789
  801810:	10800003 	ldbu	r2,0(r2)
  801814:	10803fcc 	andi	r2,r2,255
  801818:	1080201c 	xori	r2,r2,128
  80181c:	10bfe004 	addi	r2,r2,-128
  801820:	10000226 	beq	r2,zero,80182c <tick+0x1488>
  801824:	00800044 	movi	r2,1
  801828:	00000106 	br	801830 <tick+0x148c>
  80182c:	0005883a 	mov	r2,zero
  801830:	1007883a 	mov	r3,r2
  801834:	00802074 	movhi	r2,129
  801838:	10a6d044 	addi	r2,r2,-25791
  80183c:	10c00005 	stb	r3,0(r2)
      if(g62){
  801840:	00802074 	movhi	r2,129
  801844:	10a6d044 	addi	r2,r2,-25791
  801848:	10800003 	ldbu	r2,0(r2)
  80184c:	10803fcc 	andi	r2,r2,255
  801850:	1080201c 	xori	r2,r2,128
  801854:	10bfe004 	addi	r2,r2,-128
  801858:	10000426 	beq	r2,zero,80186c <tick+0x14c8>
         AEIStart =(AEIStart||1);
  80185c:	00802074 	movhi	r2,129
  801860:	10a6eac4 	addi	r2,r2,-25685
  801864:	00c00044 	movi	r3,1
  801868:	10c00005 	stb	r3,0(r2)
      }
      g65 =(g61&&(!(_cg61)));
  80186c:	00802074 	movhi	r2,129
  801870:	10a6cd04 	addi	r2,r2,-25804
  801874:	10800003 	ldbu	r2,0(r2)
  801878:	10803fcc 	andi	r2,r2,255
  80187c:	1080201c 	xori	r2,r2,128
  801880:	10bfe004 	addi	r2,r2,-128
  801884:	10000926 	beq	r2,zero,8018ac <tick+0x1508>
  801888:	00802074 	movhi	r2,129
  80188c:	10a6d0c4 	addi	r2,r2,-25789
  801890:	10800003 	ldbu	r2,0(r2)
  801894:	10803fcc 	andi	r2,r2,255
  801898:	1080201c 	xori	r2,r2,128
  80189c:	10bfe004 	addi	r2,r2,-128
  8018a0:	1000021e 	bne	r2,zero,8018ac <tick+0x1508>
  8018a4:	00800044 	movi	r2,1
  8018a8:	00000106 	br	8018b0 <tick+0x150c>
  8018ac:	0005883a 	mov	r2,zero
  8018b0:	1007883a 	mov	r3,r2
  8018b4:	00802074 	movhi	r2,129
  8018b8:	10a6e8c4 	addi	r2,r2,-25693
  8018bc:	10c00005 	stb	r3,0(r2)
      _cg65 = VPace;
  8018c0:	00802074 	movhi	r2,129
  8018c4:	10a6ebc4 	addi	r2,r2,-25681
  8018c8:	10c00003 	ldbu	r3,0(r2)
  8018cc:	00802074 	movhi	r2,129
  8018d0:	10a6e004 	addi	r2,r2,-25728
  8018d4:	10c00005 	stb	r3,0(r2)
      g66 =(g65&&_cg65);
  8018d8:	00802074 	movhi	r2,129
  8018dc:	10a6e8c4 	addi	r2,r2,-25693
  8018e0:	10800003 	ldbu	r2,0(r2)
  8018e4:	10803fcc 	andi	r2,r2,255
  8018e8:	1080201c 	xori	r2,r2,128
  8018ec:	10bfe004 	addi	r2,r2,-128
  8018f0:	10000926 	beq	r2,zero,801918 <tick+0x1574>
  8018f4:	00802074 	movhi	r2,129
  8018f8:	10a6e004 	addi	r2,r2,-25728
  8018fc:	10800003 	ldbu	r2,0(r2)
  801900:	10803fcc 	andi	r2,r2,255
  801904:	1080201c 	xori	r2,r2,128
  801908:	10bfe004 	addi	r2,r2,-128
  80190c:	10000226 	beq	r2,zero,801918 <tick+0x1574>
  801910:	00800044 	movi	r2,1
  801914:	00000106 	br	80191c <tick+0x1578>
  801918:	0005883a 	mov	r2,zero
  80191c:	1007883a 	mov	r3,r2
  801920:	00802074 	movhi	r2,129
  801924:	10a6d844 	addi	r2,r2,-25759
  801928:	10c00005 	stb	r3,0(r2)
      if(g66){
  80192c:	00802074 	movhi	r2,129
  801930:	10a6d844 	addi	r2,r2,-25759
  801934:	10800003 	ldbu	r2,0(r2)
  801938:	10803fcc 	andi	r2,r2,255
  80193c:	1080201c 	xori	r2,r2,128
  801940:	10bfe004 	addi	r2,r2,-128
  801944:	10000426 	beq	r2,zero,801958 <tick+0x15b4>
         AEIStart =(AEIStart||1);
  801948:	00802074 	movhi	r2,129
  80194c:	10a6eac4 	addi	r2,r2,-25685
  801950:	00c00044 	movi	r3,1
  801954:	10c00005 	stb	r3,0(r2)
      }
      g70 =(PRE_g69);
  801958:	00802074 	movhi	r2,129
  80195c:	10a6cdc4 	addi	r2,r2,-25801
  801960:	10c00003 	ldbu	r3,0(r2)
  801964:	00802074 	movhi	r2,129
  801968:	10a6e344 	addi	r2,r2,-25715
  80196c:	10c00005 	stb	r3,0(r2)
      _cg70 = VSense;
  801970:	00802074 	movhi	r2,129
  801974:	10a6dac4 	addi	r2,r2,-25749
  801978:	10c00003 	ldbu	r3,0(r2)
  80197c:	00802074 	movhi	r2,129
  801980:	10a6e204 	addi	r2,r2,-25720
  801984:	10c00005 	stb	r3,0(r2)
      g71 =(g70&&_cg70);
  801988:	00802074 	movhi	r2,129
  80198c:	10a6e344 	addi	r2,r2,-25715
  801990:	10800003 	ldbu	r2,0(r2)
  801994:	10803fcc 	andi	r2,r2,255
  801998:	1080201c 	xori	r2,r2,128
  80199c:	10bfe004 	addi	r2,r2,-128
  8019a0:	10000926 	beq	r2,zero,8019c8 <tick+0x1624>
  8019a4:	00802074 	movhi	r2,129
  8019a8:	10a6e204 	addi	r2,r2,-25720
  8019ac:	10800003 	ldbu	r2,0(r2)
  8019b0:	10803fcc 	andi	r2,r2,255
  8019b4:	1080201c 	xori	r2,r2,128
  8019b8:	10bfe004 	addi	r2,r2,-128
  8019bc:	10000226 	beq	r2,zero,8019c8 <tick+0x1624>
  8019c0:	00800044 	movi	r2,1
  8019c4:	00000106 	br	8019cc <tick+0x1628>
  8019c8:	0005883a 	mov	r2,zero
  8019cc:	1007883a 	mov	r3,r2
  8019d0:	00802074 	movhi	r2,129
  8019d4:	10a6cd44 	addi	r2,r2,-25803
  8019d8:	10c00005 	stb	r3,0(r2)
      if(g71){
  8019dc:	00802074 	movhi	r2,129
  8019e0:	10a6cd44 	addi	r2,r2,-25803
  8019e4:	10800003 	ldbu	r2,0(r2)
  8019e8:	10803fcc 	andi	r2,r2,255
  8019ec:	1080201c 	xori	r2,r2,128
  8019f0:	10bfe004 	addi	r2,r2,-128
  8019f4:	10000426 	beq	r2,zero,801a08 <tick+0x1664>
         AEIStart =(AEIStart||1);
  8019f8:	00802074 	movhi	r2,129
  8019fc:	10a6eac4 	addi	r2,r2,-25685
  801a00:	00c00044 	movi	r3,1
  801a04:	10c00005 	stb	r3,0(r2)
      }
      g74 =(g70&&(!(_cg70)));
  801a08:	00802074 	movhi	r2,129
  801a0c:	10a6e344 	addi	r2,r2,-25715
  801a10:	10800003 	ldbu	r2,0(r2)
  801a14:	10803fcc 	andi	r2,r2,255
  801a18:	1080201c 	xori	r2,r2,128
  801a1c:	10bfe004 	addi	r2,r2,-128
  801a20:	10000926 	beq	r2,zero,801a48 <tick+0x16a4>
  801a24:	00802074 	movhi	r2,129
  801a28:	10a6e204 	addi	r2,r2,-25720
  801a2c:	10800003 	ldbu	r2,0(r2)
  801a30:	10803fcc 	andi	r2,r2,255
  801a34:	1080201c 	xori	r2,r2,128
  801a38:	10bfe004 	addi	r2,r2,-128
  801a3c:	1000021e 	bne	r2,zero,801a48 <tick+0x16a4>
  801a40:	00800044 	movi	r2,1
  801a44:	00000106 	br	801a4c <tick+0x16a8>
  801a48:	0005883a 	mov	r2,zero
  801a4c:	1007883a 	mov	r3,r2
  801a50:	00802074 	movhi	r2,129
  801a54:	10a6ef44 	addi	r2,r2,-25667
  801a58:	10c00005 	stb	r3,0(r2)
      _cg74 = VPace;
  801a5c:	00802074 	movhi	r2,129
  801a60:	10a6ebc4 	addi	r2,r2,-25681
  801a64:	10c00003 	ldbu	r3,0(r2)
  801a68:	00802074 	movhi	r2,129
  801a6c:	10a6cf04 	addi	r2,r2,-25796
  801a70:	10c00005 	stb	r3,0(r2)
      g75 =(g74&&_cg74);
  801a74:	00802074 	movhi	r2,129
  801a78:	10a6ef44 	addi	r2,r2,-25667
  801a7c:	10800003 	ldbu	r2,0(r2)
  801a80:	10803fcc 	andi	r2,r2,255
  801a84:	1080201c 	xori	r2,r2,128
  801a88:	10bfe004 	addi	r2,r2,-128
  801a8c:	10000926 	beq	r2,zero,801ab4 <tick+0x1710>
  801a90:	00802074 	movhi	r2,129
  801a94:	10a6cf04 	addi	r2,r2,-25796
  801a98:	10800003 	ldbu	r2,0(r2)
  801a9c:	10803fcc 	andi	r2,r2,255
  801aa0:	1080201c 	xori	r2,r2,128
  801aa4:	10bfe004 	addi	r2,r2,-128
  801aa8:	10000226 	beq	r2,zero,801ab4 <tick+0x1710>
  801aac:	00800044 	movi	r2,1
  801ab0:	00000106 	br	801ab8 <tick+0x1714>
  801ab4:	0005883a 	mov	r2,zero
  801ab8:	1007883a 	mov	r3,r2
  801abc:	00802074 	movhi	r2,129
  801ac0:	10a6e5c4 	addi	r2,r2,-25705
  801ac4:	10c00005 	stb	r3,0(r2)
      if(g75){
  801ac8:	00802074 	movhi	r2,129
  801acc:	10a6e5c4 	addi	r2,r2,-25705
  801ad0:	10800003 	ldbu	r2,0(r2)
  801ad4:	10803fcc 	andi	r2,r2,255
  801ad8:	1080201c 	xori	r2,r2,128
  801adc:	10bfe004 	addi	r2,r2,-128
  801ae0:	10000426 	beq	r2,zero,801af4 <tick+0x1750>
         AEIStart =(AEIStart||1);
  801ae4:	00802074 	movhi	r2,129
  801ae8:	10a6eac4 	addi	r2,r2,-25685
  801aec:	00c00044 	movi	r3,1
  801af0:	10c00005 	stb	r3,0(r2)
      }
      g53 =(PRE_g52);
  801af4:	00802074 	movhi	r2,129
  801af8:	10a6da84 	addi	r2,r2,-25750
  801afc:	10c00003 	ldbu	r3,0(r2)
  801b00:	00802074 	movhi	r2,129
  801b04:	10a6e284 	addi	r2,r2,-25718
  801b08:	10c00005 	stb	r3,0(r2)
      g53b = g53;
  801b0c:	00802074 	movhi	r2,129
  801b10:	10a6e284 	addi	r2,r2,-25718
  801b14:	10c00003 	ldbu	r3,0(r2)
  801b18:	00802074 	movhi	r2,129
  801b1c:	10a6e044 	addi	r2,r2,-25727
  801b20:	10c00005 	stb	r3,0(r2)
      _cg53 = AEIStart;
  801b24:	00802074 	movhi	r2,129
  801b28:	10a6eac4 	addi	r2,r2,-25685
  801b2c:	10c00003 	ldbu	r3,0(r2)
  801b30:	00802074 	movhi	r2,129
  801b34:	10a6d604 	addi	r2,r2,-25768
  801b38:	10c00005 	stb	r3,0(r2)
      g52 =(g57||(g53b&&(!(_cg53)))||g51||(g55b&&_cg55));
  801b3c:	00802074 	movhi	r2,129
  801b40:	10a6e304 	addi	r2,r2,-25716
  801b44:	10800003 	ldbu	r2,0(r2)
  801b48:	10803fcc 	andi	r2,r2,255
  801b4c:	1080201c 	xori	r2,r2,128
  801b50:	10bfe004 	addi	r2,r2,-128
  801b54:	1000231e 	bne	r2,zero,801be4 <tick+0x1840>
  801b58:	00802074 	movhi	r2,129
  801b5c:	10a6e044 	addi	r2,r2,-25727
  801b60:	10800003 	ldbu	r2,0(r2)
  801b64:	10803fcc 	andi	r2,r2,255
  801b68:	1080201c 	xori	r2,r2,128
  801b6c:	10bfe004 	addi	r2,r2,-128
  801b70:	10000726 	beq	r2,zero,801b90 <tick+0x17ec>
  801b74:	00802074 	movhi	r2,129
  801b78:	10a6d604 	addi	r2,r2,-25768
  801b7c:	10800003 	ldbu	r2,0(r2)
  801b80:	10803fcc 	andi	r2,r2,255
  801b84:	1080201c 	xori	r2,r2,128
  801b88:	10bfe004 	addi	r2,r2,-128
  801b8c:	10001526 	beq	r2,zero,801be4 <tick+0x1840>
  801b90:	00802074 	movhi	r2,129
  801b94:	10a6e184 	addi	r2,r2,-25722
  801b98:	10800003 	ldbu	r2,0(r2)
  801b9c:	10803fcc 	andi	r2,r2,255
  801ba0:	1080201c 	xori	r2,r2,128
  801ba4:	10bfe004 	addi	r2,r2,-128
  801ba8:	10000e1e 	bne	r2,zero,801be4 <tick+0x1840>
  801bac:	00802074 	movhi	r2,129
  801bb0:	10a6c804 	addi	r2,r2,-25824
  801bb4:	10800003 	ldbu	r2,0(r2)
  801bb8:	10803fcc 	andi	r2,r2,255
  801bbc:	1080201c 	xori	r2,r2,128
  801bc0:	10bfe004 	addi	r2,r2,-128
  801bc4:	10000926 	beq	r2,zero,801bec <tick+0x1848>
  801bc8:	00802074 	movhi	r2,129
  801bcc:	10a6eb44 	addi	r2,r2,-25683
  801bd0:	10800003 	ldbu	r2,0(r2)
  801bd4:	10803fcc 	andi	r2,r2,255
  801bd8:	1080201c 	xori	r2,r2,128
  801bdc:	10bfe004 	addi	r2,r2,-128
  801be0:	10000226 	beq	r2,zero,801bec <tick+0x1848>
  801be4:	00800044 	movi	r2,1
  801be8:	00000106 	br	801bf0 <tick+0x184c>
  801bec:	0005883a 	mov	r2,zero
  801bf0:	1007883a 	mov	r3,r2
  801bf4:	00802074 	movhi	r2,129
  801bf8:	10a6ce44 	addi	r2,r2,-25799
  801bfc:	10c00005 	stb	r3,0(r2)
      g54 =((g53b&&_cg53)||(g56&&(!(_cg56))));
  801c00:	00802074 	movhi	r2,129
  801c04:	10a6e044 	addi	r2,r2,-25727
  801c08:	10800003 	ldbu	r2,0(r2)
  801c0c:	10803fcc 	andi	r2,r2,255
  801c10:	1080201c 	xori	r2,r2,128
  801c14:	10bfe004 	addi	r2,r2,-128
  801c18:	10000726 	beq	r2,zero,801c38 <tick+0x1894>
  801c1c:	00802074 	movhi	r2,129
  801c20:	10a6d604 	addi	r2,r2,-25768
  801c24:	10800003 	ldbu	r2,0(r2)
  801c28:	10803fcc 	andi	r2,r2,255
  801c2c:	1080201c 	xori	r2,r2,128
  801c30:	10bfe004 	addi	r2,r2,-128
  801c34:	10000e1e 	bne	r2,zero,801c70 <tick+0x18cc>
  801c38:	00802074 	movhi	r2,129
  801c3c:	10a6da44 	addi	r2,r2,-25751
  801c40:	10800003 	ldbu	r2,0(r2)
  801c44:	10803fcc 	andi	r2,r2,255
  801c48:	1080201c 	xori	r2,r2,128
  801c4c:	10bfe004 	addi	r2,r2,-128
  801c50:	10000926 	beq	r2,zero,801c78 <tick+0x18d4>
  801c54:	00802074 	movhi	r2,129
  801c58:	10a6e404 	addi	r2,r2,-25712
  801c5c:	10800003 	ldbu	r2,0(r2)
  801c60:	10803fcc 	andi	r2,r2,255
  801c64:	1080201c 	xori	r2,r2,128
  801c68:	10bfe004 	addi	r2,r2,-128
  801c6c:	1000021e 	bne	r2,zero,801c78 <tick+0x18d4>
  801c70:	00800044 	movi	r2,1
  801c74:	00000106 	br	801c7c <tick+0x18d8>
  801c78:	0005883a 	mov	r2,zero
  801c7c:	1007883a 	mov	r3,r2
  801c80:	00802074 	movhi	r2,129
  801c84:	10a6d804 	addi	r2,r2,-25760
  801c88:	10c00005 	stb	r3,0(r2)
      g59 = g1;
  801c8c:	00802074 	movhi	r2,129
  801c90:	10a6ccc4 	addi	r2,r2,-25805
  801c94:	10c00003 	ldbu	r3,0(r2)
  801c98:	00802074 	movhi	r2,129
  801c9c:	10a6d7c4 	addi	r2,r2,-25761
  801ca0:	10c00005 	stb	r3,0(r2)
      g60 =((g65&&(!(_cg65)))||g59);
  801ca4:	00802074 	movhi	r2,129
  801ca8:	10a6e8c4 	addi	r2,r2,-25693
  801cac:	10800003 	ldbu	r2,0(r2)
  801cb0:	10803fcc 	andi	r2,r2,255
  801cb4:	1080201c 	xori	r2,r2,128
  801cb8:	10bfe004 	addi	r2,r2,-128
  801cbc:	10000726 	beq	r2,zero,801cdc <tick+0x1938>
  801cc0:	00802074 	movhi	r2,129
  801cc4:	10a6e004 	addi	r2,r2,-25728
  801cc8:	10800003 	ldbu	r2,0(r2)
  801ccc:	10803fcc 	andi	r2,r2,255
  801cd0:	1080201c 	xori	r2,r2,128
  801cd4:	10bfe004 	addi	r2,r2,-128
  801cd8:	10000726 	beq	r2,zero,801cf8 <tick+0x1954>
  801cdc:	00802074 	movhi	r2,129
  801ce0:	10a6d7c4 	addi	r2,r2,-25761
  801ce4:	10800003 	ldbu	r2,0(r2)
  801ce8:	10803fcc 	andi	r2,r2,255
  801cec:	1080201c 	xori	r2,r2,128
  801cf0:	10bfe004 	addi	r2,r2,-128
  801cf4:	10000226 	beq	r2,zero,801d00 <tick+0x195c>
  801cf8:	00800044 	movi	r2,1
  801cfc:	00000106 	br	801d04 <tick+0x1960>
  801d00:	0005883a 	mov	r2,zero
  801d04:	1007883a 	mov	r3,r2
  801d08:	00802074 	movhi	r2,129
  801d0c:	10a6dec4 	addi	r2,r2,-25733
  801d10:	10c00005 	stb	r3,0(r2)
      g64 =(PRE_g63);
  801d14:	00802074 	movhi	r2,129
  801d18:	10a6c784 	addi	r2,r2,-25826
  801d1c:	10c00003 	ldbu	r3,0(r2)
  801d20:	00802074 	movhi	r2,129
  801d24:	10a6d3c4 	addi	r2,r2,-25777
  801d28:	10c00005 	stb	r3,0(r2)
      g63 =(g64||g62||g66);
  801d2c:	00802074 	movhi	r2,129
  801d30:	10a6d3c4 	addi	r2,r2,-25777
  801d34:	10800003 	ldbu	r2,0(r2)
  801d38:	10803fcc 	andi	r2,r2,255
  801d3c:	1080201c 	xori	r2,r2,128
  801d40:	10bfe004 	addi	r2,r2,-128
  801d44:	10000e1e 	bne	r2,zero,801d80 <tick+0x19dc>
  801d48:	00802074 	movhi	r2,129
  801d4c:	10a6d044 	addi	r2,r2,-25791
  801d50:	10800003 	ldbu	r2,0(r2)
  801d54:	10803fcc 	andi	r2,r2,255
  801d58:	1080201c 	xori	r2,r2,128
  801d5c:	10bfe004 	addi	r2,r2,-128
  801d60:	1000071e 	bne	r2,zero,801d80 <tick+0x19dc>
  801d64:	00802074 	movhi	r2,129
  801d68:	10a6d844 	addi	r2,r2,-25759
  801d6c:	10800003 	ldbu	r2,0(r2)
  801d70:	10803fcc 	andi	r2,r2,255
  801d74:	1080201c 	xori	r2,r2,128
  801d78:	10bfe004 	addi	r2,r2,-128
  801d7c:	10000226 	beq	r2,zero,801d88 <tick+0x19e4>
  801d80:	00800044 	movi	r2,1
  801d84:	00000106 	br	801d8c <tick+0x19e8>
  801d88:	0005883a 	mov	r2,zero
  801d8c:	1007883a 	mov	r3,r2
  801d90:	00802074 	movhi	r2,129
  801d94:	10a6de44 	addi	r2,r2,-25735
  801d98:	10c00005 	stb	r3,0(r2)
      g68 = g1;
  801d9c:	00802074 	movhi	r2,129
  801da0:	10a6ccc4 	addi	r2,r2,-25805
  801da4:	10c00003 	ldbu	r3,0(r2)
  801da8:	00802074 	movhi	r2,129
  801dac:	10a6e784 	addi	r2,r2,-25698
  801db0:	10c00005 	stb	r3,0(r2)
      g69 =(g68||(g74&&(!(_cg74))));
  801db4:	00802074 	movhi	r2,129
  801db8:	10a6e784 	addi	r2,r2,-25698
  801dbc:	10800003 	ldbu	r2,0(r2)
  801dc0:	10803fcc 	andi	r2,r2,255
  801dc4:	1080201c 	xori	r2,r2,128
  801dc8:	10bfe004 	addi	r2,r2,-128
  801dcc:	10000e1e 	bne	r2,zero,801e08 <tick+0x1a64>
  801dd0:	00802074 	movhi	r2,129
  801dd4:	10a6ef44 	addi	r2,r2,-25667
  801dd8:	10800003 	ldbu	r2,0(r2)
  801ddc:	10803fcc 	andi	r2,r2,255
  801de0:	1080201c 	xori	r2,r2,128
  801de4:	10bfe004 	addi	r2,r2,-128
  801de8:	10000926 	beq	r2,zero,801e10 <tick+0x1a6c>
  801dec:	00802074 	movhi	r2,129
  801df0:	10a6cf04 	addi	r2,r2,-25796
  801df4:	10800003 	ldbu	r2,0(r2)
  801df8:	10803fcc 	andi	r2,r2,255
  801dfc:	1080201c 	xori	r2,r2,128
  801e00:	10bfe004 	addi	r2,r2,-128
  801e04:	1000021e 	bne	r2,zero,801e10 <tick+0x1a6c>
  801e08:	00800044 	movi	r2,1
  801e0c:	00000106 	br	801e14 <tick+0x1a70>
  801e10:	0005883a 	mov	r2,zero
  801e14:	1007883a 	mov	r3,r2
  801e18:	00802074 	movhi	r2,129
  801e1c:	10a6ee84 	addi	r2,r2,-25670
  801e20:	10c00005 	stb	r3,0(r2)
      g73 =(PRE_g72);
  801e24:	00802074 	movhi	r2,129
  801e28:	10a6cbc4 	addi	r2,r2,-25809
  801e2c:	10c00003 	ldbu	r3,0(r2)
  801e30:	00802074 	movhi	r2,129
  801e34:	10a6e984 	addi	r2,r2,-25690
  801e38:	10c00005 	stb	r3,0(r2)
      g72 =(g73||g75||g71);
  801e3c:	00802074 	movhi	r2,129
  801e40:	10a6e984 	addi	r2,r2,-25690
  801e44:	10800003 	ldbu	r2,0(r2)
  801e48:	10803fcc 	andi	r2,r2,255
  801e4c:	1080201c 	xori	r2,r2,128
  801e50:	10bfe004 	addi	r2,r2,-128
  801e54:	10000e1e 	bne	r2,zero,801e90 <tick+0x1aec>
  801e58:	00802074 	movhi	r2,129
  801e5c:	10a6e5c4 	addi	r2,r2,-25705
  801e60:	10800003 	ldbu	r2,0(r2)
  801e64:	10803fcc 	andi	r2,r2,255
  801e68:	1080201c 	xori	r2,r2,128
  801e6c:	10bfe004 	addi	r2,r2,-128
  801e70:	1000071e 	bne	r2,zero,801e90 <tick+0x1aec>
  801e74:	00802074 	movhi	r2,129
  801e78:	10a6cd44 	addi	r2,r2,-25803
  801e7c:	10800003 	ldbu	r2,0(r2)
  801e80:	10803fcc 	andi	r2,r2,255
  801e84:	1080201c 	xori	r2,r2,128
  801e88:	10bfe004 	addi	r2,r2,-128
  801e8c:	10000226 	beq	r2,zero,801e98 <tick+0x1af4>
  801e90:	00800044 	movi	r2,1
  801e94:	00000106 	br	801e9c <tick+0x1af8>
  801e98:	0005883a 	mov	r2,zero
  801e9c:	1007883a 	mov	r3,r2
  801ea0:	00802074 	movhi	r2,129
  801ea4:	10a6e444 	addi	r2,r2,-25711
  801ea8:	10c00005 	stb	r3,0(r2)
      g11_e1 =(!((g4||g7)));
  801eac:	00802074 	movhi	r2,129
  801eb0:	10a6c5c4 	addi	r2,r2,-25833
  801eb4:	10800003 	ldbu	r2,0(r2)
  801eb8:	10803fcc 	andi	r2,r2,255
  801ebc:	1080201c 	xori	r2,r2,128
  801ec0:	10bfe004 	addi	r2,r2,-128
  801ec4:	1000091e 	bne	r2,zero,801eec <tick+0x1b48>
  801ec8:	00802074 	movhi	r2,129
  801ecc:	10a6d5c4 	addi	r2,r2,-25769
  801ed0:	10800003 	ldbu	r2,0(r2)
  801ed4:	10803fcc 	andi	r2,r2,255
  801ed8:	1080201c 	xori	r2,r2,128
  801edc:	10bfe004 	addi	r2,r2,-128
  801ee0:	1000021e 	bne	r2,zero,801eec <tick+0x1b48>
  801ee4:	00800044 	movi	r2,1
  801ee8:	00000106 	br	801ef0 <tick+0x1b4c>
  801eec:	0005883a 	mov	r2,zero
  801ef0:	1007883a 	mov	r3,r2
  801ef4:	00802074 	movhi	r2,129
  801ef8:	10a6dbc4 	addi	r2,r2,-25745
  801efc:	10c00005 	stb	r3,0(r2)
      g19_e2 =(!((g14||g16)));
  801f00:	00802074 	movhi	r2,129
  801f04:	10a6d944 	addi	r2,r2,-25755
  801f08:	10800003 	ldbu	r2,0(r2)
  801f0c:	10803fcc 	andi	r2,r2,255
  801f10:	1080201c 	xori	r2,r2,128
  801f14:	10bfe004 	addi	r2,r2,-128
  801f18:	1000091e 	bne	r2,zero,801f40 <tick+0x1b9c>
  801f1c:	00802074 	movhi	r2,129
  801f20:	10a6e6c4 	addi	r2,r2,-25701
  801f24:	10800003 	ldbu	r2,0(r2)
  801f28:	10803fcc 	andi	r2,r2,255
  801f2c:	1080201c 	xori	r2,r2,128
  801f30:	10bfe004 	addi	r2,r2,-128
  801f34:	1000021e 	bne	r2,zero,801f40 <tick+0x1b9c>
  801f38:	00800044 	movi	r2,1
  801f3c:	00000106 	br	801f44 <tick+0x1ba0>
  801f40:	0005883a 	mov	r2,zero
  801f44:	1007883a 	mov	r3,r2
  801f48:	00802074 	movhi	r2,129
  801f4c:	10a6c584 	addi	r2,r2,-25834
  801f50:	10c00005 	stb	r3,0(r2)
      g31_e3 =(!((g22||g26||g28)));
  801f54:	00802074 	movhi	r2,129
  801f58:	10a6e904 	addi	r2,r2,-25692
  801f5c:	10800003 	ldbu	r2,0(r2)
  801f60:	10803fcc 	andi	r2,r2,255
  801f64:	1080201c 	xori	r2,r2,128
  801f68:	10bfe004 	addi	r2,r2,-128
  801f6c:	1000101e 	bne	r2,zero,801fb0 <tick+0x1c0c>
  801f70:	00802074 	movhi	r2,129
  801f74:	10a6eec4 	addi	r2,r2,-25669
  801f78:	10800003 	ldbu	r2,0(r2)
  801f7c:	10803fcc 	andi	r2,r2,255
  801f80:	1080201c 	xori	r2,r2,128
  801f84:	10bfe004 	addi	r2,r2,-128
  801f88:	1000091e 	bne	r2,zero,801fb0 <tick+0x1c0c>
  801f8c:	00802074 	movhi	r2,129
  801f90:	10a6e944 	addi	r2,r2,-25691
  801f94:	10800003 	ldbu	r2,0(r2)
  801f98:	10803fcc 	andi	r2,r2,255
  801f9c:	1080201c 	xori	r2,r2,128
  801fa0:	10bfe004 	addi	r2,r2,-128
  801fa4:	1000021e 	bne	r2,zero,801fb0 <tick+0x1c0c>
  801fa8:	00800044 	movi	r2,1
  801fac:	00000106 	br	801fb4 <tick+0x1c10>
  801fb0:	0005883a 	mov	r2,zero
  801fb4:	1007883a 	mov	r3,r2
  801fb8:	00802074 	movhi	r2,129
  801fbc:	10a6cb44 	addi	r2,r2,-25811
  801fc0:	10c00005 	stb	r3,0(r2)
      g40_e4 =(!((g34||g37)));
  801fc4:	00802074 	movhi	r2,129
  801fc8:	10a6d4c4 	addi	r2,r2,-25773
  801fcc:	10800003 	ldbu	r2,0(r2)
  801fd0:	10803fcc 	andi	r2,r2,255
  801fd4:	1080201c 	xori	r2,r2,128
  801fd8:	10bfe004 	addi	r2,r2,-128
  801fdc:	1000091e 	bne	r2,zero,802004 <tick+0x1c60>
  801fe0:	00802074 	movhi	r2,129
  801fe4:	10a6d004 	addi	r2,r2,-25792
  801fe8:	10800003 	ldbu	r2,0(r2)
  801fec:	10803fcc 	andi	r2,r2,255
  801ff0:	1080201c 	xori	r2,r2,128
  801ff4:	10bfe004 	addi	r2,r2,-128
  801ff8:	1000021e 	bne	r2,zero,802004 <tick+0x1c60>
  801ffc:	00800044 	movi	r2,1
  802000:	00000106 	br	802008 <tick+0x1c64>
  802004:	0005883a 	mov	r2,zero
  802008:	1007883a 	mov	r3,r2
  80200c:	00802074 	movhi	r2,129
  802010:	10a6ea04 	addi	r2,r2,-25688
  802014:	10c00005 	stb	r3,0(r2)
      g50_e5 =(!((g43||g46)));
  802018:	00802074 	movhi	r2,129
  80201c:	10a6dfc4 	addi	r2,r2,-25729
  802020:	10800003 	ldbu	r2,0(r2)
  802024:	10803fcc 	andi	r2,r2,255
  802028:	1080201c 	xori	r2,r2,128
  80202c:	10bfe004 	addi	r2,r2,-128
  802030:	1000091e 	bne	r2,zero,802058 <tick+0x1cb4>
  802034:	00802074 	movhi	r2,129
  802038:	10a6e104 	addi	r2,r2,-25724
  80203c:	10800003 	ldbu	r2,0(r2)
  802040:	10803fcc 	andi	r2,r2,255
  802044:	1080201c 	xori	r2,r2,128
  802048:	10bfe004 	addi	r2,r2,-128
  80204c:	1000021e 	bne	r2,zero,802058 <tick+0x1cb4>
  802050:	00800044 	movi	r2,1
  802054:	00000106 	br	80205c <tick+0x1cb8>
  802058:	0005883a 	mov	r2,zero
  80205c:	1007883a 	mov	r3,r2
  802060:	00802074 	movhi	r2,129
  802064:	10a6dc04 	addi	r2,r2,-25744
  802068:	10c00005 	stb	r3,0(r2)
      g58_e6 =(!((g53||g55)));
  80206c:	00802074 	movhi	r2,129
  802070:	10a6e284 	addi	r2,r2,-25718
  802074:	10800003 	ldbu	r2,0(r2)
  802078:	10803fcc 	andi	r2,r2,255
  80207c:	1080201c 	xori	r2,r2,128
  802080:	10bfe004 	addi	r2,r2,-128
  802084:	1000091e 	bne	r2,zero,8020ac <tick+0x1d08>
  802088:	00802074 	movhi	r2,129
  80208c:	10a6c6c4 	addi	r2,r2,-25829
  802090:	10800003 	ldbu	r2,0(r2)
  802094:	10803fcc 	andi	r2,r2,255
  802098:	1080201c 	xori	r2,r2,128
  80209c:	10bfe004 	addi	r2,r2,-128
  8020a0:	1000021e 	bne	r2,zero,8020ac <tick+0x1d08>
  8020a4:	00800044 	movi	r2,1
  8020a8:	00000106 	br	8020b0 <tick+0x1d0c>
  8020ac:	0005883a 	mov	r2,zero
  8020b0:	1007883a 	mov	r3,r2
  8020b4:	00802074 	movhi	r2,129
  8020b8:	10a6ce84 	addi	r2,r2,-25798
  8020bc:	10c00005 	stb	r3,0(r2)
      g67_e7 =(!((g61||g64)));
  8020c0:	00802074 	movhi	r2,129
  8020c4:	10a6cd04 	addi	r2,r2,-25804
  8020c8:	10800003 	ldbu	r2,0(r2)
  8020cc:	10803fcc 	andi	r2,r2,255
  8020d0:	1080201c 	xori	r2,r2,128
  8020d4:	10bfe004 	addi	r2,r2,-128
  8020d8:	1000091e 	bne	r2,zero,802100 <tick+0x1d5c>
  8020dc:	00802074 	movhi	r2,129
  8020e0:	10a6d3c4 	addi	r2,r2,-25777
  8020e4:	10800003 	ldbu	r2,0(r2)
  8020e8:	10803fcc 	andi	r2,r2,255
  8020ec:	1080201c 	xori	r2,r2,128
  8020f0:	10bfe004 	addi	r2,r2,-128
  8020f4:	1000021e 	bne	r2,zero,802100 <tick+0x1d5c>
  8020f8:	00800044 	movi	r2,1
  8020fc:	00000106 	br	802104 <tick+0x1d60>
  802100:	0005883a 	mov	r2,zero
  802104:	1007883a 	mov	r3,r2
  802108:	00802074 	movhi	r2,129
  80210c:	10a6d684 	addi	r2,r2,-25766
  802110:	10c00005 	stb	r3,0(r2)
      g76_e8 =(!((g70||g73)));
  802114:	00802074 	movhi	r2,129
  802118:	10a6e344 	addi	r2,r2,-25715
  80211c:	10800003 	ldbu	r2,0(r2)
  802120:	10803fcc 	andi	r2,r2,255
  802124:	1080201c 	xori	r2,r2,128
  802128:	10bfe004 	addi	r2,r2,-128
  80212c:	1000091e 	bne	r2,zero,802154 <tick+0x1db0>
  802130:	00802074 	movhi	r2,129
  802134:	10a6e984 	addi	r2,r2,-25690
  802138:	10800003 	ldbu	r2,0(r2)
  80213c:	10803fcc 	andi	r2,r2,255
  802140:	1080201c 	xori	r2,r2,128
  802144:	10bfe004 	addi	r2,r2,-128
  802148:	1000021e 	bne	r2,zero,802154 <tick+0x1db0>
  80214c:	00800044 	movi	r2,1
  802150:	00000106 	br	802158 <tick+0x1db4>
  802154:	0005883a 	mov	r2,zero
  802158:	1007883a 	mov	r3,r2
  80215c:	00802074 	movhi	r2,129
  802160:	10a6e0c4 	addi	r2,r2,-25725
  802164:	10c00005 	stb	r3,0(r2)
      g77_fix0 =((g11_e1||g11)&&(g19_e2||g19)&&(g31_e3||g31)&&(g40_e4||g40));
  802168:	00802074 	movhi	r2,129
  80216c:	10a6dbc4 	addi	r2,r2,-25745
  802170:	10800003 	ldbu	r2,0(r2)
  802174:	10803fcc 	andi	r2,r2,255
  802178:	1080201c 	xori	r2,r2,128
  80217c:	10bfe004 	addi	r2,r2,-128
  802180:	1000071e 	bne	r2,zero,8021a0 <tick+0x1dfc>
  802184:	00802074 	movhi	r2,129
  802188:	10a6e884 	addi	r2,r2,-25694
  80218c:	10800003 	ldbu	r2,0(r2)
  802190:	10803fcc 	andi	r2,r2,255
  802194:	1080201c 	xori	r2,r2,128
  802198:	10bfe004 	addi	r2,r2,-128
  80219c:	10002c26 	beq	r2,zero,802250 <tick+0x1eac>
  8021a0:	00802074 	movhi	r2,129
  8021a4:	10a6c584 	addi	r2,r2,-25834
  8021a8:	10800003 	ldbu	r2,0(r2)
  8021ac:	10803fcc 	andi	r2,r2,255
  8021b0:	1080201c 	xori	r2,r2,128
  8021b4:	10bfe004 	addi	r2,r2,-128
  8021b8:	1000071e 	bne	r2,zero,8021d8 <tick+0x1e34>
  8021bc:	00802074 	movhi	r2,129
  8021c0:	10a6c604 	addi	r2,r2,-25832
  8021c4:	10800003 	ldbu	r2,0(r2)
  8021c8:	10803fcc 	andi	r2,r2,255
  8021cc:	1080201c 	xori	r2,r2,128
  8021d0:	10bfe004 	addi	r2,r2,-128
  8021d4:	10001e26 	beq	r2,zero,802250 <tick+0x1eac>
  8021d8:	00802074 	movhi	r2,129
  8021dc:	10a6cb44 	addi	r2,r2,-25811
  8021e0:	10800003 	ldbu	r2,0(r2)
  8021e4:	10803fcc 	andi	r2,r2,255
  8021e8:	1080201c 	xori	r2,r2,128
  8021ec:	10bfe004 	addi	r2,r2,-128
  8021f0:	1000071e 	bne	r2,zero,802210 <tick+0x1e6c>
  8021f4:	00802074 	movhi	r2,129
  8021f8:	10a6cfc4 	addi	r2,r2,-25793
  8021fc:	10800003 	ldbu	r2,0(r2)
  802200:	10803fcc 	andi	r2,r2,255
  802204:	1080201c 	xori	r2,r2,128
  802208:	10bfe004 	addi	r2,r2,-128
  80220c:	10001026 	beq	r2,zero,802250 <tick+0x1eac>
  802210:	00802074 	movhi	r2,129
  802214:	10a6ea04 	addi	r2,r2,-25688
  802218:	10800003 	ldbu	r2,0(r2)
  80221c:	10803fcc 	andi	r2,r2,255
  802220:	1080201c 	xori	r2,r2,128
  802224:	10bfe004 	addi	r2,r2,-128
  802228:	1000071e 	bne	r2,zero,802248 <tick+0x1ea4>
  80222c:	00802074 	movhi	r2,129
  802230:	10a6c504 	addi	r2,r2,-25836
  802234:	10800003 	ldbu	r2,0(r2)
  802238:	10803fcc 	andi	r2,r2,255
  80223c:	1080201c 	xori	r2,r2,128
  802240:	10bfe004 	addi	r2,r2,-128
  802244:	10000226 	beq	r2,zero,802250 <tick+0x1eac>
  802248:	00800044 	movi	r2,1
  80224c:	00000106 	br	802254 <tick+0x1eb0>
  802250:	0005883a 	mov	r2,zero
  802254:	1007883a 	mov	r3,r2
  802258:	00802074 	movhi	r2,129
  80225c:	10a6c644 	addi	r2,r2,-25831
  802260:	10c00005 	stb	r3,0(r2)
      g77_e1_fix =(g16||g55||g7||g37||g46||g64||g73||g26);
  802264:	00802074 	movhi	r2,129
  802268:	10a6e6c4 	addi	r2,r2,-25701
  80226c:	10800003 	ldbu	r2,0(r2)
  802270:	10803fcc 	andi	r2,r2,255
  802274:	1080201c 	xori	r2,r2,128
  802278:	10bfe004 	addi	r2,r2,-128
  80227c:	1000311e 	bne	r2,zero,802344 <tick+0x1fa0>
  802280:	00802074 	movhi	r2,129
  802284:	10a6c6c4 	addi	r2,r2,-25829
  802288:	10800003 	ldbu	r2,0(r2)
  80228c:	10803fcc 	andi	r2,r2,255
  802290:	1080201c 	xori	r2,r2,128
  802294:	10bfe004 	addi	r2,r2,-128
  802298:	10002a1e 	bne	r2,zero,802344 <tick+0x1fa0>
  80229c:	00802074 	movhi	r2,129
  8022a0:	10a6d5c4 	addi	r2,r2,-25769
  8022a4:	10800003 	ldbu	r2,0(r2)
  8022a8:	10803fcc 	andi	r2,r2,255
  8022ac:	1080201c 	xori	r2,r2,128
  8022b0:	10bfe004 	addi	r2,r2,-128
  8022b4:	1000231e 	bne	r2,zero,802344 <tick+0x1fa0>
  8022b8:	00802074 	movhi	r2,129
  8022bc:	10a6d004 	addi	r2,r2,-25792
  8022c0:	10800003 	ldbu	r2,0(r2)
  8022c4:	10803fcc 	andi	r2,r2,255
  8022c8:	1080201c 	xori	r2,r2,128
  8022cc:	10bfe004 	addi	r2,r2,-128
  8022d0:	10001c1e 	bne	r2,zero,802344 <tick+0x1fa0>
  8022d4:	00802074 	movhi	r2,129
  8022d8:	10a6e104 	addi	r2,r2,-25724
  8022dc:	10800003 	ldbu	r2,0(r2)
  8022e0:	10803fcc 	andi	r2,r2,255
  8022e4:	1080201c 	xori	r2,r2,128
  8022e8:	10bfe004 	addi	r2,r2,-128
  8022ec:	1000151e 	bne	r2,zero,802344 <tick+0x1fa0>
  8022f0:	00802074 	movhi	r2,129
  8022f4:	10a6d3c4 	addi	r2,r2,-25777
  8022f8:	10800003 	ldbu	r2,0(r2)
  8022fc:	10803fcc 	andi	r2,r2,255
  802300:	1080201c 	xori	r2,r2,128
  802304:	10bfe004 	addi	r2,r2,-128
  802308:	10000e1e 	bne	r2,zero,802344 <tick+0x1fa0>
  80230c:	00802074 	movhi	r2,129
  802310:	10a6e984 	addi	r2,r2,-25690
  802314:	10800003 	ldbu	r2,0(r2)
  802318:	10803fcc 	andi	r2,r2,255
  80231c:	1080201c 	xori	r2,r2,128
  802320:	10bfe004 	addi	r2,r2,-128
  802324:	1000071e 	bne	r2,zero,802344 <tick+0x1fa0>
  802328:	00802074 	movhi	r2,129
  80232c:	10a6eec4 	addi	r2,r2,-25669
  802330:	10800003 	ldbu	r2,0(r2)
  802334:	10803fcc 	andi	r2,r2,255
  802338:	1080201c 	xori	r2,r2,128
  80233c:	10bfe004 	addi	r2,r2,-128
  802340:	10000226 	beq	r2,zero,80234c <tick+0x1fa8>
  802344:	00800044 	movi	r2,1
  802348:	00000106 	br	802350 <tick+0x1fac>
  80234c:	0005883a 	mov	r2,zero
  802350:	1007883a 	mov	r3,r2
  802354:	00802074 	movhi	r2,129
  802358:	10a6d784 	addi	r2,r2,-25762
  80235c:	10c00005 	stb	r3,0(r2)
      g77_e1 =(!((g4||g14||g22||g34||g43||g53||g61||g70||g28||g77_e1_fix)));
  802360:	00802074 	movhi	r2,129
  802364:	10a6c5c4 	addi	r2,r2,-25833
  802368:	10800003 	ldbu	r2,0(r2)
  80236c:	10803fcc 	andi	r2,r2,255
  802370:	1080201c 	xori	r2,r2,128
  802374:	10bfe004 	addi	r2,r2,-128
  802378:	1000411e 	bne	r2,zero,802480 <tick+0x20dc>
  80237c:	00802074 	movhi	r2,129
  802380:	10a6d944 	addi	r2,r2,-25755
  802384:	10800003 	ldbu	r2,0(r2)
  802388:	10803fcc 	andi	r2,r2,255
  80238c:	1080201c 	xori	r2,r2,128
  802390:	10bfe004 	addi	r2,r2,-128
  802394:	10003a1e 	bne	r2,zero,802480 <tick+0x20dc>
  802398:	00802074 	movhi	r2,129
  80239c:	10a6e904 	addi	r2,r2,-25692
  8023a0:	10800003 	ldbu	r2,0(r2)
  8023a4:	10803fcc 	andi	r2,r2,255
  8023a8:	1080201c 	xori	r2,r2,128
  8023ac:	10bfe004 	addi	r2,r2,-128
  8023b0:	1000331e 	bne	r2,zero,802480 <tick+0x20dc>
  8023b4:	00802074 	movhi	r2,129
  8023b8:	10a6d4c4 	addi	r2,r2,-25773
  8023bc:	10800003 	ldbu	r2,0(r2)
  8023c0:	10803fcc 	andi	r2,r2,255
  8023c4:	1080201c 	xori	r2,r2,128
  8023c8:	10bfe004 	addi	r2,r2,-128
  8023cc:	10002c1e 	bne	r2,zero,802480 <tick+0x20dc>
  8023d0:	00802074 	movhi	r2,129
  8023d4:	10a6dfc4 	addi	r2,r2,-25729
  8023d8:	10800003 	ldbu	r2,0(r2)
  8023dc:	10803fcc 	andi	r2,r2,255
  8023e0:	1080201c 	xori	r2,r2,128
  8023e4:	10bfe004 	addi	r2,r2,-128
  8023e8:	1000251e 	bne	r2,zero,802480 <tick+0x20dc>
  8023ec:	00802074 	movhi	r2,129
  8023f0:	10a6e284 	addi	r2,r2,-25718
  8023f4:	10800003 	ldbu	r2,0(r2)
  8023f8:	10803fcc 	andi	r2,r2,255
  8023fc:	1080201c 	xori	r2,r2,128
  802400:	10bfe004 	addi	r2,r2,-128
  802404:	10001e1e 	bne	r2,zero,802480 <tick+0x20dc>
  802408:	00802074 	movhi	r2,129
  80240c:	10a6cd04 	addi	r2,r2,-25804
  802410:	10800003 	ldbu	r2,0(r2)
  802414:	10803fcc 	andi	r2,r2,255
  802418:	1080201c 	xori	r2,r2,128
  80241c:	10bfe004 	addi	r2,r2,-128
  802420:	1000171e 	bne	r2,zero,802480 <tick+0x20dc>
  802424:	00802074 	movhi	r2,129
  802428:	10a6e344 	addi	r2,r2,-25715
  80242c:	10800003 	ldbu	r2,0(r2)
  802430:	10803fcc 	andi	r2,r2,255
  802434:	1080201c 	xori	r2,r2,128
  802438:	10bfe004 	addi	r2,r2,-128
  80243c:	1000101e 	bne	r2,zero,802480 <tick+0x20dc>
  802440:	00802074 	movhi	r2,129
  802444:	10a6e944 	addi	r2,r2,-25691
  802448:	10800003 	ldbu	r2,0(r2)
  80244c:	10803fcc 	andi	r2,r2,255
  802450:	1080201c 	xori	r2,r2,128
  802454:	10bfe004 	addi	r2,r2,-128
  802458:	1000091e 	bne	r2,zero,802480 <tick+0x20dc>
  80245c:	00802074 	movhi	r2,129
  802460:	10a6d784 	addi	r2,r2,-25762
  802464:	10800003 	ldbu	r2,0(r2)
  802468:	10803fcc 	andi	r2,r2,255
  80246c:	1080201c 	xori	r2,r2,128
  802470:	10bfe004 	addi	r2,r2,-128
  802474:	1000021e 	bne	r2,zero,802480 <tick+0x20dc>
  802478:	00800044 	movi	r2,1
  80247c:	00000106 	br	802484 <tick+0x20e0>
  802480:	0005883a 	mov	r2,zero
  802484:	1007883a 	mov	r3,r2
  802488:	00802074 	movhi	r2,129
  80248c:	10a6ef04 	addi	r2,r2,-25668
  802490:	10c00005 	stb	r3,0(r2)
      g81_e2 =(!(g80));
  802494:	00802074 	movhi	r2,129
  802498:	10a6d704 	addi	r2,r2,-25764
  80249c:	10800003 	ldbu	r2,0(r2)
  8024a0:	10803fcc 	andi	r2,r2,255
  8024a4:	1080201c 	xori	r2,r2,128
  8024a8:	10bfe004 	addi	r2,r2,-128
  8024ac:	1005003a 	cmpeq	r2,r2,zero
  8024b0:	1007883a 	mov	r3,r2
  8024b4:	00802074 	movhi	r2,129
  8024b8:	10a6de04 	addi	r2,r2,-25736
  8024bc:	10c00005 	stb	r3,0(r2)
   }
   PRE_g3 = g3;
  8024c0:	00802074 	movhi	r2,129
  8024c4:	10a6c744 	addi	r2,r2,-25827
  8024c8:	10c00003 	ldbu	r3,0(r2)
  8024cc:	00802074 	movhi	r2,129
  8024d0:	10a6cb04 	addi	r2,r2,-25812
  8024d4:	10c00005 	stb	r3,0(r2)
   PRE_g6 = g6;
  8024d8:	00802074 	movhi	r2,129
  8024dc:	10a6e3c4 	addi	r2,r2,-25713
  8024e0:	10c00003 	ldbu	r3,0(r2)
  8024e4:	00802074 	movhi	r2,129
  8024e8:	10a6db04 	addi	r2,r2,-25748
  8024ec:	10c00005 	stb	r3,0(r2)
   PRE_g13 = g13;
  8024f0:	00802074 	movhi	r2,129
  8024f4:	10a6e244 	addi	r2,r2,-25719
  8024f8:	10c00003 	ldbu	r3,0(r2)
  8024fc:	00802074 	movhi	r2,129
  802500:	10a6cb84 	addi	r2,r2,-25810
  802504:	10c00005 	stb	r3,0(r2)
   PRE_g15 = g15;
  802508:	00802074 	movhi	r2,129
  80250c:	10a6dd04 	addi	r2,r2,-25740
  802510:	10c00003 	ldbu	r3,0(r2)
  802514:	00802074 	movhi	r2,129
  802518:	10a6e644 	addi	r2,r2,-25703
  80251c:	10c00005 	stb	r3,0(r2)
   PRE_g21 = g21;
  802520:	00802074 	movhi	r2,129
  802524:	10a6d404 	addi	r2,r2,-25776
  802528:	10c00003 	ldbu	r3,0(r2)
  80252c:	00802074 	movhi	r2,129
  802530:	10a6e684 	addi	r2,r2,-25702
  802534:	10c00005 	stb	r3,0(r2)
   PRE_g25 = g25;
  802538:	00802074 	movhi	r2,129
  80253c:	10a6e7c4 	addi	r2,r2,-25697
  802540:	10c00003 	ldbu	r3,0(r2)
  802544:	00802074 	movhi	r2,129
  802548:	10a6d744 	addi	r2,r2,-25763
  80254c:	10c00005 	stb	r3,0(r2)
   PRE_g27 = g27;
  802550:	00802074 	movhi	r2,129
  802554:	10a6c704 	addi	r2,r2,-25828
  802558:	10c00003 	ldbu	r3,0(r2)
  80255c:	00802074 	movhi	r2,129
  802560:	10a6c7c4 	addi	r2,r2,-25825
  802564:	10c00005 	stb	r3,0(r2)
   PRE_g33 = g33;
  802568:	00802074 	movhi	r2,129
  80256c:	10a6db84 	addi	r2,r2,-25746
  802570:	10c00003 	ldbu	r3,0(r2)
  802574:	00802074 	movhi	r2,129
  802578:	10a6e4c4 	addi	r2,r2,-25709
  80257c:	10c00005 	stb	r3,0(r2)
   PRE_g36 = g36;
  802580:	00802074 	movhi	r2,129
  802584:	10a6e084 	addi	r2,r2,-25726
  802588:	10c00003 	ldbu	r3,0(r2)
  80258c:	00802074 	movhi	r2,129
  802590:	10a6d9c4 	addi	r2,r2,-25753
  802594:	10c00005 	stb	r3,0(r2)
   PRE_g42 = g42;
  802598:	00802074 	movhi	r2,129
  80259c:	10a6c884 	addi	r2,r2,-25822
  8025a0:	10c00003 	ldbu	r3,0(r2)
  8025a4:	00802074 	movhi	r2,129
  8025a8:	10a6d304 	addi	r2,r2,-25780
  8025ac:	10c00005 	stb	r3,0(r2)
   PRE_g45 = g45;
  8025b0:	00802074 	movhi	r2,129
  8025b4:	10a6eb04 	addi	r2,r2,-25684
  8025b8:	10c00003 	ldbu	r3,0(r2)
  8025bc:	00802074 	movhi	r2,129
  8025c0:	10a6eb84 	addi	r2,r2,-25682
  8025c4:	10c00005 	stb	r3,0(r2)
   PRE_g52 = g52;
  8025c8:	00802074 	movhi	r2,129
  8025cc:	10a6ce44 	addi	r2,r2,-25799
  8025d0:	10c00003 	ldbu	r3,0(r2)
  8025d4:	00802074 	movhi	r2,129
  8025d8:	10a6da84 	addi	r2,r2,-25750
  8025dc:	10c00005 	stb	r3,0(r2)
   PRE_g54 = g54;
  8025e0:	00802074 	movhi	r2,129
  8025e4:	10a6d804 	addi	r2,r2,-25760
  8025e8:	10c00003 	ldbu	r3,0(r2)
  8025ec:	00802074 	movhi	r2,129
  8025f0:	10a6dd84 	addi	r2,r2,-25738
  8025f4:	10c00005 	stb	r3,0(r2)
   PRE_g60 = g60;
  8025f8:	00802074 	movhi	r2,129
  8025fc:	10a6dec4 	addi	r2,r2,-25733
  802600:	10c00003 	ldbu	r3,0(r2)
  802604:	00802074 	movhi	r2,129
  802608:	10a6e1c4 	addi	r2,r2,-25721
  80260c:	10c00005 	stb	r3,0(r2)
   PRE_g63 = g63;
  802610:	00802074 	movhi	r2,129
  802614:	10a6de44 	addi	r2,r2,-25735
  802618:	10c00003 	ldbu	r3,0(r2)
  80261c:	00802074 	movhi	r2,129
  802620:	10a6c784 	addi	r2,r2,-25826
  802624:	10c00005 	stb	r3,0(r2)
   PRE_g69 = g69;
  802628:	00802074 	movhi	r2,129
  80262c:	10a6ee84 	addi	r2,r2,-25670
  802630:	10c00003 	ldbu	r3,0(r2)
  802634:	00802074 	movhi	r2,129
  802638:	10a6cdc4 	addi	r2,r2,-25801
  80263c:	10c00005 	stb	r3,0(r2)
   PRE_g72 = g72;
  802640:	00802074 	movhi	r2,129
  802644:	10a6e444 	addi	r2,r2,-25711
  802648:	10c00003 	ldbu	r3,0(r2)
  80264c:	00802074 	movhi	r2,129
  802650:	10a6cbc4 	addi	r2,r2,-25809
  802654:	10c00005 	stb	r3,0(r2)
   PRE_g79 = g79;
  802658:	00802074 	movhi	r2,129
  80265c:	10a6d484 	addi	r2,r2,-25774
  802660:	10c00003 	ldbu	r3,0(r2)
  802664:	00802074 	movhi	r2,129
  802668:	10a6d984 	addi	r2,r2,-25754
  80266c:	10c00005 	stb	r3,0(r2)
   _PRE_GO = _GO;
  802670:	00802074 	movhi	r2,129
  802674:	10a6dd44 	addi	r2,r2,-25739
  802678:	10800003 	ldbu	r2,0(r2)
  80267c:	10c03fcc 	andi	r3,r2,255
  802680:	18c0201c 	xori	r3,r3,128
  802684:	18ffe004 	addi	r3,r3,-128
  802688:	00802074 	movhi	r2,129
  80268c:	10a6ca04 	addi	r2,r2,-25816
  802690:	10c00015 	stw	r3,0(r2)
   return;
  802694:	0001883a 	nop
}
  802698:	e037883a 	mov	sp,fp
  80269c:	df000017 	ldw	fp,0(sp)
  8026a0:	dec00104 	addi	sp,sp,4
  8026a4:	f800283a 	ret

008026a8 <main>:

int main(){
  8026a8:	defffe04 	addi	sp,sp,-8
  8026ac:	dfc00115 	stw	ra,4(sp)
  8026b0:	df000015 	stw	fp,0(sp)
  8026b4:	d839883a 	mov	fp,sp
   reset();
  8026b8:	08002900 	call	800290 <reset>
   while(1){
	  VSense = !(IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE) & 1<<0);
  8026bc:	00804434 	movhi	r2,272
  8026c0:	10842804 	addi	r2,r2,4256
  8026c4:	10800037 	ldwio	r2,0(r2)
  8026c8:	1080004c 	andi	r2,r2,1
  8026cc:	1005003a 	cmpeq	r2,r2,zero
  8026d0:	1007883a 	mov	r3,r2
  8026d4:	00802074 	movhi	r2,129
  8026d8:	10a6dac4 	addi	r2,r2,-25749
  8026dc:	10c00005 	stb	r3,0(r2)
      ASense = !(IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE) & 1<<1);
  8026e0:	00804434 	movhi	r2,272
  8026e4:	10842804 	addi	r2,r2,4256
  8026e8:	10800037 	ldwio	r2,0(r2)
  8026ec:	1080008c 	andi	r2,r2,2
  8026f0:	1005003a 	cmpeq	r2,r2,zero
  8026f4:	1007883a 	mov	r3,r2
  8026f8:	00802074 	movhi	r2,129
  8026fc:	10a6d204 	addi	r2,r2,-25784
  802700:	10c00005 	stb	r3,0(r2)
   }
  802704:	003fed06 	br	8026bc <__alt_mem_onchip_mem+0xff7826bc>

00802708 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  802708:	defffc04 	addi	sp,sp,-16
  80270c:	df000315 	stw	fp,12(sp)
  802710:	df000304 	addi	fp,sp,12
  802714:	e13ffd15 	stw	r4,-12(fp)
  802718:	e17ffe15 	stw	r5,-8(fp)
  80271c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  802720:	e0fffe17 	ldw	r3,-8(fp)
  802724:	e0bffd17 	ldw	r2,-12(fp)
  802728:	18800c26 	beq	r3,r2,80275c <alt_load_section+0x54>
  {
    while( to != end )
  80272c:	00000806 	br	802750 <alt_load_section+0x48>
    {
      *to++ = *from++;
  802730:	e0bffe17 	ldw	r2,-8(fp)
  802734:	10c00104 	addi	r3,r2,4
  802738:	e0fffe15 	stw	r3,-8(fp)
  80273c:	e0fffd17 	ldw	r3,-12(fp)
  802740:	19000104 	addi	r4,r3,4
  802744:	e13ffd15 	stw	r4,-12(fp)
  802748:	18c00017 	ldw	r3,0(r3)
  80274c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  802750:	e0fffe17 	ldw	r3,-8(fp)
  802754:	e0bfff17 	ldw	r2,-4(fp)
  802758:	18bff51e 	bne	r3,r2,802730 <__alt_mem_onchip_mem+0xff782730>
    {
      *to++ = *from++;
    }
  }
}
  80275c:	0001883a 	nop
  802760:	e037883a 	mov	sp,fp
  802764:	df000017 	ldw	fp,0(sp)
  802768:	dec00104 	addi	sp,sp,4
  80276c:	f800283a 	ret

00802770 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  802770:	defffe04 	addi	sp,sp,-8
  802774:	dfc00115 	stw	ra,4(sp)
  802778:	df000015 	stw	fp,0(sp)
  80277c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  802780:	01802074 	movhi	r6,129
  802784:	31a0b404 	addi	r6,r6,-32048
  802788:	01402034 	movhi	r5,128
  80278c:	295aa304 	addi	r5,r5,27276
  802790:	01002074 	movhi	r4,129
  802794:	2120b404 	addi	r4,r4,-32048
  802798:	08027080 	call	802708 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80279c:	01802034 	movhi	r6,128
  8027a0:	31809104 	addi	r6,r6,580
  8027a4:	01402034 	movhi	r5,128
  8027a8:	29400804 	addi	r5,r5,32
  8027ac:	01002034 	movhi	r4,128
  8027b0:	21000804 	addi	r4,r4,32
  8027b4:	08027080 	call	802708 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  8027b8:	01802034 	movhi	r6,128
  8027bc:	319aa304 	addi	r6,r6,27276
  8027c0:	01402034 	movhi	r5,128
  8027c4:	2959f104 	addi	r5,r5,26564
  8027c8:	01002034 	movhi	r4,128
  8027cc:	2119f104 	addi	r4,r4,26564
  8027d0:	08027080 	call	802708 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  8027d4:	0804f5c0 	call	804f5c <alt_dcache_flush_all>
  alt_icache_flush_all();
  8027d8:	08051840 	call	805184 <alt_icache_flush_all>
}
  8027dc:	0001883a 	nop
  8027e0:	e037883a 	mov	sp,fp
  8027e4:	dfc00117 	ldw	ra,4(sp)
  8027e8:	df000017 	ldw	fp,0(sp)
  8027ec:	dec00204 	addi	sp,sp,8
  8027f0:	f800283a 	ret

008027f4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  8027f4:	defffd04 	addi	sp,sp,-12
  8027f8:	dfc00215 	stw	ra,8(sp)
  8027fc:	df000115 	stw	fp,4(sp)
  802800:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  802804:	0009883a 	mov	r4,zero
  802808:	08028a80 	call	8028a8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  80280c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  802810:	08028e00 	call	8028e0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  802814:	01802034 	movhi	r6,128
  802818:	3199f104 	addi	r6,r6,26564
  80281c:	01402034 	movhi	r5,128
  802820:	2959f104 	addi	r5,r5,26564
  802824:	01002034 	movhi	r4,128
  802828:	2119f104 	addi	r4,r4,26564
  80282c:	080554c0 	call	80554c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  802830:	08050c40 	call	8050c4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  802834:	01002034 	movhi	r4,128
  802838:	21144904 	addi	r4,r4,20772
  80283c:	0805f740 	call	805f74 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  802840:	d0a64917 	ldw	r2,-26332(gp)
  802844:	d0e64a17 	ldw	r3,-26328(gp)
  802848:	d1264b17 	ldw	r4,-26324(gp)
  80284c:	200d883a 	mov	r6,r4
  802850:	180b883a 	mov	r5,r3
  802854:	1009883a 	mov	r4,r2
  802858:	08026a80 	call	8026a8 <main>
  80285c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  802860:	01000044 	movi	r4,1
  802864:	0804e8c0 	call	804e8c <close>
  exit (result);
  802868:	e13fff17 	ldw	r4,-4(fp)
  80286c:	0805f880 	call	805f88 <exit>

00802870 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  802870:	defffd04 	addi	sp,sp,-12
  802874:	dfc00215 	stw	ra,8(sp)
  802878:	df000115 	stw	fp,4(sp)
  80287c:	df000104 	addi	fp,sp,4
  802880:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  802884:	01402074 	movhi	r5,129
  802888:	2960aa04 	addi	r5,r5,-32088
  80288c:	e13fff17 	ldw	r4,-4(fp)
  802890:	08050200 	call	805020 <alt_dev_llist_insert>
}
  802894:	e037883a 	mov	sp,fp
  802898:	dfc00117 	ldw	ra,4(sp)
  80289c:	df000017 	ldw	fp,0(sp)
  8028a0:	dec00204 	addi	sp,sp,8
  8028a4:	f800283a 	ret

008028a8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  8028a8:	defffd04 	addi	sp,sp,-12
  8028ac:	dfc00215 	stw	ra,8(sp)
  8028b0:	df000115 	stw	fp,4(sp)
  8028b4:	df000104 	addi	fp,sp,4
  8028b8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  8028bc:	0805a740 	call	805a74 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  8028c0:	00800044 	movi	r2,1
  8028c4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  8028c8:	0001883a 	nop
  8028cc:	e037883a 	mov	sp,fp
  8028d0:	dfc00117 	ldw	ra,4(sp)
  8028d4:	df000017 	ldw	fp,0(sp)
  8028d8:	dec00204 	addi	sp,sp,8
  8028dc:	f800283a 	ret

008028e0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  8028e0:	defffe04 	addi	sp,sp,-8
  8028e4:	dfc00115 	stw	ra,4(sp)
  8028e8:	df000015 	stw	fp,0(sp)
  8028ec:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER1, timer1);
  8028f0:	01c0fa04 	movi	r7,1000
  8028f4:	01800084 	movi	r6,2
  8028f8:	000b883a 	mov	r5,zero
  8028fc:	01004434 	movhi	r4,272
  802900:	21040804 	addi	r4,r4,4128
  802904:	08043700 	call	804370 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER2, timer2);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  802908:	01800044 	movi	r6,1
  80290c:	000b883a 	mov	r5,zero
  802910:	01002034 	movhi	r4,128
  802914:	211aad04 	addi	r4,r4,27316
  802918:	0802ae00 	call	802ae0 <altera_avalon_jtag_uart_init>
  80291c:	01002034 	movhi	r4,128
  802920:	211aa304 	addi	r4,r4,27276
  802924:	08028700 	call	802870 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
  802928:	01002034 	movhi	r4,128
  80292c:	211ec504 	addi	r4,r4,31508
  802930:	080415c0 	call	80415c <altera_avalon_lcd_16207_init>
  802934:	01002034 	movhi	r4,128
  802938:	211ebb04 	addi	r4,r4,31468
  80293c:	08028700 	call	802870 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( CPU_SYSID, cpu_sysid);
  802940:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART, uart);
  802944:	000d883a 	mov	r6,zero
  802948:	000b883a 	mov	r5,zero
  80294c:	01002034 	movhi	r4,128
  802950:	211f0d04 	addi	r4,r4,31796
  802954:	080450c0 	call	80450c <altera_avalon_uart_init>
  802958:	01002034 	movhi	r4,128
  80295c:	211f0304 	addi	r4,r4,31756
  802960:	08028700 	call	802870 <alt_dev_reg>
}
  802964:	0001883a 	nop
  802968:	e037883a 	mov	sp,fp
  80296c:	dfc00117 	ldw	ra,4(sp)
  802970:	df000017 	ldw	fp,0(sp)
  802974:	dec00204 	addi	sp,sp,8
  802978:	f800283a 	ret

0080297c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80297c:	defffa04 	addi	sp,sp,-24
  802980:	dfc00515 	stw	ra,20(sp)
  802984:	df000415 	stw	fp,16(sp)
  802988:	df000404 	addi	fp,sp,16
  80298c:	e13ffd15 	stw	r4,-12(fp)
  802990:	e17ffe15 	stw	r5,-8(fp)
  802994:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  802998:	e0bffd17 	ldw	r2,-12(fp)
  80299c:	10800017 	ldw	r2,0(r2)
  8029a0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  8029a4:	e0bffc17 	ldw	r2,-16(fp)
  8029a8:	10c00a04 	addi	r3,r2,40
  8029ac:	e0bffd17 	ldw	r2,-12(fp)
  8029b0:	10800217 	ldw	r2,8(r2)
  8029b4:	100f883a 	mov	r7,r2
  8029b8:	e1bfff17 	ldw	r6,-4(fp)
  8029bc:	e17ffe17 	ldw	r5,-8(fp)
  8029c0:	1809883a 	mov	r4,r3
  8029c4:	0802fb40 	call	802fb4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  8029c8:	e037883a 	mov	sp,fp
  8029cc:	dfc00117 	ldw	ra,4(sp)
  8029d0:	df000017 	ldw	fp,0(sp)
  8029d4:	dec00204 	addi	sp,sp,8
  8029d8:	f800283a 	ret

008029dc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  8029dc:	defffa04 	addi	sp,sp,-24
  8029e0:	dfc00515 	stw	ra,20(sp)
  8029e4:	df000415 	stw	fp,16(sp)
  8029e8:	df000404 	addi	fp,sp,16
  8029ec:	e13ffd15 	stw	r4,-12(fp)
  8029f0:	e17ffe15 	stw	r5,-8(fp)
  8029f4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8029f8:	e0bffd17 	ldw	r2,-12(fp)
  8029fc:	10800017 	ldw	r2,0(r2)
  802a00:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  802a04:	e0bffc17 	ldw	r2,-16(fp)
  802a08:	10c00a04 	addi	r3,r2,40
  802a0c:	e0bffd17 	ldw	r2,-12(fp)
  802a10:	10800217 	ldw	r2,8(r2)
  802a14:	100f883a 	mov	r7,r2
  802a18:	e1bfff17 	ldw	r6,-4(fp)
  802a1c:	e17ffe17 	ldw	r5,-8(fp)
  802a20:	1809883a 	mov	r4,r3
  802a24:	08031d00 	call	8031d0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  802a28:	e037883a 	mov	sp,fp
  802a2c:	dfc00117 	ldw	ra,4(sp)
  802a30:	df000017 	ldw	fp,0(sp)
  802a34:	dec00204 	addi	sp,sp,8
  802a38:	f800283a 	ret

00802a3c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  802a3c:	defffc04 	addi	sp,sp,-16
  802a40:	dfc00315 	stw	ra,12(sp)
  802a44:	df000215 	stw	fp,8(sp)
  802a48:	df000204 	addi	fp,sp,8
  802a4c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  802a50:	e0bfff17 	ldw	r2,-4(fp)
  802a54:	10800017 	ldw	r2,0(r2)
  802a58:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  802a5c:	e0bffe17 	ldw	r2,-8(fp)
  802a60:	10c00a04 	addi	r3,r2,40
  802a64:	e0bfff17 	ldw	r2,-4(fp)
  802a68:	10800217 	ldw	r2,8(r2)
  802a6c:	100b883a 	mov	r5,r2
  802a70:	1809883a 	mov	r4,r3
  802a74:	0802e5c0 	call	802e5c <altera_avalon_jtag_uart_close>
}
  802a78:	e037883a 	mov	sp,fp
  802a7c:	dfc00117 	ldw	ra,4(sp)
  802a80:	df000017 	ldw	fp,0(sp)
  802a84:	dec00204 	addi	sp,sp,8
  802a88:	f800283a 	ret

00802a8c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  802a8c:	defffa04 	addi	sp,sp,-24
  802a90:	dfc00515 	stw	ra,20(sp)
  802a94:	df000415 	stw	fp,16(sp)
  802a98:	df000404 	addi	fp,sp,16
  802a9c:	e13ffd15 	stw	r4,-12(fp)
  802aa0:	e17ffe15 	stw	r5,-8(fp)
  802aa4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  802aa8:	e0bffd17 	ldw	r2,-12(fp)
  802aac:	10800017 	ldw	r2,0(r2)
  802ab0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  802ab4:	e0bffc17 	ldw	r2,-16(fp)
  802ab8:	10800a04 	addi	r2,r2,40
  802abc:	e1bfff17 	ldw	r6,-4(fp)
  802ac0:	e17ffe17 	ldw	r5,-8(fp)
  802ac4:	1009883a 	mov	r4,r2
  802ac8:	0802ec40 	call	802ec4 <altera_avalon_jtag_uart_ioctl>
}
  802acc:	e037883a 	mov	sp,fp
  802ad0:	dfc00117 	ldw	ra,4(sp)
  802ad4:	df000017 	ldw	fp,0(sp)
  802ad8:	dec00204 	addi	sp,sp,8
  802adc:	f800283a 	ret

00802ae0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  802ae0:	defffa04 	addi	sp,sp,-24
  802ae4:	dfc00515 	stw	ra,20(sp)
  802ae8:	df000415 	stw	fp,16(sp)
  802aec:	df000404 	addi	fp,sp,16
  802af0:	e13ffd15 	stw	r4,-12(fp)
  802af4:	e17ffe15 	stw	r5,-8(fp)
  802af8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  802afc:	e0bffd17 	ldw	r2,-12(fp)
  802b00:	00c00044 	movi	r3,1
  802b04:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  802b08:	e0bffd17 	ldw	r2,-12(fp)
  802b0c:	10800017 	ldw	r2,0(r2)
  802b10:	10800104 	addi	r2,r2,4
  802b14:	1007883a 	mov	r3,r2
  802b18:	e0bffd17 	ldw	r2,-12(fp)
  802b1c:	10800817 	ldw	r2,32(r2)
  802b20:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  802b24:	e0bffe17 	ldw	r2,-8(fp)
  802b28:	e0ffff17 	ldw	r3,-4(fp)
  802b2c:	d8000015 	stw	zero,0(sp)
  802b30:	e1fffd17 	ldw	r7,-12(fp)
  802b34:	01802034 	movhi	r6,128
  802b38:	318aea04 	addi	r6,r6,11176
  802b3c:	180b883a 	mov	r5,r3
  802b40:	1009883a 	mov	r4,r2
  802b44:	08051b80 	call	8051b8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  802b48:	e0bffd17 	ldw	r2,-12(fp)
  802b4c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  802b50:	e0bffd17 	ldw	r2,-12(fp)
  802b54:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  802b58:	00802074 	movhi	r2,129
  802b5c:	10a6f404 	addi	r2,r2,-25648
  802b60:	10800017 	ldw	r2,0(r2)
  802b64:	e1fffd17 	ldw	r7,-12(fp)
  802b68:	01802034 	movhi	r6,128
  802b6c:	318b6d04 	addi	r6,r6,11700
  802b70:	100b883a 	mov	r5,r2
  802b74:	1809883a 	mov	r4,r3
  802b78:	0804cfc0 	call	804cfc <alt_alarm_start>
  802b7c:	1000040e 	bge	r2,zero,802b90 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  802b80:	e0fffd17 	ldw	r3,-12(fp)
  802b84:	00a00034 	movhi	r2,32768
  802b88:	10bfffc4 	addi	r2,r2,-1
  802b8c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  802b90:	0001883a 	nop
  802b94:	e037883a 	mov	sp,fp
  802b98:	dfc00117 	ldw	ra,4(sp)
  802b9c:	df000017 	ldw	fp,0(sp)
  802ba0:	dec00204 	addi	sp,sp,8
  802ba4:	f800283a 	ret

00802ba8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  802ba8:	defff804 	addi	sp,sp,-32
  802bac:	df000715 	stw	fp,28(sp)
  802bb0:	df000704 	addi	fp,sp,28
  802bb4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  802bb8:	e0bfff17 	ldw	r2,-4(fp)
  802bbc:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
  802bc0:	e0bffb17 	ldw	r2,-20(fp)
  802bc4:	10800017 	ldw	r2,0(r2)
  802bc8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  802bcc:	e0bffc17 	ldw	r2,-16(fp)
  802bd0:	10800104 	addi	r2,r2,4
  802bd4:	10800037 	ldwio	r2,0(r2)
  802bd8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  802bdc:	e0bffd17 	ldw	r2,-12(fp)
  802be0:	1080c00c 	andi	r2,r2,768
  802be4:	10006d26 	beq	r2,zero,802d9c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  802be8:	e0bffd17 	ldw	r2,-12(fp)
  802bec:	1080400c 	andi	r2,r2,256
  802bf0:	10003526 	beq	r2,zero,802cc8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  802bf4:	00800074 	movhi	r2,1
  802bf8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  802bfc:	e0bffb17 	ldw	r2,-20(fp)
  802c00:	10800a17 	ldw	r2,40(r2)
  802c04:	10800044 	addi	r2,r2,1
  802c08:	1081ffcc 	andi	r2,r2,2047
  802c0c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
  802c10:	e0bffb17 	ldw	r2,-20(fp)
  802c14:	10c00b17 	ldw	r3,44(r2)
  802c18:	e0bffe17 	ldw	r2,-8(fp)
  802c1c:	18801526 	beq	r3,r2,802c74 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  802c20:	e0bffc17 	ldw	r2,-16(fp)
  802c24:	10800037 	ldwio	r2,0(r2)
  802c28:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  802c2c:	e0bff917 	ldw	r2,-28(fp)
  802c30:	10a0000c 	andi	r2,r2,32768
  802c34:	10001126 	beq	r2,zero,802c7c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  802c38:	e0bffb17 	ldw	r2,-20(fp)
  802c3c:	10800a17 	ldw	r2,40(r2)
  802c40:	e0fff917 	ldw	r3,-28(fp)
  802c44:	1809883a 	mov	r4,r3
  802c48:	e0fffb17 	ldw	r3,-20(fp)
  802c4c:	1885883a 	add	r2,r3,r2
  802c50:	10800e04 	addi	r2,r2,56
  802c54:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  802c58:	e0bffb17 	ldw	r2,-20(fp)
  802c5c:	10800a17 	ldw	r2,40(r2)
  802c60:	10800044 	addi	r2,r2,1
  802c64:	10c1ffcc 	andi	r3,r2,2047
  802c68:	e0bffb17 	ldw	r2,-20(fp)
  802c6c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  802c70:	003fe206 	br	802bfc <__alt_mem_onchip_mem+0xff782bfc>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  802c74:	0001883a 	nop
  802c78:	00000106 	br	802c80 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  802c7c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  802c80:	e0bff917 	ldw	r2,-28(fp)
  802c84:	10bfffec 	andhi	r2,r2,65535
  802c88:	10000f26 	beq	r2,zero,802cc8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  802c8c:	e0bffb17 	ldw	r2,-20(fp)
  802c90:	10c00817 	ldw	r3,32(r2)
  802c94:	00bfff84 	movi	r2,-2
  802c98:	1886703a 	and	r3,r3,r2
  802c9c:	e0bffb17 	ldw	r2,-20(fp)
  802ca0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  802ca4:	e0bffc17 	ldw	r2,-16(fp)
  802ca8:	10800104 	addi	r2,r2,4
  802cac:	1007883a 	mov	r3,r2
  802cb0:	e0bffb17 	ldw	r2,-20(fp)
  802cb4:	10800817 	ldw	r2,32(r2)
  802cb8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  802cbc:	e0bffc17 	ldw	r2,-16(fp)
  802cc0:	10800104 	addi	r2,r2,4
  802cc4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  802cc8:	e0bffd17 	ldw	r2,-12(fp)
  802ccc:	1080800c 	andi	r2,r2,512
  802cd0:	103fbe26 	beq	r2,zero,802bcc <__alt_mem_onchip_mem+0xff782bcc>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  802cd4:	e0bffd17 	ldw	r2,-12(fp)
  802cd8:	1004d43a 	srli	r2,r2,16
  802cdc:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  802ce0:	00001406 	br	802d34 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  802ce4:	e0bffc17 	ldw	r2,-16(fp)
  802ce8:	e0fffb17 	ldw	r3,-20(fp)
  802cec:	18c00d17 	ldw	r3,52(r3)
  802cf0:	e13ffb17 	ldw	r4,-20(fp)
  802cf4:	20c7883a 	add	r3,r4,r3
  802cf8:	18c20e04 	addi	r3,r3,2104
  802cfc:	18c00003 	ldbu	r3,0(r3)
  802d00:	18c03fcc 	andi	r3,r3,255
  802d04:	18c0201c 	xori	r3,r3,128
  802d08:	18ffe004 	addi	r3,r3,-128
  802d0c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  802d10:	e0bffb17 	ldw	r2,-20(fp)
  802d14:	10800d17 	ldw	r2,52(r2)
  802d18:	10800044 	addi	r2,r2,1
  802d1c:	10c1ffcc 	andi	r3,r2,2047
  802d20:	e0bffb17 	ldw	r2,-20(fp)
  802d24:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  802d28:	e0bffa17 	ldw	r2,-24(fp)
  802d2c:	10bfffc4 	addi	r2,r2,-1
  802d30:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  802d34:	e0bffa17 	ldw	r2,-24(fp)
  802d38:	10000526 	beq	r2,zero,802d50 <altera_avalon_jtag_uart_irq+0x1a8>
  802d3c:	e0bffb17 	ldw	r2,-20(fp)
  802d40:	10c00d17 	ldw	r3,52(r2)
  802d44:	e0bffb17 	ldw	r2,-20(fp)
  802d48:	10800c17 	ldw	r2,48(r2)
  802d4c:	18bfe51e 	bne	r3,r2,802ce4 <__alt_mem_onchip_mem+0xff782ce4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  802d50:	e0bffa17 	ldw	r2,-24(fp)
  802d54:	103f9d26 	beq	r2,zero,802bcc <__alt_mem_onchip_mem+0xff782bcc>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  802d58:	e0bffb17 	ldw	r2,-20(fp)
  802d5c:	10c00817 	ldw	r3,32(r2)
  802d60:	00bfff44 	movi	r2,-3
  802d64:	1886703a 	and	r3,r3,r2
  802d68:	e0bffb17 	ldw	r2,-20(fp)
  802d6c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  802d70:	e0bffb17 	ldw	r2,-20(fp)
  802d74:	10800017 	ldw	r2,0(r2)
  802d78:	10800104 	addi	r2,r2,4
  802d7c:	1007883a 	mov	r3,r2
  802d80:	e0bffb17 	ldw	r2,-20(fp)
  802d84:	10800817 	ldw	r2,32(r2)
  802d88:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  802d8c:	e0bffc17 	ldw	r2,-16(fp)
  802d90:	10800104 	addi	r2,r2,4
  802d94:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  802d98:	003f8c06 	br	802bcc <__alt_mem_onchip_mem+0xff782bcc>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  802d9c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  802da0:	0001883a 	nop
  802da4:	e037883a 	mov	sp,fp
  802da8:	df000017 	ldw	fp,0(sp)
  802dac:	dec00104 	addi	sp,sp,4
  802db0:	f800283a 	ret

00802db4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  802db4:	defff804 	addi	sp,sp,-32
  802db8:	df000715 	stw	fp,28(sp)
  802dbc:	df000704 	addi	fp,sp,28
  802dc0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  802dc4:	e0bffb17 	ldw	r2,-20(fp)
  802dc8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  802dcc:	e0bff917 	ldw	r2,-28(fp)
  802dd0:	10800017 	ldw	r2,0(r2)
  802dd4:	10800104 	addi	r2,r2,4
  802dd8:	10800037 	ldwio	r2,0(r2)
  802ddc:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  802de0:	e0bffa17 	ldw	r2,-24(fp)
  802de4:	1081000c 	andi	r2,r2,1024
  802de8:	10000b26 	beq	r2,zero,802e18 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  802dec:	e0bff917 	ldw	r2,-28(fp)
  802df0:	10800017 	ldw	r2,0(r2)
  802df4:	10800104 	addi	r2,r2,4
  802df8:	1007883a 	mov	r3,r2
  802dfc:	e0bff917 	ldw	r2,-28(fp)
  802e00:	10800817 	ldw	r2,32(r2)
  802e04:	10810014 	ori	r2,r2,1024
  802e08:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  802e0c:	e0bff917 	ldw	r2,-28(fp)
  802e10:	10000915 	stw	zero,36(r2)
  802e14:	00000a06 	br	802e40 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  802e18:	e0bff917 	ldw	r2,-28(fp)
  802e1c:	10c00917 	ldw	r3,36(r2)
  802e20:	00a00034 	movhi	r2,32768
  802e24:	10bfff04 	addi	r2,r2,-4
  802e28:	10c00536 	bltu	r2,r3,802e40 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  802e2c:	e0bff917 	ldw	r2,-28(fp)
  802e30:	10800917 	ldw	r2,36(r2)
  802e34:	10c00044 	addi	r3,r2,1
  802e38:	e0bff917 	ldw	r2,-28(fp)
  802e3c:	10c00915 	stw	r3,36(r2)
  802e40:	00802074 	movhi	r2,129
  802e44:	10a6f404 	addi	r2,r2,-25648
  802e48:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  802e4c:	e037883a 	mov	sp,fp
  802e50:	df000017 	ldw	fp,0(sp)
  802e54:	dec00104 	addi	sp,sp,4
  802e58:	f800283a 	ret

00802e5c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  802e5c:	defffd04 	addi	sp,sp,-12
  802e60:	df000215 	stw	fp,8(sp)
  802e64:	df000204 	addi	fp,sp,8
  802e68:	e13ffe15 	stw	r4,-8(fp)
  802e6c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  802e70:	00000506 	br	802e88 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  802e74:	e0bfff17 	ldw	r2,-4(fp)
  802e78:	1090000c 	andi	r2,r2,16384
  802e7c:	10000226 	beq	r2,zero,802e88 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  802e80:	00bffd44 	movi	r2,-11
  802e84:	00000b06 	br	802eb4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  802e88:	e0bffe17 	ldw	r2,-8(fp)
  802e8c:	10c00d17 	ldw	r3,52(r2)
  802e90:	e0bffe17 	ldw	r2,-8(fp)
  802e94:	10800c17 	ldw	r2,48(r2)
  802e98:	18800526 	beq	r3,r2,802eb0 <altera_avalon_jtag_uart_close+0x54>
  802e9c:	e0bffe17 	ldw	r2,-8(fp)
  802ea0:	10c00917 	ldw	r3,36(r2)
  802ea4:	e0bffe17 	ldw	r2,-8(fp)
  802ea8:	10800117 	ldw	r2,4(r2)
  802eac:	18bff136 	bltu	r3,r2,802e74 <__alt_mem_onchip_mem+0xff782e74>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  802eb0:	0005883a 	mov	r2,zero
}
  802eb4:	e037883a 	mov	sp,fp
  802eb8:	df000017 	ldw	fp,0(sp)
  802ebc:	dec00104 	addi	sp,sp,4
  802ec0:	f800283a 	ret

00802ec4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  802ec4:	defffa04 	addi	sp,sp,-24
  802ec8:	df000515 	stw	fp,20(sp)
  802ecc:	df000504 	addi	fp,sp,20
  802ed0:	e13ffd15 	stw	r4,-12(fp)
  802ed4:	e17ffe15 	stw	r5,-8(fp)
  802ed8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  802edc:	00bff9c4 	movi	r2,-25
  802ee0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  802ee4:	e0bffe17 	ldw	r2,-8(fp)
  802ee8:	10da8060 	cmpeqi	r3,r2,27137
  802eec:	1800031e 	bne	r3,zero,802efc <altera_avalon_jtag_uart_ioctl+0x38>
  802ef0:	109a80a0 	cmpeqi	r2,r2,27138
  802ef4:	1000181e 	bne	r2,zero,802f58 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  802ef8:	00002906 	br	802fa0 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  802efc:	e0bffd17 	ldw	r2,-12(fp)
  802f00:	10c00117 	ldw	r3,4(r2)
  802f04:	00a00034 	movhi	r2,32768
  802f08:	10bfffc4 	addi	r2,r2,-1
  802f0c:	18802126 	beq	r3,r2,802f94 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  802f10:	e0bfff17 	ldw	r2,-4(fp)
  802f14:	10800017 	ldw	r2,0(r2)
  802f18:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  802f1c:	e0bffc17 	ldw	r2,-16(fp)
  802f20:	10800090 	cmplti	r2,r2,2
  802f24:	1000061e 	bne	r2,zero,802f40 <altera_avalon_jtag_uart_ioctl+0x7c>
  802f28:	e0fffc17 	ldw	r3,-16(fp)
  802f2c:	00a00034 	movhi	r2,32768
  802f30:	10bfffc4 	addi	r2,r2,-1
  802f34:	18800226 	beq	r3,r2,802f40 <altera_avalon_jtag_uart_ioctl+0x7c>
  802f38:	e0bffc17 	ldw	r2,-16(fp)
  802f3c:	00000206 	br	802f48 <altera_avalon_jtag_uart_ioctl+0x84>
  802f40:	00a00034 	movhi	r2,32768
  802f44:	10bfff84 	addi	r2,r2,-2
  802f48:	e0fffd17 	ldw	r3,-12(fp)
  802f4c:	18800115 	stw	r2,4(r3)
      rc = 0;
  802f50:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  802f54:	00000f06 	br	802f94 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  802f58:	e0bffd17 	ldw	r2,-12(fp)
  802f5c:	10c00117 	ldw	r3,4(r2)
  802f60:	00a00034 	movhi	r2,32768
  802f64:	10bfffc4 	addi	r2,r2,-1
  802f68:	18800c26 	beq	r3,r2,802f9c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  802f6c:	e0bffd17 	ldw	r2,-12(fp)
  802f70:	10c00917 	ldw	r3,36(r2)
  802f74:	e0bffd17 	ldw	r2,-12(fp)
  802f78:	10800117 	ldw	r2,4(r2)
  802f7c:	1885803a 	cmpltu	r2,r3,r2
  802f80:	10c03fcc 	andi	r3,r2,255
  802f84:	e0bfff17 	ldw	r2,-4(fp)
  802f88:	10c00015 	stw	r3,0(r2)
      rc = 0;
  802f8c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  802f90:	00000206 	br	802f9c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  802f94:	0001883a 	nop
  802f98:	00000106 	br	802fa0 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  802f9c:	0001883a 	nop

  default:
    break;
  }

  return rc;
  802fa0:	e0bffb17 	ldw	r2,-20(fp)
}
  802fa4:	e037883a 	mov	sp,fp
  802fa8:	df000017 	ldw	fp,0(sp)
  802fac:	dec00104 	addi	sp,sp,4
  802fb0:	f800283a 	ret

00802fb4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  802fb4:	defff304 	addi	sp,sp,-52
  802fb8:	dfc00c15 	stw	ra,48(sp)
  802fbc:	df000b15 	stw	fp,44(sp)
  802fc0:	df000b04 	addi	fp,sp,44
  802fc4:	e13ffc15 	stw	r4,-16(fp)
  802fc8:	e17ffd15 	stw	r5,-12(fp)
  802fcc:	e1bffe15 	stw	r6,-8(fp)
  802fd0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  802fd4:	e0bffd17 	ldw	r2,-12(fp)
  802fd8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  802fdc:	00004706 	br	8030fc <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  802fe0:	e0bffc17 	ldw	r2,-16(fp)
  802fe4:	10800a17 	ldw	r2,40(r2)
  802fe8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  802fec:	e0bffc17 	ldw	r2,-16(fp)
  802ff0:	10800b17 	ldw	r2,44(r2)
  802ff4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  802ff8:	e0fff717 	ldw	r3,-36(fp)
  802ffc:	e0bff817 	ldw	r2,-32(fp)
  803000:	18800536 	bltu	r3,r2,803018 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  803004:	e0fff717 	ldw	r3,-36(fp)
  803008:	e0bff817 	ldw	r2,-32(fp)
  80300c:	1885c83a 	sub	r2,r3,r2
  803010:	e0bff615 	stw	r2,-40(fp)
  803014:	00000406 	br	803028 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  803018:	00c20004 	movi	r3,2048
  80301c:	e0bff817 	ldw	r2,-32(fp)
  803020:	1885c83a 	sub	r2,r3,r2
  803024:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  803028:	e0bff617 	ldw	r2,-40(fp)
  80302c:	10001e26 	beq	r2,zero,8030a8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  803030:	e0fffe17 	ldw	r3,-8(fp)
  803034:	e0bff617 	ldw	r2,-40(fp)
  803038:	1880022e 	bgeu	r3,r2,803044 <altera_avalon_jtag_uart_read+0x90>
        n = space;
  80303c:	e0bffe17 	ldw	r2,-8(fp)
  803040:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  803044:	e0bffc17 	ldw	r2,-16(fp)
  803048:	10c00e04 	addi	r3,r2,56
  80304c:	e0bff817 	ldw	r2,-32(fp)
  803050:	1885883a 	add	r2,r3,r2
  803054:	e1bff617 	ldw	r6,-40(fp)
  803058:	100b883a 	mov	r5,r2
  80305c:	e13ff517 	ldw	r4,-44(fp)
  803060:	080603c0 	call	80603c <memcpy>
      ptr   += n;
  803064:	e0fff517 	ldw	r3,-44(fp)
  803068:	e0bff617 	ldw	r2,-40(fp)
  80306c:	1885883a 	add	r2,r3,r2
  803070:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  803074:	e0fffe17 	ldw	r3,-8(fp)
  803078:	e0bff617 	ldw	r2,-40(fp)
  80307c:	1885c83a 	sub	r2,r3,r2
  803080:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  803084:	e0fff817 	ldw	r3,-32(fp)
  803088:	e0bff617 	ldw	r2,-40(fp)
  80308c:	1885883a 	add	r2,r3,r2
  803090:	10c1ffcc 	andi	r3,r2,2047
  803094:	e0bffc17 	ldw	r2,-16(fp)
  803098:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  80309c:	e0bffe17 	ldw	r2,-8(fp)
  8030a0:	00bfcf16 	blt	zero,r2,802fe0 <__alt_mem_onchip_mem+0xff782fe0>
  8030a4:	00000106 	br	8030ac <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  8030a8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  8030ac:	e0fff517 	ldw	r3,-44(fp)
  8030b0:	e0bffd17 	ldw	r2,-12(fp)
  8030b4:	1880141e 	bne	r3,r2,803108 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  8030b8:	e0bfff17 	ldw	r2,-4(fp)
  8030bc:	1090000c 	andi	r2,r2,16384
  8030c0:	1000131e 	bne	r2,zero,803110 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  8030c4:	0001883a 	nop
  8030c8:	e0bffc17 	ldw	r2,-16(fp)
  8030cc:	10c00a17 	ldw	r3,40(r2)
  8030d0:	e0bff717 	ldw	r2,-36(fp)
  8030d4:	1880051e 	bne	r3,r2,8030ec <altera_avalon_jtag_uart_read+0x138>
  8030d8:	e0bffc17 	ldw	r2,-16(fp)
  8030dc:	10c00917 	ldw	r3,36(r2)
  8030e0:	e0bffc17 	ldw	r2,-16(fp)
  8030e4:	10800117 	ldw	r2,4(r2)
  8030e8:	18bff736 	bltu	r3,r2,8030c8 <__alt_mem_onchip_mem+0xff7830c8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  8030ec:	e0bffc17 	ldw	r2,-16(fp)
  8030f0:	10c00a17 	ldw	r3,40(r2)
  8030f4:	e0bff717 	ldw	r2,-36(fp)
  8030f8:	18800726 	beq	r3,r2,803118 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  8030fc:	e0bffe17 	ldw	r2,-8(fp)
  803100:	00bfb716 	blt	zero,r2,802fe0 <__alt_mem_onchip_mem+0xff782fe0>
  803104:	00000506 	br	80311c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  803108:	0001883a 	nop
  80310c:	00000306 	br	80311c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  803110:	0001883a 	nop
  803114:	00000106 	br	80311c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  803118:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  80311c:	e0fff517 	ldw	r3,-44(fp)
  803120:	e0bffd17 	ldw	r2,-12(fp)
  803124:	18801826 	beq	r3,r2,803188 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803128:	0005303a 	rdctl	r2,status
  80312c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803130:	e0fffb17 	ldw	r3,-20(fp)
  803134:	00bfff84 	movi	r2,-2
  803138:	1884703a 	and	r2,r3,r2
  80313c:	1001703a 	wrctl	status,r2
  
  return context;
  803140:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  803144:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  803148:	e0bffc17 	ldw	r2,-16(fp)
  80314c:	10800817 	ldw	r2,32(r2)
  803150:	10c00054 	ori	r3,r2,1
  803154:	e0bffc17 	ldw	r2,-16(fp)
  803158:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80315c:	e0bffc17 	ldw	r2,-16(fp)
  803160:	10800017 	ldw	r2,0(r2)
  803164:	10800104 	addi	r2,r2,4
  803168:	1007883a 	mov	r3,r2
  80316c:	e0bffc17 	ldw	r2,-16(fp)
  803170:	10800817 	ldw	r2,32(r2)
  803174:	18800035 	stwio	r2,0(r3)
  803178:	e0bffa17 	ldw	r2,-24(fp)
  80317c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803180:	e0bff917 	ldw	r2,-28(fp)
  803184:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  803188:	e0fff517 	ldw	r3,-44(fp)
  80318c:	e0bffd17 	ldw	r2,-12(fp)
  803190:	18800426 	beq	r3,r2,8031a4 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
  803194:	e0fff517 	ldw	r3,-44(fp)
  803198:	e0bffd17 	ldw	r2,-12(fp)
  80319c:	1885c83a 	sub	r2,r3,r2
  8031a0:	00000606 	br	8031bc <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
  8031a4:	e0bfff17 	ldw	r2,-4(fp)
  8031a8:	1090000c 	andi	r2,r2,16384
  8031ac:	10000226 	beq	r2,zero,8031b8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  8031b0:	00bffd44 	movi	r2,-11
  8031b4:	00000106 	br	8031bc <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
  8031b8:	00bffec4 	movi	r2,-5
}
  8031bc:	e037883a 	mov	sp,fp
  8031c0:	dfc00117 	ldw	ra,4(sp)
  8031c4:	df000017 	ldw	fp,0(sp)
  8031c8:	dec00204 	addi	sp,sp,8
  8031cc:	f800283a 	ret

008031d0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  8031d0:	defff304 	addi	sp,sp,-52
  8031d4:	dfc00c15 	stw	ra,48(sp)
  8031d8:	df000b15 	stw	fp,44(sp)
  8031dc:	df000b04 	addi	fp,sp,44
  8031e0:	e13ffc15 	stw	r4,-16(fp)
  8031e4:	e17ffd15 	stw	r5,-12(fp)
  8031e8:	e1bffe15 	stw	r6,-8(fp)
  8031ec:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  8031f0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  8031f4:	e0bffd17 	ldw	r2,-12(fp)
  8031f8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  8031fc:	00003706 	br	8032dc <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  803200:	e0bffc17 	ldw	r2,-16(fp)
  803204:	10800c17 	ldw	r2,48(r2)
  803208:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  80320c:	e0bffc17 	ldw	r2,-16(fp)
  803210:	10800d17 	ldw	r2,52(r2)
  803214:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  803218:	e0fff917 	ldw	r3,-28(fp)
  80321c:	e0bff517 	ldw	r2,-44(fp)
  803220:	1880062e 	bgeu	r3,r2,80323c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  803224:	e0fff517 	ldw	r3,-44(fp)
  803228:	e0bff917 	ldw	r2,-28(fp)
  80322c:	1885c83a 	sub	r2,r3,r2
  803230:	10bfffc4 	addi	r2,r2,-1
  803234:	e0bff615 	stw	r2,-40(fp)
  803238:	00000b06 	br	803268 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  80323c:	e0bff517 	ldw	r2,-44(fp)
  803240:	10000526 	beq	r2,zero,803258 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  803244:	00c20004 	movi	r3,2048
  803248:	e0bff917 	ldw	r2,-28(fp)
  80324c:	1885c83a 	sub	r2,r3,r2
  803250:	e0bff615 	stw	r2,-40(fp)
  803254:	00000406 	br	803268 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  803258:	00c1ffc4 	movi	r3,2047
  80325c:	e0bff917 	ldw	r2,-28(fp)
  803260:	1885c83a 	sub	r2,r3,r2
  803264:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  803268:	e0bff617 	ldw	r2,-40(fp)
  80326c:	10001e26 	beq	r2,zero,8032e8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  803270:	e0fffe17 	ldw	r3,-8(fp)
  803274:	e0bff617 	ldw	r2,-40(fp)
  803278:	1880022e 	bgeu	r3,r2,803284 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  80327c:	e0bffe17 	ldw	r2,-8(fp)
  803280:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  803284:	e0bffc17 	ldw	r2,-16(fp)
  803288:	10c20e04 	addi	r3,r2,2104
  80328c:	e0bff917 	ldw	r2,-28(fp)
  803290:	1885883a 	add	r2,r3,r2
  803294:	e1bff617 	ldw	r6,-40(fp)
  803298:	e17ffd17 	ldw	r5,-12(fp)
  80329c:	1009883a 	mov	r4,r2
  8032a0:	080603c0 	call	80603c <memcpy>
      ptr   += n;
  8032a4:	e0fffd17 	ldw	r3,-12(fp)
  8032a8:	e0bff617 	ldw	r2,-40(fp)
  8032ac:	1885883a 	add	r2,r3,r2
  8032b0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  8032b4:	e0fffe17 	ldw	r3,-8(fp)
  8032b8:	e0bff617 	ldw	r2,-40(fp)
  8032bc:	1885c83a 	sub	r2,r3,r2
  8032c0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8032c4:	e0fff917 	ldw	r3,-28(fp)
  8032c8:	e0bff617 	ldw	r2,-40(fp)
  8032cc:	1885883a 	add	r2,r3,r2
  8032d0:	10c1ffcc 	andi	r3,r2,2047
  8032d4:	e0bffc17 	ldw	r2,-16(fp)
  8032d8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  8032dc:	e0bffe17 	ldw	r2,-8(fp)
  8032e0:	00bfc716 	blt	zero,r2,803200 <__alt_mem_onchip_mem+0xff783200>
  8032e4:	00000106 	br	8032ec <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  8032e8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8032ec:	0005303a 	rdctl	r2,status
  8032f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8032f4:	e0fffb17 	ldw	r3,-20(fp)
  8032f8:	00bfff84 	movi	r2,-2
  8032fc:	1884703a 	and	r2,r3,r2
  803300:	1001703a 	wrctl	status,r2
  
  return context;
  803304:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  803308:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80330c:	e0bffc17 	ldw	r2,-16(fp)
  803310:	10800817 	ldw	r2,32(r2)
  803314:	10c00094 	ori	r3,r2,2
  803318:	e0bffc17 	ldw	r2,-16(fp)
  80331c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  803320:	e0bffc17 	ldw	r2,-16(fp)
  803324:	10800017 	ldw	r2,0(r2)
  803328:	10800104 	addi	r2,r2,4
  80332c:	1007883a 	mov	r3,r2
  803330:	e0bffc17 	ldw	r2,-16(fp)
  803334:	10800817 	ldw	r2,32(r2)
  803338:	18800035 	stwio	r2,0(r3)
  80333c:	e0bffa17 	ldw	r2,-24(fp)
  803340:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803344:	e0bff817 	ldw	r2,-32(fp)
  803348:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  80334c:	e0bffe17 	ldw	r2,-8(fp)
  803350:	0080100e 	bge	zero,r2,803394 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
  803354:	e0bfff17 	ldw	r2,-4(fp)
  803358:	1090000c 	andi	r2,r2,16384
  80335c:	1000101e 	bne	r2,zero,8033a0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  803360:	0001883a 	nop
  803364:	e0bffc17 	ldw	r2,-16(fp)
  803368:	10c00d17 	ldw	r3,52(r2)
  80336c:	e0bff517 	ldw	r2,-44(fp)
  803370:	1880051e 	bne	r3,r2,803388 <altera_avalon_jtag_uart_write+0x1b8>
  803374:	e0bffc17 	ldw	r2,-16(fp)
  803378:	10c00917 	ldw	r3,36(r2)
  80337c:	e0bffc17 	ldw	r2,-16(fp)
  803380:	10800117 	ldw	r2,4(r2)
  803384:	18bff736 	bltu	r3,r2,803364 <__alt_mem_onchip_mem+0xff783364>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  803388:	e0bffc17 	ldw	r2,-16(fp)
  80338c:	10800917 	ldw	r2,36(r2)
  803390:	1000051e 	bne	r2,zero,8033a8 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
  803394:	e0bffe17 	ldw	r2,-8(fp)
  803398:	00bfd016 	blt	zero,r2,8032dc <__alt_mem_onchip_mem+0xff7832dc>
  80339c:	00000306 	br	8033ac <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  8033a0:	0001883a 	nop
  8033a4:	00000106 	br	8033ac <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  8033a8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  8033ac:	e0fffd17 	ldw	r3,-12(fp)
  8033b0:	e0bff717 	ldw	r2,-36(fp)
  8033b4:	18800426 	beq	r3,r2,8033c8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
  8033b8:	e0fffd17 	ldw	r3,-12(fp)
  8033bc:	e0bff717 	ldw	r2,-36(fp)
  8033c0:	1885c83a 	sub	r2,r3,r2
  8033c4:	00000606 	br	8033e0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
  8033c8:	e0bfff17 	ldw	r2,-4(fp)
  8033cc:	1090000c 	andi	r2,r2,16384
  8033d0:	10000226 	beq	r2,zero,8033dc <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
  8033d4:	00bffd44 	movi	r2,-11
  8033d8:	00000106 	br	8033e0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  8033dc:	00bffec4 	movi	r2,-5
}
  8033e0:	e037883a 	mov	sp,fp
  8033e4:	dfc00117 	ldw	ra,4(sp)
  8033e8:	df000017 	ldw	fp,0(sp)
  8033ec:	dec00204 	addi	sp,sp,8
  8033f0:	f800283a 	ret

008033f4 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  8033f4:	defffa04 	addi	sp,sp,-24
  8033f8:	dfc00515 	stw	ra,20(sp)
  8033fc:	df000415 	stw	fp,16(sp)
  803400:	df000404 	addi	fp,sp,16
  803404:	e13ffe15 	stw	r4,-8(fp)
  803408:	2805883a 	mov	r2,r5
  80340c:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  803410:	e0bffe17 	ldw	r2,-8(fp)
  803414:	10800017 	ldw	r2,0(r2)
  803418:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  80341c:	008003f4 	movhi	r2,15
  803420:	10909004 	addi	r2,r2,16960
  803424:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  803428:	e0bffe17 	ldw	r2,-8(fp)
  80342c:	10800803 	ldbu	r2,32(r2)
  803430:	10803fcc 	andi	r2,r2,255
  803434:	1080201c 	xori	r2,r2,128
  803438:	10bfe004 	addi	r2,r2,-128
  80343c:	1000151e 	bne	r2,zero,803494 <lcd_write_command+0xa0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  803440:	00000906 	br	803468 <lcd_write_command+0x74>
    if (--i == 0)
  803444:	e0bffc17 	ldw	r2,-16(fp)
  803448:	10bfffc4 	addi	r2,r2,-1
  80344c:	e0bffc15 	stw	r2,-16(fp)
  803450:	e0bffc17 	ldw	r2,-16(fp)
  803454:	1000041e 	bne	r2,zero,803468 <lcd_write_command+0x74>
    {
      sp->broken = 1;
  803458:	e0bffe17 	ldw	r2,-8(fp)
  80345c:	00c00044 	movi	r3,1
  803460:	10c00805 	stb	r3,32(r2)
      return;
  803464:	00000c06 	br	803498 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  803468:	e0bffd17 	ldw	r2,-12(fp)
  80346c:	10800104 	addi	r2,r2,4
  803470:	10800037 	ldwio	r2,0(r2)
  803474:	1080200c 	andi	r2,r2,128
  803478:	103ff21e 	bne	r2,zero,803444 <__alt_mem_onchip_mem+0xff783444>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  80347c:	01001904 	movi	r4,100
  803480:	0805a440 	call	805a44 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  803484:	e0bffd17 	ldw	r2,-12(fp)
  803488:	e0ffff03 	ldbu	r3,-4(fp)
  80348c:	10c00035 	stwio	r3,0(r2)
  803490:	00000106 	br	803498 <lcd_write_command+0xa4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  803494:	0001883a 	nop
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
}
  803498:	e037883a 	mov	sp,fp
  80349c:	dfc00117 	ldw	ra,4(sp)
  8034a0:	df000017 	ldw	fp,0(sp)
  8034a4:	dec00204 	addi	sp,sp,8
  8034a8:	f800283a 	ret

008034ac <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  8034ac:	defffa04 	addi	sp,sp,-24
  8034b0:	dfc00515 	stw	ra,20(sp)
  8034b4:	df000415 	stw	fp,16(sp)
  8034b8:	df000404 	addi	fp,sp,16
  8034bc:	e13ffe15 	stw	r4,-8(fp)
  8034c0:	2805883a 	mov	r2,r5
  8034c4:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  8034c8:	e0bffe17 	ldw	r2,-8(fp)
  8034cc:	10800017 	ldw	r2,0(r2)
  8034d0:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  8034d4:	008003f4 	movhi	r2,15
  8034d8:	10909004 	addi	r2,r2,16960
  8034dc:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  8034e0:	e0bffe17 	ldw	r2,-8(fp)
  8034e4:	10800803 	ldbu	r2,32(r2)
  8034e8:	10803fcc 	andi	r2,r2,255
  8034ec:	1080201c 	xori	r2,r2,128
  8034f0:	10bfe004 	addi	r2,r2,-128
  8034f4:	10001d1e 	bne	r2,zero,80356c <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  8034f8:	00000906 	br	803520 <lcd_write_data+0x74>
    if (--i == 0)
  8034fc:	e0bffc17 	ldw	r2,-16(fp)
  803500:	10bfffc4 	addi	r2,r2,-1
  803504:	e0bffc15 	stw	r2,-16(fp)
  803508:	e0bffc17 	ldw	r2,-16(fp)
  80350c:	1000041e 	bne	r2,zero,803520 <lcd_write_data+0x74>
    {
      sp->broken = 1;
  803510:	e0bffe17 	ldw	r2,-8(fp)
  803514:	00c00044 	movi	r3,1
  803518:	10c00805 	stb	r3,32(r2)
      return;
  80351c:	00001406 	br	803570 <lcd_write_data+0xc4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  803520:	e0bffd17 	ldw	r2,-12(fp)
  803524:	10800104 	addi	r2,r2,4
  803528:	10800037 	ldwio	r2,0(r2)
  80352c:	1080200c 	andi	r2,r2,128
  803530:	103ff21e 	bne	r2,zero,8034fc <__alt_mem_onchip_mem+0xff7834fc>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  803534:	01001904 	movi	r4,100
  803538:	0805a440 	call	805a44 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  80353c:	e0bffd17 	ldw	r2,-12(fp)
  803540:	10800204 	addi	r2,r2,8
  803544:	1007883a 	mov	r3,r2
  803548:	e0bfff03 	ldbu	r2,-4(fp)
  80354c:	18800035 	stwio	r2,0(r3)

  sp->address++;
  803550:	e0bffe17 	ldw	r2,-8(fp)
  803554:	108008c3 	ldbu	r2,35(r2)
  803558:	10800044 	addi	r2,r2,1
  80355c:	1007883a 	mov	r3,r2
  803560:	e0bffe17 	ldw	r2,-8(fp)
  803564:	10c008c5 	stb	r3,35(r2)
  803568:	00000106 	br	803570 <lcd_write_data+0xc4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  80356c:	0001883a 	nop
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);

  sp->address++;
}
  803570:	e037883a 	mov	sp,fp
  803574:	dfc00117 	ldw	ra,4(sp)
  803578:	df000017 	ldw	fp,0(sp)
  80357c:	dec00204 	addi	sp,sp,8
  803580:	f800283a 	ret

00803584 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  803584:	defffc04 	addi	sp,sp,-16
  803588:	dfc00315 	stw	ra,12(sp)
  80358c:	df000215 	stw	fp,8(sp)
  803590:	df000204 	addi	fp,sp,8
  803594:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  803598:	01400044 	movi	r5,1
  80359c:	e13fff17 	ldw	r4,-4(fp)
  8035a0:	08033f40 	call	8033f4 <lcd_write_command>

  sp->x = 0;
  8035a4:	e0bfff17 	ldw	r2,-4(fp)
  8035a8:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  8035ac:	e0bfff17 	ldw	r2,-4(fp)
  8035b0:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  8035b4:	e0bfff17 	ldw	r2,-4(fp)
  8035b8:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8035bc:	e03ffe15 	stw	zero,-8(fp)
  8035c0:	00001b06 	br	803630 <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  8035c4:	e0bffe17 	ldw	r2,-8(fp)
  8035c8:	108018e4 	muli	r2,r2,99
  8035cc:	10801004 	addi	r2,r2,64
  8035d0:	e0ffff17 	ldw	r3,-4(fp)
  8035d4:	1885883a 	add	r2,r3,r2
  8035d8:	01801444 	movi	r6,81
  8035dc:	01400804 	movi	r5,32
  8035e0:	1009883a 	mov	r4,r2
  8035e4:	08061840 	call	806184 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  8035e8:	e0bffe17 	ldw	r2,-8(fp)
  8035ec:	108018e4 	muli	r2,r2,99
  8035f0:	10800c04 	addi	r2,r2,48
  8035f4:	e0ffff17 	ldw	r3,-4(fp)
  8035f8:	1885883a 	add	r2,r3,r2
  8035fc:	01800404 	movi	r6,16
  803600:	01400804 	movi	r5,32
  803604:	1009883a 	mov	r4,r2
  803608:	08061840 	call	806184 <memset>
    sp->line[y].width = 0;
  80360c:	e0ffff17 	ldw	r3,-4(fp)
  803610:	e0bffe17 	ldw	r2,-8(fp)
  803614:	108018e4 	muli	r2,r2,99
  803618:	1885883a 	add	r2,r3,r2
  80361c:	10802444 	addi	r2,r2,145
  803620:	10000005 	stb	zero,0(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  803624:	e0bffe17 	ldw	r2,-8(fp)
  803628:	10800044 	addi	r2,r2,1
  80362c:	e0bffe15 	stw	r2,-8(fp)
  803630:	e0bffe17 	ldw	r2,-8(fp)
  803634:	10800090 	cmplti	r2,r2,2
  803638:	103fe21e 	bne	r2,zero,8035c4 <__alt_mem_onchip_mem+0xff7835c4>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  80363c:	0001883a 	nop
  803640:	e037883a 	mov	sp,fp
  803644:	dfc00117 	ldw	ra,4(sp)
  803648:	df000017 	ldw	fp,0(sp)
  80364c:	dec00204 	addi	sp,sp,8
  803650:	f800283a 	ret

00803654 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  803654:	defff704 	addi	sp,sp,-36
  803658:	dfc00815 	stw	ra,32(sp)
  80365c:	df000715 	stw	fp,28(sp)
  803660:	df000704 	addi	fp,sp,28
  803664:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  803668:	e0bfff17 	ldw	r2,-4(fp)
  80366c:	10800943 	ldbu	r2,37(r2)
  803670:	10803fcc 	andi	r2,r2,255
  803674:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  803678:	e03ff915 	stw	zero,-28(fp)
  80367c:	00006706 	br	80381c <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  803680:	e0ffff17 	ldw	r3,-4(fp)
  803684:	e0bff917 	ldw	r2,-28(fp)
  803688:	108018e4 	muli	r2,r2,99
  80368c:	1885883a 	add	r2,r3,r2
  803690:	10802444 	addi	r2,r2,145
  803694:	10800003 	ldbu	r2,0(r2)
  803698:	10803fcc 	andi	r2,r2,255
  80369c:	1080201c 	xori	r2,r2,128
  8036a0:	10bfe004 	addi	r2,r2,-128
  8036a4:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  8036a8:	e0ffff17 	ldw	r3,-4(fp)
  8036ac:	e0bff917 	ldw	r2,-28(fp)
  8036b0:	108018e4 	muli	r2,r2,99
  8036b4:	1885883a 	add	r2,r3,r2
  8036b8:	10802484 	addi	r2,r2,146
  8036bc:	10800003 	ldbu	r2,0(r2)
  8036c0:	10c03fcc 	andi	r3,r2,255
  8036c4:	e0bffc17 	ldw	r2,-16(fp)
  8036c8:	1885383a 	mul	r2,r3,r2
  8036cc:	1005d23a 	srai	r2,r2,8
  8036d0:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
  8036d4:	e0fffb17 	ldw	r3,-20(fp)
  8036d8:	e0bffd17 	ldw	r2,-12(fp)
  8036dc:	18800116 	blt	r3,r2,8036e4 <lcd_repaint_screen+0x90>
      offset = 0;
  8036e0:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  8036e4:	e03ffa15 	stw	zero,-24(fp)
  8036e8:	00004606 	br	803804 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  8036ec:	e0fffa17 	ldw	r3,-24(fp)
  8036f0:	e0bffb17 	ldw	r2,-20(fp)
  8036f4:	1885883a 	add	r2,r3,r2
  8036f8:	e17ffd17 	ldw	r5,-12(fp)
  8036fc:	1009883a 	mov	r4,r2
  803700:	08066600 	call	806660 <__modsi3>
  803704:	1009883a 	mov	r4,r2
  803708:	e0ffff17 	ldw	r3,-4(fp)
  80370c:	e0bff917 	ldw	r2,-28(fp)
  803710:	108018e4 	muli	r2,r2,99
  803714:	1885883a 	add	r2,r3,r2
  803718:	1105883a 	add	r2,r2,r4
  80371c:	10801004 	addi	r2,r2,64
  803720:	10800003 	ldbu	r2,0(r2)
  803724:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  803728:	e0ffff17 	ldw	r3,-4(fp)
  80372c:	e0bff917 	ldw	r2,-28(fp)
  803730:	108018e4 	muli	r2,r2,99
  803734:	1887883a 	add	r3,r3,r2
  803738:	e0bffa17 	ldw	r2,-24(fp)
  80373c:	1885883a 	add	r2,r3,r2
  803740:	10800c04 	addi	r2,r2,48
  803744:	10800003 	ldbu	r2,0(r2)
  803748:	10c03fcc 	andi	r3,r2,255
  80374c:	18c0201c 	xori	r3,r3,128
  803750:	18ffe004 	addi	r3,r3,-128
  803754:	e0bffe07 	ldb	r2,-8(fp)
  803758:	18802726 	beq	r3,r2,8037f8 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  80375c:	e0fff917 	ldw	r3,-28(fp)
  803760:	d0a00004 	addi	r2,gp,-32768
  803764:	1885883a 	add	r2,r3,r2
  803768:	10800003 	ldbu	r2,0(r2)
  80376c:	1007883a 	mov	r3,r2
  803770:	e0bffa17 	ldw	r2,-24(fp)
  803774:	1885883a 	add	r2,r3,r2
  803778:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
  80377c:	e0fffe43 	ldbu	r3,-7(fp)
  803780:	e0bfff17 	ldw	r2,-4(fp)
  803784:	108008c3 	ldbu	r2,35(r2)
  803788:	10803fcc 	andi	r2,r2,255
  80378c:	1080201c 	xori	r2,r2,128
  803790:	10bfe004 	addi	r2,r2,-128
  803794:	18800a26 	beq	r3,r2,8037c0 <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  803798:	e0fffe43 	ldbu	r3,-7(fp)
  80379c:	00bfe004 	movi	r2,-128
  8037a0:	1884b03a 	or	r2,r3,r2
  8037a4:	10803fcc 	andi	r2,r2,255
  8037a8:	100b883a 	mov	r5,r2
  8037ac:	e13fff17 	ldw	r4,-4(fp)
  8037b0:	08033f40 	call	8033f4 <lcd_write_command>
          sp->address = address;
  8037b4:	e0fffe43 	ldbu	r3,-7(fp)
  8037b8:	e0bfff17 	ldw	r2,-4(fp)
  8037bc:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  8037c0:	e0bffe03 	ldbu	r2,-8(fp)
  8037c4:	10803fcc 	andi	r2,r2,255
  8037c8:	100b883a 	mov	r5,r2
  8037cc:	e13fff17 	ldw	r4,-4(fp)
  8037d0:	08034ac0 	call	8034ac <lcd_write_data>
        sp->line[y].visible[x] = c;
  8037d4:	e0ffff17 	ldw	r3,-4(fp)
  8037d8:	e0bff917 	ldw	r2,-28(fp)
  8037dc:	108018e4 	muli	r2,r2,99
  8037e0:	1887883a 	add	r3,r3,r2
  8037e4:	e0bffa17 	ldw	r2,-24(fp)
  8037e8:	1885883a 	add	r2,r3,r2
  8037ec:	10800c04 	addi	r2,r2,48
  8037f0:	e0fffe03 	ldbu	r3,-8(fp)
  8037f4:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  8037f8:	e0bffa17 	ldw	r2,-24(fp)
  8037fc:	10800044 	addi	r2,r2,1
  803800:	e0bffa15 	stw	r2,-24(fp)
  803804:	e0bffa17 	ldw	r2,-24(fp)
  803808:	10800410 	cmplti	r2,r2,16
  80380c:	103fb71e 	bne	r2,zero,8036ec <__alt_mem_onchip_mem+0xff7836ec>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  803810:	e0bff917 	ldw	r2,-28(fp)
  803814:	10800044 	addi	r2,r2,1
  803818:	e0bff915 	stw	r2,-28(fp)
  80381c:	e0bff917 	ldw	r2,-28(fp)
  803820:	10800090 	cmplti	r2,r2,2
  803824:	103f961e 	bne	r2,zero,803680 <__alt_mem_onchip_mem+0xff783680>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  803828:	0001883a 	nop
  80382c:	e037883a 	mov	sp,fp
  803830:	dfc00117 	ldw	ra,4(sp)
  803834:	df000017 	ldw	fp,0(sp)
  803838:	dec00204 	addi	sp,sp,8
  80383c:	f800283a 	ret

00803840 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  803840:	defffc04 	addi	sp,sp,-16
  803844:	dfc00315 	stw	ra,12(sp)
  803848:	df000215 	stw	fp,8(sp)
  80384c:	df000204 	addi	fp,sp,8
  803850:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  803854:	e03ffe15 	stw	zero,-8(fp)
  803858:	00001d06 	br	8038d0 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  80385c:	e0bffe17 	ldw	r2,-8(fp)
  803860:	00800f16 	blt	zero,r2,8038a0 <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  803864:	e0bffe17 	ldw	r2,-8(fp)
  803868:	108018e4 	muli	r2,r2,99
  80386c:	10801004 	addi	r2,r2,64
  803870:	e0ffff17 	ldw	r3,-4(fp)
  803874:	1889883a 	add	r4,r3,r2
  803878:	e0bffe17 	ldw	r2,-8(fp)
  80387c:	10800044 	addi	r2,r2,1
  803880:	108018e4 	muli	r2,r2,99
  803884:	10801004 	addi	r2,r2,64
  803888:	e0ffff17 	ldw	r3,-4(fp)
  80388c:	1885883a 	add	r2,r3,r2
  803890:	01801404 	movi	r6,80
  803894:	100b883a 	mov	r5,r2
  803898:	080603c0 	call	80603c <memcpy>
  80389c:	00000906 	br	8038c4 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  8038a0:	e0bffe17 	ldw	r2,-8(fp)
  8038a4:	108018e4 	muli	r2,r2,99
  8038a8:	10801004 	addi	r2,r2,64
  8038ac:	e0ffff17 	ldw	r3,-4(fp)
  8038b0:	1885883a 	add	r2,r3,r2
  8038b4:	01801404 	movi	r6,80
  8038b8:	01400804 	movi	r5,32
  8038bc:	1009883a 	mov	r4,r2
  8038c0:	08061840 	call	806184 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8038c4:	e0bffe17 	ldw	r2,-8(fp)
  8038c8:	10800044 	addi	r2,r2,1
  8038cc:	e0bffe15 	stw	r2,-8(fp)
  8038d0:	e0bffe17 	ldw	r2,-8(fp)
  8038d4:	10800090 	cmplti	r2,r2,2
  8038d8:	103fe01e 	bne	r2,zero,80385c <__alt_mem_onchip_mem+0xff78385c>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  8038dc:	e0bfff17 	ldw	r2,-4(fp)
  8038e0:	10800883 	ldbu	r2,34(r2)
  8038e4:	10bfffc4 	addi	r2,r2,-1
  8038e8:	1007883a 	mov	r3,r2
  8038ec:	e0bfff17 	ldw	r2,-4(fp)
  8038f0:	10c00885 	stb	r3,34(r2)
}
  8038f4:	0001883a 	nop
  8038f8:	e037883a 	mov	sp,fp
  8038fc:	dfc00117 	ldw	ra,4(sp)
  803900:	df000017 	ldw	fp,0(sp)
  803904:	dec00204 	addi	sp,sp,8
  803908:	f800283a 	ret

0080390c <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  80390c:	defff904 	addi	sp,sp,-28
  803910:	dfc00615 	stw	ra,24(sp)
  803914:	df000515 	stw	fp,20(sp)
  803918:	df000504 	addi	fp,sp,20
  80391c:	e13ffe15 	stw	r4,-8(fp)
  803920:	2805883a 	mov	r2,r5
  803924:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
  803928:	e03ffb15 	stw	zero,-20(fp)
  80392c:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
  803930:	e0bffe17 	ldw	r2,-8(fp)
  803934:	10800a03 	ldbu	r2,40(r2)
  803938:	10803fcc 	andi	r2,r2,255
  80393c:	1080201c 	xori	r2,r2,128
  803940:	10bfe004 	addi	r2,r2,-128
  803944:	108016d8 	cmpnei	r2,r2,91
  803948:	1000451e 	bne	r2,zero,803a60 <lcd_handle_escape+0x154>
  {
    char * ptr = sp->escape+1;
  80394c:	e0bffe17 	ldw	r2,-8(fp)
  803950:	10800a04 	addi	r2,r2,40
  803954:	10800044 	addi	r2,r2,1
  803958:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
  80395c:	00000c06 	br	803990 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  803960:	e0bffb17 	ldw	r2,-20(fp)
  803964:	10c002a4 	muli	r3,r2,10
  803968:	e0bffd17 	ldw	r2,-12(fp)
  80396c:	11000044 	addi	r4,r2,1
  803970:	e13ffd15 	stw	r4,-12(fp)
  803974:	10800003 	ldbu	r2,0(r2)
  803978:	10803fcc 	andi	r2,r2,255
  80397c:	1080201c 	xori	r2,r2,128
  803980:	10bfe004 	addi	r2,r2,-128
  803984:	10bff404 	addi	r2,r2,-48
  803988:	1885883a 	add	r2,r3,r2
  80398c:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  803990:	00802074 	movhi	r2,129
  803994:	10a0b104 	addi	r2,r2,-32060
  803998:	10c00017 	ldw	r3,0(r2)
  80399c:	e0bffd17 	ldw	r2,-12(fp)
  8039a0:	10800003 	ldbu	r2,0(r2)
  8039a4:	10803fcc 	andi	r2,r2,255
  8039a8:	1080201c 	xori	r2,r2,128
  8039ac:	10bfe004 	addi	r2,r2,-128
  8039b0:	10800044 	addi	r2,r2,1
  8039b4:	1885883a 	add	r2,r3,r2
  8039b8:	10800003 	ldbu	r2,0(r2)
  8039bc:	10803fcc 	andi	r2,r2,255
  8039c0:	1080010c 	andi	r2,r2,4
  8039c4:	103fe61e 	bne	r2,zero,803960 <__alt_mem_onchip_mem+0xff783960>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  8039c8:	e0bffd17 	ldw	r2,-12(fp)
  8039cc:	10800003 	ldbu	r2,0(r2)
  8039d0:	10803fcc 	andi	r2,r2,255
  8039d4:	1080201c 	xori	r2,r2,128
  8039d8:	10bfe004 	addi	r2,r2,-128
  8039dc:	10800ed8 	cmpnei	r2,r2,59
  8039e0:	1000211e 	bne	r2,zero,803a68 <lcd_handle_escape+0x15c>
    {
      ptr++;
  8039e4:	e0bffd17 	ldw	r2,-12(fp)
  8039e8:	10800044 	addi	r2,r2,1
  8039ec:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
  8039f0:	00000c06 	br	803a24 <lcd_handle_escape+0x118>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  8039f4:	e0bffc17 	ldw	r2,-16(fp)
  8039f8:	10c002a4 	muli	r3,r2,10
  8039fc:	e0bffd17 	ldw	r2,-12(fp)
  803a00:	11000044 	addi	r4,r2,1
  803a04:	e13ffd15 	stw	r4,-12(fp)
  803a08:	10800003 	ldbu	r2,0(r2)
  803a0c:	10803fcc 	andi	r2,r2,255
  803a10:	1080201c 	xori	r2,r2,128
  803a14:	10bfe004 	addi	r2,r2,-128
  803a18:	10bff404 	addi	r2,r2,-48
  803a1c:	1885883a 	add	r2,r3,r2
  803a20:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  803a24:	00802074 	movhi	r2,129
  803a28:	10a0b104 	addi	r2,r2,-32060
  803a2c:	10c00017 	ldw	r3,0(r2)
  803a30:	e0bffd17 	ldw	r2,-12(fp)
  803a34:	10800003 	ldbu	r2,0(r2)
  803a38:	10803fcc 	andi	r2,r2,255
  803a3c:	1080201c 	xori	r2,r2,128
  803a40:	10bfe004 	addi	r2,r2,-128
  803a44:	10800044 	addi	r2,r2,1
  803a48:	1885883a 	add	r2,r3,r2
  803a4c:	10800003 	ldbu	r2,0(r2)
  803a50:	10803fcc 	andi	r2,r2,255
  803a54:	1080010c 	andi	r2,r2,4
  803a58:	103fe61e 	bne	r2,zero,8039f4 <__alt_mem_onchip_mem+0xff7839f4>
  803a5c:	00000206 	br	803a68 <lcd_handle_escape+0x15c>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  803a60:	00bfffc4 	movi	r2,-1
  803a64:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
  803a68:	e0bfff07 	ldb	r2,-4(fp)
  803a6c:	10c012a0 	cmpeqi	r3,r2,74
  803a70:	1800291e 	bne	r3,zero,803b18 <lcd_handle_escape+0x20c>
  803a74:	10c012c8 	cmpgei	r3,r2,75
  803a78:	1800031e 	bne	r3,zero,803a88 <lcd_handle_escape+0x17c>
  803a7c:	10801220 	cmpeqi	r2,r2,72
  803a80:	1000061e 	bne	r2,zero,803a9c <lcd_handle_escape+0x190>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  803a84:	00004a06 	br	803bb0 <lcd_handle_escape+0x2a4>
    }
  }
  else
    parm1 = -1;

  switch (c)
  803a88:	10c012e0 	cmpeqi	r3,r2,75
  803a8c:	1800281e 	bne	r3,zero,803b30 <lcd_handle_escape+0x224>
  803a90:	108019a0 	cmpeqi	r2,r2,102
  803a94:	1000011e 	bne	r2,zero,803a9c <lcd_handle_escape+0x190>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  803a98:	00004506 	br	803bb0 <lcd_handle_escape+0x2a4>

  switch (c)
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  803a9c:	e0bffc17 	ldw	r2,-16(fp)
  803aa0:	0080050e 	bge	zero,r2,803ab8 <lcd_handle_escape+0x1ac>
      sp->x = parm2 - 1;
  803aa4:	e0bffc17 	ldw	r2,-16(fp)
  803aa8:	10bfffc4 	addi	r2,r2,-1
  803aac:	1007883a 	mov	r3,r2
  803ab0:	e0bffe17 	ldw	r2,-8(fp)
  803ab4:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  803ab8:	e0bffb17 	ldw	r2,-20(fp)
  803abc:	0080370e 	bge	zero,r2,803b9c <lcd_handle_escape+0x290>
    {
      sp->y = parm1 - 1;
  803ac0:	e0bffb17 	ldw	r2,-20(fp)
  803ac4:	10bfffc4 	addi	r2,r2,-1
  803ac8:	1007883a 	mov	r3,r2
  803acc:	e0bffe17 	ldw	r2,-8(fp)
  803ad0:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  803ad4:	e0bffe17 	ldw	r2,-8(fp)
  803ad8:	10800883 	ldbu	r2,34(r2)
  803adc:	10803fcc 	andi	r2,r2,255
  803ae0:	10800170 	cmpltui	r2,r2,5
  803ae4:	1000061e 	bne	r2,zero,803b00 <lcd_handle_escape+0x1f4>
        sp->y = ALT_LCD_HEIGHT * 2;
  803ae8:	e0bffe17 	ldw	r2,-8(fp)
  803aec:	00c00104 	movi	r3,4
  803af0:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
  803af4:	00000206 	br	803b00 <lcd_handle_escape+0x1f4>
        lcd_scroll_up(sp);
  803af8:	e13ffe17 	ldw	r4,-8(fp)
  803afc:	08038400 	call	803840 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  803b00:	e0bffe17 	ldw	r2,-8(fp)
  803b04:	10800883 	ldbu	r2,34(r2)
  803b08:	10803fcc 	andi	r2,r2,255
  803b0c:	108000e8 	cmpgeui	r2,r2,3
  803b10:	103ff91e 	bne	r2,zero,803af8 <__alt_mem_onchip_mem+0xff783af8>
        lcd_scroll_up(sp);
    }
    break;
  803b14:	00002106 	br	803b9c <lcd_handle_escape+0x290>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  803b18:	e0bffb17 	ldw	r2,-20(fp)
  803b1c:	10800098 	cmpnei	r2,r2,2
  803b20:	1000201e 	bne	r2,zero,803ba4 <lcd_handle_escape+0x298>
      lcd_clear_screen(sp);
  803b24:	e13ffe17 	ldw	r4,-8(fp)
  803b28:	08035840 	call	803584 <lcd_clear_screen>
    break;
  803b2c:	00001d06 	br	803ba4 <lcd_handle_escape+0x298>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  803b30:	e0bffb17 	ldw	r2,-20(fp)
  803b34:	00801d16 	blt	zero,r2,803bac <lcd_handle_escape+0x2a0>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  803b38:	e0bffe17 	ldw	r2,-8(fp)
  803b3c:	10800843 	ldbu	r2,33(r2)
  803b40:	10803fcc 	andi	r2,r2,255
  803b44:	10801428 	cmpgeui	r2,r2,80
  803b48:	1000181e 	bne	r2,zero,803bac <lcd_handle_escape+0x2a0>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  803b4c:	e0bffe17 	ldw	r2,-8(fp)
  803b50:	10800883 	ldbu	r2,34(r2)
  803b54:	10803fcc 	andi	r2,r2,255
  803b58:	108018e4 	muli	r2,r2,99
  803b5c:	10801004 	addi	r2,r2,64
  803b60:	e0fffe17 	ldw	r3,-8(fp)
  803b64:	1887883a 	add	r3,r3,r2
  803b68:	e0bffe17 	ldw	r2,-8(fp)
  803b6c:	10800843 	ldbu	r2,33(r2)
  803b70:	10803fcc 	andi	r2,r2,255
  803b74:	1889883a 	add	r4,r3,r2
  803b78:	e0bffe17 	ldw	r2,-8(fp)
  803b7c:	10800843 	ldbu	r2,33(r2)
  803b80:	10803fcc 	andi	r2,r2,255
  803b84:	00c01404 	movi	r3,80
  803b88:	1885c83a 	sub	r2,r3,r2
  803b8c:	100d883a 	mov	r6,r2
  803b90:	01400804 	movi	r5,32
  803b94:	08061840 	call	806184 <memset>
    }
    break;
  803b98:	00000406 	br	803bac <lcd_handle_escape+0x2a0>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
  803b9c:	0001883a 	nop
  803ba0:	00000306 	br	803bb0 <lcd_handle_escape+0x2a4>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
  803ba4:	0001883a 	nop
  803ba8:	00000106 	br	803bb0 <lcd_handle_escape+0x2a4>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  803bac:	0001883a 	nop
  }
}
  803bb0:	0001883a 	nop
  803bb4:	e037883a 	mov	sp,fp
  803bb8:	dfc00117 	ldw	ra,4(sp)
  803bbc:	df000017 	ldw	fp,0(sp)
  803bc0:	dec00204 	addi	sp,sp,8
  803bc4:	f800283a 	ret

00803bc8 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  803bc8:	defff304 	addi	sp,sp,-52
  803bcc:	dfc00c15 	stw	ra,48(sp)
  803bd0:	df000b15 	stw	fp,44(sp)
  803bd4:	df000b04 	addi	fp,sp,44
  803bd8:	e13ffc15 	stw	r4,-16(fp)
  803bdc:	e17ffd15 	stw	r5,-12(fp)
  803be0:	e1bffe15 	stw	r6,-8(fp)
  803be4:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  803be8:	e0bffe17 	ldw	r2,-8(fp)
  803bec:	e0fffd17 	ldw	r3,-12(fp)
  803bf0:	1885883a 	add	r2,r3,r2
  803bf4:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  803bf8:	e0bffc17 	ldw	r2,-16(fp)
  803bfc:	00c00044 	movi	r3,1
  803c00:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
  803c04:	00009d06 	br	803e7c <altera_avalon_lcd_16207_write+0x2b4>
  {
    char c = *ptr;
  803c08:	e0bffd17 	ldw	r2,-12(fp)
  803c0c:	10800003 	ldbu	r2,0(r2)
  803c10:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
  803c14:	e0bffc17 	ldw	r2,-16(fp)
  803c18:	10800903 	ldbu	r2,36(r2)
  803c1c:	10803fcc 	andi	r2,r2,255
  803c20:	1080201c 	xori	r2,r2,128
  803c24:	10bfe004 	addi	r2,r2,-128
  803c28:	10003916 	blt	r2,zero,803d10 <altera_avalon_lcd_16207_write+0x148>
    {
      unsigned int esccount = sp->esccount;
  803c2c:	e0bffc17 	ldw	r2,-16(fp)
  803c30:	10800903 	ldbu	r2,36(r2)
  803c34:	10803fcc 	andi	r2,r2,255
  803c38:	1080201c 	xori	r2,r2,128
  803c3c:	10bfe004 	addi	r2,r2,-128
  803c40:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  803c44:	e0bffa17 	ldw	r2,-24(fp)
  803c48:	1000031e 	bne	r2,zero,803c58 <altera_avalon_lcd_16207_write+0x90>
  803c4c:	e0bff907 	ldb	r2,-28(fp)
  803c50:	108016d8 	cmpnei	r2,r2,91
  803c54:	10000f1e 	bne	r2,zero,803c94 <altera_avalon_lcd_16207_write+0xcc>
  803c58:	e0bffa17 	ldw	r2,-24(fp)
  803c5c:	10001a26 	beq	r2,zero,803cc8 <altera_avalon_lcd_16207_write+0x100>
          (esccount > 0 && !isdigit(c) && c != ';'))
  803c60:	00802074 	movhi	r2,129
  803c64:	10a0b104 	addi	r2,r2,-32060
  803c68:	10c00017 	ldw	r3,0(r2)
  803c6c:	e0bff907 	ldb	r2,-28(fp)
  803c70:	10800044 	addi	r2,r2,1
  803c74:	1885883a 	add	r2,r3,r2
  803c78:	10800003 	ldbu	r2,0(r2)
  803c7c:	10803fcc 	andi	r2,r2,255
  803c80:	1080010c 	andi	r2,r2,4
  803c84:	1000101e 	bne	r2,zero,803cc8 <altera_avalon_lcd_16207_write+0x100>
  803c88:	e0bff907 	ldb	r2,-28(fp)
  803c8c:	10800ee0 	cmpeqi	r2,r2,59
  803c90:	10000d1e 	bne	r2,zero,803cc8 <altera_avalon_lcd_16207_write+0x100>
      {
        sp->escape[esccount] = 0;
  803c94:	e0fffc17 	ldw	r3,-16(fp)
  803c98:	e0bffa17 	ldw	r2,-24(fp)
  803c9c:	1885883a 	add	r2,r3,r2
  803ca0:	10800a04 	addi	r2,r2,40
  803ca4:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  803ca8:	e0bff907 	ldb	r2,-28(fp)
  803cac:	100b883a 	mov	r5,r2
  803cb0:	e13ffc17 	ldw	r4,-16(fp)
  803cb4:	080390c0 	call	80390c <lcd_handle_escape>

        sp->esccount = -1;
  803cb8:	e0bffc17 	ldw	r2,-16(fp)
  803cbc:	00ffffc4 	movi	r3,-1
  803cc0:	10c00905 	stb	r3,36(r2)
  803cc4:	00006a06 	br	803e70 <altera_avalon_lcd_16207_write+0x2a8>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  803cc8:	e0bffc17 	ldw	r2,-16(fp)
  803ccc:	10800903 	ldbu	r2,36(r2)
  803cd0:	10803fcc 	andi	r2,r2,255
  803cd4:	108001e8 	cmpgeui	r2,r2,7
  803cd8:	1000651e 	bne	r2,zero,803e70 <altera_avalon_lcd_16207_write+0x2a8>
      {
        sp->escape[esccount] = c;
  803cdc:	e0fffc17 	ldw	r3,-16(fp)
  803ce0:	e0bffa17 	ldw	r2,-24(fp)
  803ce4:	1885883a 	add	r2,r3,r2
  803ce8:	10800a04 	addi	r2,r2,40
  803cec:	e0fff903 	ldbu	r3,-28(fp)
  803cf0:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
  803cf4:	e0bffc17 	ldw	r2,-16(fp)
  803cf8:	10800903 	ldbu	r2,36(r2)
  803cfc:	10800044 	addi	r2,r2,1
  803d00:	1007883a 	mov	r3,r2
  803d04:	e0bffc17 	ldw	r2,-16(fp)
  803d08:	10c00905 	stb	r3,36(r2)
  803d0c:	00005806 	br	803e70 <altera_avalon_lcd_16207_write+0x2a8>
      }
    }
    else if (c == 27) /* ESC */
  803d10:	e0bff907 	ldb	r2,-28(fp)
  803d14:	108006d8 	cmpnei	r2,r2,27
  803d18:	1000031e 	bne	r2,zero,803d28 <altera_avalon_lcd_16207_write+0x160>
    {
      sp->esccount = 0;
  803d1c:	e0bffc17 	ldw	r2,-16(fp)
  803d20:	10000905 	stb	zero,36(r2)
  803d24:	00005206 	br	803e70 <altera_avalon_lcd_16207_write+0x2a8>
    }
    else if (c == '\r')
  803d28:	e0bff907 	ldb	r2,-28(fp)
  803d2c:	10800358 	cmpnei	r2,r2,13
  803d30:	1000031e 	bne	r2,zero,803d40 <altera_avalon_lcd_16207_write+0x178>
    {
      sp->x = 0;
  803d34:	e0bffc17 	ldw	r2,-16(fp)
  803d38:	10000845 	stb	zero,33(r2)
  803d3c:	00004c06 	br	803e70 <altera_avalon_lcd_16207_write+0x2a8>
    }
    else if (c == '\n')
  803d40:	e0bff907 	ldb	r2,-28(fp)
  803d44:	10800298 	cmpnei	r2,r2,10
  803d48:	1000101e 	bne	r2,zero,803d8c <altera_avalon_lcd_16207_write+0x1c4>
    {
      sp->x = 0;
  803d4c:	e0bffc17 	ldw	r2,-16(fp)
  803d50:	10000845 	stb	zero,33(r2)
      sp->y++;
  803d54:	e0bffc17 	ldw	r2,-16(fp)
  803d58:	10800883 	ldbu	r2,34(r2)
  803d5c:	10800044 	addi	r2,r2,1
  803d60:	1007883a 	mov	r3,r2
  803d64:	e0bffc17 	ldw	r2,-16(fp)
  803d68:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  803d6c:	e0bffc17 	ldw	r2,-16(fp)
  803d70:	10800883 	ldbu	r2,34(r2)
  803d74:	10803fcc 	andi	r2,r2,255
  803d78:	108000f0 	cmpltui	r2,r2,3
  803d7c:	10003c1e 	bne	r2,zero,803e70 <altera_avalon_lcd_16207_write+0x2a8>
        lcd_scroll_up(sp);
  803d80:	e13ffc17 	ldw	r4,-16(fp)
  803d84:	08038400 	call	803840 <lcd_scroll_up>
  803d88:	00003906 	br	803e70 <altera_avalon_lcd_16207_write+0x2a8>
    }
    else if (c == '\b')
  803d8c:	e0bff907 	ldb	r2,-28(fp)
  803d90:	10800218 	cmpnei	r2,r2,8
  803d94:	10000b1e 	bne	r2,zero,803dc4 <altera_avalon_lcd_16207_write+0x1fc>
    {
      if (sp->x > 0)
  803d98:	e0bffc17 	ldw	r2,-16(fp)
  803d9c:	10800843 	ldbu	r2,33(r2)
  803da0:	10803fcc 	andi	r2,r2,255
  803da4:	10003226 	beq	r2,zero,803e70 <altera_avalon_lcd_16207_write+0x2a8>
        sp->x--;
  803da8:	e0bffc17 	ldw	r2,-16(fp)
  803dac:	10800843 	ldbu	r2,33(r2)
  803db0:	10bfffc4 	addi	r2,r2,-1
  803db4:	1007883a 	mov	r3,r2
  803db8:	e0bffc17 	ldw	r2,-16(fp)
  803dbc:	10c00845 	stb	r3,33(r2)
  803dc0:	00002b06 	br	803e70 <altera_avalon_lcd_16207_write+0x2a8>
    }
    else if (isprint(c))
  803dc4:	00802074 	movhi	r2,129
  803dc8:	10a0b104 	addi	r2,r2,-32060
  803dcc:	10c00017 	ldw	r3,0(r2)
  803dd0:	e0bff907 	ldb	r2,-28(fp)
  803dd4:	10800044 	addi	r2,r2,1
  803dd8:	1885883a 	add	r2,r3,r2
  803ddc:	10800003 	ldbu	r2,0(r2)
  803de0:	10803fcc 	andi	r2,r2,255
  803de4:	1080201c 	xori	r2,r2,128
  803de8:	10bfe004 	addi	r2,r2,-128
  803dec:	108025cc 	andi	r2,r2,151
  803df0:	10001f26 	beq	r2,zero,803e70 <altera_avalon_lcd_16207_write+0x2a8>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  803df4:	e0bffc17 	ldw	r2,-16(fp)
  803df8:	10800883 	ldbu	r2,34(r2)
  803dfc:	10803fcc 	andi	r2,r2,255
  803e00:	108000b0 	cmpltui	r2,r2,2
  803e04:	1000021e 	bne	r2,zero,803e10 <altera_avalon_lcd_16207_write+0x248>
        lcd_scroll_up(sp);
  803e08:	e13ffc17 	ldw	r4,-16(fp)
  803e0c:	08038400 	call	803840 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  803e10:	e0bffc17 	ldw	r2,-16(fp)
  803e14:	10800843 	ldbu	r2,33(r2)
  803e18:	10803fcc 	andi	r2,r2,255
  803e1c:	10801428 	cmpgeui	r2,r2,80
  803e20:	10000d1e 	bne	r2,zero,803e58 <altera_avalon_lcd_16207_write+0x290>
        sp->line[sp->y].data[sp->x] = c;
  803e24:	e0bffc17 	ldw	r2,-16(fp)
  803e28:	10800883 	ldbu	r2,34(r2)
  803e2c:	10c03fcc 	andi	r3,r2,255
  803e30:	e0bffc17 	ldw	r2,-16(fp)
  803e34:	10800843 	ldbu	r2,33(r2)
  803e38:	10803fcc 	andi	r2,r2,255
  803e3c:	e13ffc17 	ldw	r4,-16(fp)
  803e40:	18c018e4 	muli	r3,r3,99
  803e44:	20c7883a 	add	r3,r4,r3
  803e48:	1885883a 	add	r2,r3,r2
  803e4c:	10801004 	addi	r2,r2,64
  803e50:	e0fff903 	ldbu	r3,-28(fp)
  803e54:	10c00005 	stb	r3,0(r2)

      sp->x++;
  803e58:	e0bffc17 	ldw	r2,-16(fp)
  803e5c:	10800843 	ldbu	r2,33(r2)
  803e60:	10800044 	addi	r2,r2,1
  803e64:	1007883a 	mov	r3,r2
  803e68:	e0bffc17 	ldw	r2,-16(fp)
  803e6c:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  803e70:	e0bffd17 	ldw	r2,-12(fp)
  803e74:	10800044 	addi	r2,r2,1
  803e78:	e0bffd15 	stw	r2,-12(fp)
  803e7c:	e0fffd17 	ldw	r3,-12(fp)
  803e80:	e0bff817 	ldw	r2,-32(fp)
  803e84:	18bf6036 	bltu	r3,r2,803c08 <__alt_mem_onchip_mem+0xff783c08>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  803e88:	00800404 	movi	r2,16
  803e8c:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  803e90:	e03ff515 	stw	zero,-44(fp)
  803e94:	00003706 	br	803f74 <altera_avalon_lcd_16207_write+0x3ac>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  803e98:	00801404 	movi	r2,80
  803e9c:	e0bff715 	stw	r2,-36(fp)
  803ea0:	00001106 	br	803ee8 <altera_avalon_lcd_16207_write+0x320>
      if (sp->line[y].data[width-1] != ' ')
  803ea4:	e0bff717 	ldw	r2,-36(fp)
  803ea8:	10bfffc4 	addi	r2,r2,-1
  803eac:	e13ffc17 	ldw	r4,-16(fp)
  803eb0:	e0fff517 	ldw	r3,-44(fp)
  803eb4:	18c018e4 	muli	r3,r3,99
  803eb8:	20c7883a 	add	r3,r4,r3
  803ebc:	1885883a 	add	r2,r3,r2
  803ec0:	10801004 	addi	r2,r2,64
  803ec4:	10800003 	ldbu	r2,0(r2)
  803ec8:	10803fcc 	andi	r2,r2,255
  803ecc:	1080201c 	xori	r2,r2,128
  803ed0:	10bfe004 	addi	r2,r2,-128
  803ed4:	10800820 	cmpeqi	r2,r2,32
  803ed8:	10000626 	beq	r2,zero,803ef4 <altera_avalon_lcd_16207_write+0x32c>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  803edc:	e0bff717 	ldw	r2,-36(fp)
  803ee0:	10bfffc4 	addi	r2,r2,-1
  803ee4:	e0bff715 	stw	r2,-36(fp)
  803ee8:	e0bff717 	ldw	r2,-36(fp)
  803eec:	00bfed16 	blt	zero,r2,803ea4 <__alt_mem_onchip_mem+0xff783ea4>
  803ef0:	00000106 	br	803ef8 <altera_avalon_lcd_16207_write+0x330>
      if (sp->line[y].data[width-1] != ' ')
        break;
  803ef4:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  803ef8:	e0bff717 	ldw	r2,-36(fp)
  803efc:	10800448 	cmpgei	r2,r2,17
  803f00:	1000031e 	bne	r2,zero,803f10 <altera_avalon_lcd_16207_write+0x348>
      width = ALT_LCD_WIDTH;
  803f04:	00800404 	movi	r2,16
  803f08:	e0bff715 	stw	r2,-36(fp)
  803f0c:	00000306 	br	803f1c <altera_avalon_lcd_16207_write+0x354>
    else
      width++;
  803f10:	e0bff717 	ldw	r2,-36(fp)
  803f14:	10800044 	addi	r2,r2,1
  803f18:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
  803f1c:	e0bff717 	ldw	r2,-36(fp)
  803f20:	1009883a 	mov	r4,r2
  803f24:	e0fffc17 	ldw	r3,-16(fp)
  803f28:	e0bff517 	ldw	r2,-44(fp)
  803f2c:	108018e4 	muli	r2,r2,99
  803f30:	1885883a 	add	r2,r3,r2
  803f34:	10802444 	addi	r2,r2,145
  803f38:	11000005 	stb	r4,0(r2)
    if (widthmax < width)
  803f3c:	e0fff617 	ldw	r3,-40(fp)
  803f40:	e0bff717 	ldw	r2,-36(fp)
  803f44:	1880020e 	bge	r3,r2,803f50 <altera_avalon_lcd_16207_write+0x388>
      widthmax = width;
  803f48:	e0bff717 	ldw	r2,-36(fp)
  803f4c:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  803f50:	e0fffc17 	ldw	r3,-16(fp)
  803f54:	e0bff517 	ldw	r2,-44(fp)
  803f58:	108018e4 	muli	r2,r2,99
  803f5c:	1885883a 	add	r2,r3,r2
  803f60:	10802484 	addi	r2,r2,146
  803f64:	10000005 	stb	zero,0(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  803f68:	e0bff517 	ldw	r2,-44(fp)
  803f6c:	10800044 	addi	r2,r2,1
  803f70:	e0bff515 	stw	r2,-44(fp)
  803f74:	e0bff517 	ldw	r2,-44(fp)
  803f78:	10800090 	cmplti	r2,r2,2
  803f7c:	103fc61e 	bne	r2,zero,803e98 <__alt_mem_onchip_mem+0xff783e98>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  803f80:	e0bff617 	ldw	r2,-40(fp)
  803f84:	10800448 	cmpgei	r2,r2,17
  803f88:	1000031e 	bne	r2,zero,803f98 <altera_avalon_lcd_16207_write+0x3d0>
    sp->scrollmax = 0;
  803f8c:	e0bffc17 	ldw	r2,-16(fp)
  803f90:	10000985 	stb	zero,38(r2)
  803f94:	00002e06 	br	804050 <altera_avalon_lcd_16207_write+0x488>
  else
  {
    widthmax *= 2;
  803f98:	e0bff617 	ldw	r2,-40(fp)
  803f9c:	1085883a 	add	r2,r2,r2
  803fa0:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
  803fa4:	e0bff617 	ldw	r2,-40(fp)
  803fa8:	1007883a 	mov	r3,r2
  803fac:	e0bffc17 	ldw	r2,-16(fp)
  803fb0:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  803fb4:	e03ff515 	stw	zero,-44(fp)
  803fb8:	00002206 	br	804044 <altera_avalon_lcd_16207_write+0x47c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  803fbc:	e0fffc17 	ldw	r3,-16(fp)
  803fc0:	e0bff517 	ldw	r2,-44(fp)
  803fc4:	108018e4 	muli	r2,r2,99
  803fc8:	1885883a 	add	r2,r3,r2
  803fcc:	10802444 	addi	r2,r2,145
  803fd0:	10800003 	ldbu	r2,0(r2)
  803fd4:	10803fcc 	andi	r2,r2,255
  803fd8:	1080201c 	xori	r2,r2,128
  803fdc:	10bfe004 	addi	r2,r2,-128
  803fe0:	10800450 	cmplti	r2,r2,17
  803fe4:	1000141e 	bne	r2,zero,804038 <altera_avalon_lcd_16207_write+0x470>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  803fe8:	e0fffc17 	ldw	r3,-16(fp)
  803fec:	e0bff517 	ldw	r2,-44(fp)
  803ff0:	108018e4 	muli	r2,r2,99
  803ff4:	1885883a 	add	r2,r3,r2
  803ff8:	10802444 	addi	r2,r2,145
  803ffc:	10800003 	ldbu	r2,0(r2)
  804000:	10803fcc 	andi	r2,r2,255
  804004:	1080201c 	xori	r2,r2,128
  804008:	10bfe004 	addi	r2,r2,-128
  80400c:	1004923a 	slli	r2,r2,8
  804010:	e17ff617 	ldw	r5,-40(fp)
  804014:	1009883a 	mov	r4,r2
  804018:	08065dc0 	call	8065dc <__divsi3>
  80401c:	1009883a 	mov	r4,r2
  804020:	e0fffc17 	ldw	r3,-16(fp)
  804024:	e0bff517 	ldw	r2,-44(fp)
  804028:	108018e4 	muli	r2,r2,99
  80402c:	1885883a 	add	r2,r3,r2
  804030:	10802484 	addi	r2,r2,146
  804034:	11000005 	stb	r4,0(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  804038:	e0bff517 	ldw	r2,-44(fp)
  80403c:	10800044 	addi	r2,r2,1
  804040:	e0bff515 	stw	r2,-44(fp)
  804044:	e0bff517 	ldw	r2,-44(fp)
  804048:	10800090 	cmplti	r2,r2,2
  80404c:	103fdb1e 	bne	r2,zero,803fbc <__alt_mem_onchip_mem+0xff783fbc>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  804050:	e0bffc17 	ldw	r2,-16(fp)
  804054:	10800943 	ldbu	r2,37(r2)
  804058:	10803fcc 	andi	r2,r2,255
  80405c:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
  804060:	e13ffc17 	ldw	r4,-16(fp)
  804064:	08036540 	call	803654 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  804068:	e0bffc17 	ldw	r2,-16(fp)
  80406c:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  804070:	e0bffc17 	ldw	r2,-16(fp)
  804074:	10800943 	ldbu	r2,37(r2)
  804078:	10c03fcc 	andi	r3,r2,255
  80407c:	e0bffb17 	ldw	r2,-20(fp)
  804080:	18800426 	beq	r3,r2,804094 <altera_avalon_lcd_16207_write+0x4cc>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  804084:	e0bffc17 	ldw	r2,-16(fp)
  804088:	00c00044 	movi	r3,1
  80408c:	10c009c5 	stb	r3,39(r2)
  }
  804090:	003fef06 	br	804050 <__alt_mem_onchip_mem+0xff784050>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
  804094:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  804098:	e0bffe17 	ldw	r2,-8(fp)
}
  80409c:	e037883a 	mov	sp,fp
  8040a0:	dfc00117 	ldw	ra,4(sp)
  8040a4:	df000017 	ldw	fp,0(sp)
  8040a8:	dec00204 	addi	sp,sp,8
  8040ac:	f800283a 	ret

008040b0 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  8040b0:	defffc04 	addi	sp,sp,-16
  8040b4:	dfc00315 	stw	ra,12(sp)
  8040b8:	df000215 	stw	fp,8(sp)
  8040bc:	df000204 	addi	fp,sp,8
  8040c0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  8040c4:	e0bfff17 	ldw	r2,-4(fp)
  8040c8:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  8040cc:	e0bffe17 	ldw	r2,-8(fp)
  8040d0:	10800943 	ldbu	r2,37(r2)
  8040d4:	10803fcc 	andi	r2,r2,255
  8040d8:	10c00044 	addi	r3,r2,1
  8040dc:	e0bffe17 	ldw	r2,-8(fp)
  8040e0:	10800983 	ldbu	r2,38(r2)
  8040e4:	10803fcc 	andi	r2,r2,255
  8040e8:	18800316 	blt	r3,r2,8040f8 <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
  8040ec:	e0bffe17 	ldw	r2,-8(fp)
  8040f0:	10000945 	stb	zero,37(r2)
  8040f4:	00000606 	br	804110 <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
  8040f8:	e0bffe17 	ldw	r2,-8(fp)
  8040fc:	10800943 	ldbu	r2,37(r2)
  804100:	10800044 	addi	r2,r2,1
  804104:	1007883a 	mov	r3,r2
  804108:	e0bffe17 	ldw	r2,-8(fp)
  80410c:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  804110:	e0bffe17 	ldw	r2,-8(fp)
  804114:	10800983 	ldbu	r2,38(r2)
  804118:	10803fcc 	andi	r2,r2,255
  80411c:	10000826 	beq	r2,zero,804140 <alt_lcd_16207_timeout+0x90>
  804120:	e0bffe17 	ldw	r2,-8(fp)
  804124:	108009c3 	ldbu	r2,39(r2)
  804128:	10803fcc 	andi	r2,r2,255
  80412c:	1080201c 	xori	r2,r2,128
  804130:	10bfe004 	addi	r2,r2,-128
  804134:	1000021e 	bne	r2,zero,804140 <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
  804138:	e13ffe17 	ldw	r4,-8(fp)
  80413c:	08036540 	call	803654 <lcd_repaint_screen>

  return sp->period;
  804140:	e0bffe17 	ldw	r2,-8(fp)
  804144:	10800717 	ldw	r2,28(r2)
}
  804148:	e037883a 	mov	sp,fp
  80414c:	dfc00117 	ldw	ra,4(sp)
  804150:	df000017 	ldw	fp,0(sp)
  804154:	dec00204 	addi	sp,sp,8
  804158:	f800283a 	ret

0080415c <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  80415c:	defffc04 	addi	sp,sp,-16
  804160:	dfc00315 	stw	ra,12(sp)
  804164:	df000215 	stw	fp,8(sp)
  804168:	df000204 	addi	fp,sp,8
  80416c:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  804170:	e0bfff17 	ldw	r2,-4(fp)
  804174:	10800017 	ldw	r2,0(r2)
  804178:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  80417c:	e0bfff17 	ldw	r2,-4(fp)
  804180:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  804184:	010ea604 	movi	r4,15000
  804188:	0805a440 	call	805a44 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  80418c:	e0bffe17 	ldw	r2,-8(fp)
  804190:	00c00c04 	movi	r3,48
  804194:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  804198:	01040104 	movi	r4,4100
  80419c:	0805a440 	call	805a44 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  8041a0:	e0bffe17 	ldw	r2,-8(fp)
  8041a4:	00c00c04 	movi	r3,48
  8041a8:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  8041ac:	0100fa04 	movi	r4,1000
  8041b0:	0805a440 	call	805a44 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  8041b4:	e0bffe17 	ldw	r2,-8(fp)
  8041b8:	00c00c04 	movi	r3,48
  8041bc:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  8041c0:	01400e04 	movi	r5,56
  8041c4:	e13fff17 	ldw	r4,-4(fp)
  8041c8:	08033f40 	call	8033f4 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  8041cc:	01400204 	movi	r5,8
  8041d0:	e13fff17 	ldw	r4,-4(fp)
  8041d4:	08033f40 	call	8033f4 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  8041d8:	e13fff17 	ldw	r4,-4(fp)
  8041dc:	08035840 	call	803584 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  8041e0:	01400184 	movi	r5,6
  8041e4:	e13fff17 	ldw	r4,-4(fp)
  8041e8:	08033f40 	call	8033f4 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  8041ec:	01400304 	movi	r5,12
  8041f0:	e13fff17 	ldw	r4,-4(fp)
  8041f4:	08033f40 	call	8033f4 <lcd_write_command>

  sp->esccount = -1;
  8041f8:	e0bfff17 	ldw	r2,-4(fp)
  8041fc:	00ffffc4 	movi	r3,-1
  804200:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
  804204:	e0bfff17 	ldw	r2,-4(fp)
  804208:	10800a04 	addi	r2,r2,40
  80420c:	01800204 	movi	r6,8
  804210:	000b883a 	mov	r5,zero
  804214:	1009883a 	mov	r4,r2
  804218:	08061840 	call	806184 <memset>

  sp->scrollpos = 0;
  80421c:	e0bfff17 	ldw	r2,-4(fp)
  804220:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  804224:	e0bfff17 	ldw	r2,-4(fp)
  804228:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  80422c:	e0bfff17 	ldw	r2,-4(fp)
  804230:	100009c5 	stb	zero,39(r2)
  804234:	00802074 	movhi	r2,129
  804238:	10a6f404 	addi	r2,r2,-25648
  80423c:	10800017 	ldw	r2,0(r2)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  804240:	01400284 	movi	r5,10
  804244:	1009883a 	mov	r4,r2
  804248:	08066d40 	call	8066d4 <__udivsi3>
  80424c:	1007883a 	mov	r3,r2
  804250:	e0bfff17 	ldw	r2,-4(fp)
  804254:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  804258:	e0bfff17 	ldw	r2,-4(fp)
  80425c:	10c00104 	addi	r3,r2,4
  804260:	e0bfff17 	ldw	r2,-4(fp)
  804264:	10800717 	ldw	r2,28(r2)
  804268:	e1ffff17 	ldw	r7,-4(fp)
  80426c:	01802034 	movhi	r6,128
  804270:	31902c04 	addi	r6,r6,16560
  804274:	100b883a 	mov	r5,r2
  804278:	1809883a 	mov	r4,r3
  80427c:	0804cfc0 	call	804cfc <alt_alarm_start>
}
  804280:	0001883a 	nop
  804284:	e037883a 	mov	sp,fp
  804288:	dfc00117 	ldw	ra,4(sp)
  80428c:	df000017 	ldw	fp,0(sp)
  804290:	dec00204 	addi	sp,sp,8
  804294:	f800283a 	ret

00804298 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  804298:	defffa04 	addi	sp,sp,-24
  80429c:	dfc00515 	stw	ra,20(sp)
  8042a0:	df000415 	stw	fp,16(sp)
  8042a4:	df000404 	addi	fp,sp,16
  8042a8:	e13ffd15 	stw	r4,-12(fp)
  8042ac:	e17ffe15 	stw	r5,-8(fp)
  8042b0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  8042b4:	e0bffd17 	ldw	r2,-12(fp)
  8042b8:	10800017 	ldw	r2,0(r2)
  8042bc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  8042c0:	e0bffc17 	ldw	r2,-16(fp)
  8042c4:	10c00a04 	addi	r3,r2,40
  8042c8:	e0bffd17 	ldw	r2,-12(fp)
  8042cc:	10800217 	ldw	r2,8(r2)
  8042d0:	100f883a 	mov	r7,r2
  8042d4:	e1bfff17 	ldw	r6,-4(fp)
  8042d8:	e17ffe17 	ldw	r5,-8(fp)
  8042dc:	1809883a 	mov	r4,r3
  8042e0:	0803bc80 	call	803bc8 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  8042e4:	e037883a 	mov	sp,fp
  8042e8:	dfc00117 	ldw	ra,4(sp)
  8042ec:	df000017 	ldw	fp,0(sp)
  8042f0:	dec00204 	addi	sp,sp,8
  8042f4:	f800283a 	ret

008042f8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  8042f8:	defffa04 	addi	sp,sp,-24
  8042fc:	dfc00515 	stw	ra,20(sp)
  804300:	df000415 	stw	fp,16(sp)
  804304:	df000404 	addi	fp,sp,16
  804308:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  80430c:	0007883a 	mov	r3,zero
  804310:	e0bfff17 	ldw	r2,-4(fp)
  804314:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  804318:	e0bfff17 	ldw	r2,-4(fp)
  80431c:	10800104 	addi	r2,r2,4
  804320:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804324:	0005303a 	rdctl	r2,status
  804328:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80432c:	e0fffd17 	ldw	r3,-12(fp)
  804330:	00bfff84 	movi	r2,-2
  804334:	1884703a 	and	r2,r3,r2
  804338:	1001703a 	wrctl	status,r2
  
  return context;
  80433c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  804340:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  804344:	080593c0 	call	80593c <alt_tick>
  804348:	e0bffc17 	ldw	r2,-16(fp)
  80434c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804350:	e0bffe17 	ldw	r2,-8(fp)
  804354:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  804358:	0001883a 	nop
  80435c:	e037883a 	mov	sp,fp
  804360:	dfc00117 	ldw	ra,4(sp)
  804364:	df000017 	ldw	fp,0(sp)
  804368:	dec00204 	addi	sp,sp,8
  80436c:	f800283a 	ret

00804370 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  804370:	defff804 	addi	sp,sp,-32
  804374:	dfc00715 	stw	ra,28(sp)
  804378:	df000615 	stw	fp,24(sp)
  80437c:	df000604 	addi	fp,sp,24
  804380:	e13ffc15 	stw	r4,-16(fp)
  804384:	e17ffd15 	stw	r5,-12(fp)
  804388:	e1bffe15 	stw	r6,-8(fp)
  80438c:	e1ffff15 	stw	r7,-4(fp)
  804390:	e0bfff17 	ldw	r2,-4(fp)
  804394:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  804398:	00802074 	movhi	r2,129
  80439c:	10a6f404 	addi	r2,r2,-25648
  8043a0:	10800017 	ldw	r2,0(r2)
  8043a4:	1000041e 	bne	r2,zero,8043b8 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
  8043a8:	00802074 	movhi	r2,129
  8043ac:	10a6f404 	addi	r2,r2,-25648
  8043b0:	e0fffb17 	ldw	r3,-20(fp)
  8043b4:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  8043b8:	e0bffc17 	ldw	r2,-16(fp)
  8043bc:	10800104 	addi	r2,r2,4
  8043c0:	00c001c4 	movi	r3,7
  8043c4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  8043c8:	d8000015 	stw	zero,0(sp)
  8043cc:	e1fffc17 	ldw	r7,-16(fp)
  8043d0:	01802034 	movhi	r6,128
  8043d4:	3190be04 	addi	r6,r6,17144
  8043d8:	e17ffe17 	ldw	r5,-8(fp)
  8043dc:	e13ffd17 	ldw	r4,-12(fp)
  8043e0:	08051b80 	call	8051b8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  8043e4:	0001883a 	nop
  8043e8:	e037883a 	mov	sp,fp
  8043ec:	dfc00117 	ldw	ra,4(sp)
  8043f0:	df000017 	ldw	fp,0(sp)
  8043f4:	dec00204 	addi	sp,sp,8
  8043f8:	f800283a 	ret

008043fc <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  8043fc:	defffa04 	addi	sp,sp,-24
  804400:	dfc00515 	stw	ra,20(sp)
  804404:	df000415 	stw	fp,16(sp)
  804408:	df000404 	addi	fp,sp,16
  80440c:	e13ffd15 	stw	r4,-12(fp)
  804410:	e17ffe15 	stw	r5,-8(fp)
  804414:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  804418:	e0bffd17 	ldw	r2,-12(fp)
  80441c:	10800017 	ldw	r2,0(r2)
  804420:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  804424:	e0bffc17 	ldw	r2,-16(fp)
  804428:	10c00a04 	addi	r3,r2,40
  80442c:	e0bffd17 	ldw	r2,-12(fp)
  804430:	10800217 	ldw	r2,8(r2)
  804434:	100f883a 	mov	r7,r2
  804438:	e1bfff17 	ldw	r6,-4(fp)
  80443c:	e17ffe17 	ldw	r5,-8(fp)
  804440:	1809883a 	mov	r4,r3
  804444:	08049240 	call	804924 <altera_avalon_uart_read>
      fd->fd_flags);
}
  804448:	e037883a 	mov	sp,fp
  80444c:	dfc00117 	ldw	ra,4(sp)
  804450:	df000017 	ldw	fp,0(sp)
  804454:	dec00204 	addi	sp,sp,8
  804458:	f800283a 	ret

0080445c <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80445c:	defffa04 	addi	sp,sp,-24
  804460:	dfc00515 	stw	ra,20(sp)
  804464:	df000415 	stw	fp,16(sp)
  804468:	df000404 	addi	fp,sp,16
  80446c:	e13ffd15 	stw	r4,-12(fp)
  804470:	e17ffe15 	stw	r5,-8(fp)
  804474:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  804478:	e0bffd17 	ldw	r2,-12(fp)
  80447c:	10800017 	ldw	r2,0(r2)
  804480:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  804484:	e0bffc17 	ldw	r2,-16(fp)
  804488:	10c00a04 	addi	r3,r2,40
  80448c:	e0bffd17 	ldw	r2,-12(fp)
  804490:	10800217 	ldw	r2,8(r2)
  804494:	100f883a 	mov	r7,r2
  804498:	e1bfff17 	ldw	r6,-4(fp)
  80449c:	e17ffe17 	ldw	r5,-8(fp)
  8044a0:	1809883a 	mov	r4,r3
  8044a4:	0804b500 	call	804b50 <altera_avalon_uart_write>
      fd->fd_flags);
}
  8044a8:	e037883a 	mov	sp,fp
  8044ac:	dfc00117 	ldw	ra,4(sp)
  8044b0:	df000017 	ldw	fp,0(sp)
  8044b4:	dec00204 	addi	sp,sp,8
  8044b8:	f800283a 	ret

008044bc <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  8044bc:	defffc04 	addi	sp,sp,-16
  8044c0:	dfc00315 	stw	ra,12(sp)
  8044c4:	df000215 	stw	fp,8(sp)
  8044c8:	df000204 	addi	fp,sp,8
  8044cc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  8044d0:	e0bfff17 	ldw	r2,-4(fp)
  8044d4:	10800017 	ldw	r2,0(r2)
  8044d8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  8044dc:	e0bffe17 	ldw	r2,-8(fp)
  8044e0:	10c00a04 	addi	r3,r2,40
  8044e4:	e0bfff17 	ldw	r2,-4(fp)
  8044e8:	10800217 	ldw	r2,8(r2)
  8044ec:	100b883a 	mov	r5,r2
  8044f0:	1809883a 	mov	r4,r3
  8044f4:	08048800 	call	804880 <altera_avalon_uart_close>
}
  8044f8:	e037883a 	mov	sp,fp
  8044fc:	dfc00117 	ldw	ra,4(sp)
  804500:	df000017 	ldw	fp,0(sp)
  804504:	dec00204 	addi	sp,sp,8
  804508:	f800283a 	ret

0080450c <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  80450c:	defff804 	addi	sp,sp,-32
  804510:	dfc00715 	stw	ra,28(sp)
  804514:	df000615 	stw	fp,24(sp)
  804518:	df000604 	addi	fp,sp,24
  80451c:	e13ffd15 	stw	r4,-12(fp)
  804520:	e17ffe15 	stw	r5,-8(fp)
  804524:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  804528:	e0bffd17 	ldw	r2,-12(fp)
  80452c:	10800017 	ldw	r2,0(r2)
  804530:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  804534:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  804538:	1000041e 	bne	r2,zero,80454c <altera_avalon_uart_init+0x40>
  80453c:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  804540:	1000021e 	bne	r2,zero,80454c <altera_avalon_uart_init+0x40>
  804544:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  804548:	10000226 	beq	r2,zero,804554 <altera_avalon_uart_init+0x48>
  80454c:	00800044 	movi	r2,1
  804550:	00000106 	br	804558 <altera_avalon_uart_init+0x4c>
  804554:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  804558:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  80455c:	e0bffc17 	ldw	r2,-16(fp)
  804560:	10000f1e 	bne	r2,zero,8045a0 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  804564:	e0bffd17 	ldw	r2,-12(fp)
  804568:	00c32004 	movi	r3,3200
  80456c:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  804570:	e0bffb17 	ldw	r2,-20(fp)
  804574:	10800304 	addi	r2,r2,12
  804578:	e0fffd17 	ldw	r3,-12(fp)
  80457c:	18c00117 	ldw	r3,4(r3)
  804580:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  804584:	d8000015 	stw	zero,0(sp)
  804588:	e1fffd17 	ldw	r7,-12(fp)
  80458c:	01802034 	movhi	r6,128
  804590:	31916e04 	addi	r6,r6,17848
  804594:	e17fff17 	ldw	r5,-4(fp)
  804598:	e13ffe17 	ldw	r4,-8(fp)
  80459c:	08051b80 	call	8051b8 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  8045a0:	0001883a 	nop
  8045a4:	e037883a 	mov	sp,fp
  8045a8:	dfc00117 	ldw	ra,4(sp)
  8045ac:	df000017 	ldw	fp,0(sp)
  8045b0:	dec00204 	addi	sp,sp,8
  8045b4:	f800283a 	ret

008045b8 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  8045b8:	defffa04 	addi	sp,sp,-24
  8045bc:	dfc00515 	stw	ra,20(sp)
  8045c0:	df000415 	stw	fp,16(sp)
  8045c4:	df000404 	addi	fp,sp,16
  8045c8:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  8045cc:	e0bfff17 	ldw	r2,-4(fp)
  8045d0:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
  8045d4:	e0bffc17 	ldw	r2,-16(fp)
  8045d8:	10800017 	ldw	r2,0(r2)
  8045dc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  8045e0:	e0bffd17 	ldw	r2,-12(fp)
  8045e4:	10800204 	addi	r2,r2,8
  8045e8:	10800037 	ldwio	r2,0(r2)
  8045ec:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  8045f0:	e0bffd17 	ldw	r2,-12(fp)
  8045f4:	10800204 	addi	r2,r2,8
  8045f8:	0007883a 	mov	r3,zero
  8045fc:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  804600:	e0bffd17 	ldw	r2,-12(fp)
  804604:	10800204 	addi	r2,r2,8
  804608:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  80460c:	e0bffe17 	ldw	r2,-8(fp)
  804610:	1080200c 	andi	r2,r2,128
  804614:	10000326 	beq	r2,zero,804624 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  804618:	e17ffe17 	ldw	r5,-8(fp)
  80461c:	e13ffc17 	ldw	r4,-16(fp)
  804620:	08046540 	call	804654 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  804624:	e0bffe17 	ldw	r2,-8(fp)
  804628:	1081100c 	andi	r2,r2,1088
  80462c:	10000326 	beq	r2,zero,80463c <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  804630:	e17ffe17 	ldw	r5,-8(fp)
  804634:	e13ffc17 	ldw	r4,-16(fp)
  804638:	08047380 	call	804738 <altera_avalon_uart_txirq>
  }
  

}
  80463c:	0001883a 	nop
  804640:	e037883a 	mov	sp,fp
  804644:	dfc00117 	ldw	ra,4(sp)
  804648:	df000017 	ldw	fp,0(sp)
  80464c:	dec00204 	addi	sp,sp,8
  804650:	f800283a 	ret

00804654 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  804654:	defffc04 	addi	sp,sp,-16
  804658:	df000315 	stw	fp,12(sp)
  80465c:	df000304 	addi	fp,sp,12
  804660:	e13ffe15 	stw	r4,-8(fp)
  804664:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  804668:	e0bfff17 	ldw	r2,-4(fp)
  80466c:	108000cc 	andi	r2,r2,3
  804670:	10002c1e 	bne	r2,zero,804724 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  804674:	e0bffe17 	ldw	r2,-8(fp)
  804678:	10800317 	ldw	r2,12(r2)
  80467c:	e0bffe17 	ldw	r2,-8(fp)
  804680:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  804684:	e0bffe17 	ldw	r2,-8(fp)
  804688:	10800317 	ldw	r2,12(r2)
  80468c:	10800044 	addi	r2,r2,1
  804690:	10800fcc 	andi	r2,r2,63
  804694:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  804698:	e0bffe17 	ldw	r2,-8(fp)
  80469c:	10800317 	ldw	r2,12(r2)
  8046a0:	e0fffe17 	ldw	r3,-8(fp)
  8046a4:	18c00017 	ldw	r3,0(r3)
  8046a8:	18c00037 	ldwio	r3,0(r3)
  8046ac:	1809883a 	mov	r4,r3
  8046b0:	e0fffe17 	ldw	r3,-8(fp)
  8046b4:	1885883a 	add	r2,r3,r2
  8046b8:	10800704 	addi	r2,r2,28
  8046bc:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  8046c0:	e0bffe17 	ldw	r2,-8(fp)
  8046c4:	e0fffd17 	ldw	r3,-12(fp)
  8046c8:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  8046cc:	e0bffe17 	ldw	r2,-8(fp)
  8046d0:	10800317 	ldw	r2,12(r2)
  8046d4:	10800044 	addi	r2,r2,1
  8046d8:	10800fcc 	andi	r2,r2,63
  8046dc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  8046e0:	e0bffe17 	ldw	r2,-8(fp)
  8046e4:	10c00217 	ldw	r3,8(r2)
  8046e8:	e0bffd17 	ldw	r2,-12(fp)
  8046ec:	18800e1e 	bne	r3,r2,804728 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  8046f0:	e0bffe17 	ldw	r2,-8(fp)
  8046f4:	10c00117 	ldw	r3,4(r2)
  8046f8:	00bfdfc4 	movi	r2,-129
  8046fc:	1886703a 	and	r3,r3,r2
  804700:	e0bffe17 	ldw	r2,-8(fp)
  804704:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  804708:	e0bffe17 	ldw	r2,-8(fp)
  80470c:	10800017 	ldw	r2,0(r2)
  804710:	10800304 	addi	r2,r2,12
  804714:	e0fffe17 	ldw	r3,-8(fp)
  804718:	18c00117 	ldw	r3,4(r3)
  80471c:	10c00035 	stwio	r3,0(r2)
  804720:	00000106 	br	804728 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  804724:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
  804728:	e037883a 	mov	sp,fp
  80472c:	df000017 	ldw	fp,0(sp)
  804730:	dec00104 	addi	sp,sp,4
  804734:	f800283a 	ret

00804738 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  804738:	defffb04 	addi	sp,sp,-20
  80473c:	df000415 	stw	fp,16(sp)
  804740:	df000404 	addi	fp,sp,16
  804744:	e13ffc15 	stw	r4,-16(fp)
  804748:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  80474c:	e0bffc17 	ldw	r2,-16(fp)
  804750:	10c00417 	ldw	r3,16(r2)
  804754:	e0bffc17 	ldw	r2,-16(fp)
  804758:	10800517 	ldw	r2,20(r2)
  80475c:	18803226 	beq	r3,r2,804828 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  804760:	e0bffc17 	ldw	r2,-16(fp)
  804764:	10800617 	ldw	r2,24(r2)
  804768:	1080008c 	andi	r2,r2,2
  80476c:	10000326 	beq	r2,zero,80477c <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  804770:	e0bffd17 	ldw	r2,-12(fp)
  804774:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  804778:	10001d26 	beq	r2,zero,8047f0 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  80477c:	e0bffc17 	ldw	r2,-16(fp)
  804780:	10800417 	ldw	r2,16(r2)
  804784:	e0bffc17 	ldw	r2,-16(fp)
  804788:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  80478c:	e0bffc17 	ldw	r2,-16(fp)
  804790:	10800017 	ldw	r2,0(r2)
  804794:	10800104 	addi	r2,r2,4
  804798:	e0fffc17 	ldw	r3,-16(fp)
  80479c:	18c00417 	ldw	r3,16(r3)
  8047a0:	e13ffc17 	ldw	r4,-16(fp)
  8047a4:	20c7883a 	add	r3,r4,r3
  8047a8:	18c01704 	addi	r3,r3,92
  8047ac:	18c00003 	ldbu	r3,0(r3)
  8047b0:	18c03fcc 	andi	r3,r3,255
  8047b4:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  8047b8:	e0bffc17 	ldw	r2,-16(fp)
  8047bc:	10800417 	ldw	r2,16(r2)
  8047c0:	10800044 	addi	r2,r2,1
  8047c4:	e0fffc17 	ldw	r3,-16(fp)
  8047c8:	18800415 	stw	r2,16(r3)
  8047cc:	10c00fcc 	andi	r3,r2,63
  8047d0:	e0bffc17 	ldw	r2,-16(fp)
  8047d4:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  8047d8:	e0bffc17 	ldw	r2,-16(fp)
  8047dc:	10800117 	ldw	r2,4(r2)
  8047e0:	10c01014 	ori	r3,r2,64
  8047e4:	e0bffc17 	ldw	r2,-16(fp)
  8047e8:	10c00115 	stw	r3,4(r2)
  8047ec:	00000e06 	br	804828 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  8047f0:	e0bffc17 	ldw	r2,-16(fp)
  8047f4:	10800017 	ldw	r2,0(r2)
  8047f8:	10800204 	addi	r2,r2,8
  8047fc:	10800037 	ldwio	r2,0(r2)
  804800:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  804804:	e0bffd17 	ldw	r2,-12(fp)
  804808:	1082000c 	andi	r2,r2,2048
  80480c:	1000061e 	bne	r2,zero,804828 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  804810:	e0bffc17 	ldw	r2,-16(fp)
  804814:	10c00117 	ldw	r3,4(r2)
  804818:	00bfefc4 	movi	r2,-65
  80481c:	1886703a 	and	r3,r3,r2
  804820:	e0bffc17 	ldw	r2,-16(fp)
  804824:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  804828:	e0bffc17 	ldw	r2,-16(fp)
  80482c:	10c00417 	ldw	r3,16(r2)
  804830:	e0bffc17 	ldw	r2,-16(fp)
  804834:	10800517 	ldw	r2,20(r2)
  804838:	1880061e 	bne	r3,r2,804854 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80483c:	e0bffc17 	ldw	r2,-16(fp)
  804840:	10c00117 	ldw	r3,4(r2)
  804844:	00beefc4 	movi	r2,-1089
  804848:	1886703a 	and	r3,r3,r2
  80484c:	e0bffc17 	ldw	r2,-16(fp)
  804850:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  804854:	e0bffc17 	ldw	r2,-16(fp)
  804858:	10800017 	ldw	r2,0(r2)
  80485c:	10800304 	addi	r2,r2,12
  804860:	e0fffc17 	ldw	r3,-16(fp)
  804864:	18c00117 	ldw	r3,4(r3)
  804868:	10c00035 	stwio	r3,0(r2)
}
  80486c:	0001883a 	nop
  804870:	e037883a 	mov	sp,fp
  804874:	df000017 	ldw	fp,0(sp)
  804878:	dec00104 	addi	sp,sp,4
  80487c:	f800283a 	ret

00804880 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  804880:	defffd04 	addi	sp,sp,-12
  804884:	df000215 	stw	fp,8(sp)
  804888:	df000204 	addi	fp,sp,8
  80488c:	e13ffe15 	stw	r4,-8(fp)
  804890:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  804894:	00000506 	br	8048ac <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  804898:	e0bfff17 	ldw	r2,-4(fp)
  80489c:	1090000c 	andi	r2,r2,16384
  8048a0:	10000226 	beq	r2,zero,8048ac <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  8048a4:	00bffd44 	movi	r2,-11
  8048a8:	00000606 	br	8048c4 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  8048ac:	e0bffe17 	ldw	r2,-8(fp)
  8048b0:	10c00417 	ldw	r3,16(r2)
  8048b4:	e0bffe17 	ldw	r2,-8(fp)
  8048b8:	10800517 	ldw	r2,20(r2)
  8048bc:	18bff61e 	bne	r3,r2,804898 <__alt_mem_onchip_mem+0xff784898>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  8048c0:	0005883a 	mov	r2,zero
}
  8048c4:	e037883a 	mov	sp,fp
  8048c8:	df000017 	ldw	fp,0(sp)
  8048cc:	dec00104 	addi	sp,sp,4
  8048d0:	f800283a 	ret

008048d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8048d4:	defffe04 	addi	sp,sp,-8
  8048d8:	dfc00115 	stw	ra,4(sp)
  8048dc:	df000015 	stw	fp,0(sp)
  8048e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8048e4:	00802074 	movhi	r2,129
  8048e8:	10a0ad04 	addi	r2,r2,-32076
  8048ec:	10800017 	ldw	r2,0(r2)
  8048f0:	10000526 	beq	r2,zero,804908 <alt_get_errno+0x34>
  8048f4:	00802074 	movhi	r2,129
  8048f8:	10a0ad04 	addi	r2,r2,-32076
  8048fc:	10800017 	ldw	r2,0(r2)
  804900:	103ee83a 	callr	r2
  804904:	00000206 	br	804910 <alt_get_errno+0x3c>
  804908:	00802074 	movhi	r2,129
  80490c:	10a6f704 	addi	r2,r2,-25636
}
  804910:	e037883a 	mov	sp,fp
  804914:	dfc00117 	ldw	ra,4(sp)
  804918:	df000017 	ldw	fp,0(sp)
  80491c:	dec00204 	addi	sp,sp,8
  804920:	f800283a 	ret

00804924 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  804924:	defff204 	addi	sp,sp,-56
  804928:	dfc00d15 	stw	ra,52(sp)
  80492c:	df000c15 	stw	fp,48(sp)
  804930:	df000c04 	addi	fp,sp,48
  804934:	e13ffc15 	stw	r4,-16(fp)
  804938:	e17ffd15 	stw	r5,-12(fp)
  80493c:	e1bffe15 	stw	r6,-8(fp)
  804940:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  804944:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
  804948:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  80494c:	e0bfff17 	ldw	r2,-4(fp)
  804950:	1090000c 	andi	r2,r2,16384
  804954:	1005003a 	cmpeq	r2,r2,zero
  804958:	10803fcc 	andi	r2,r2,255
  80495c:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  804960:	00001306 	br	8049b0 <altera_avalon_uart_read+0x8c>
    {
      count++;
  804964:	e0bff517 	ldw	r2,-44(fp)
  804968:	10800044 	addi	r2,r2,1
  80496c:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  804970:	e0bffd17 	ldw	r2,-12(fp)
  804974:	10c00044 	addi	r3,r2,1
  804978:	e0fffd15 	stw	r3,-12(fp)
  80497c:	e0fffc17 	ldw	r3,-16(fp)
  804980:	18c00217 	ldw	r3,8(r3)
  804984:	e13ffc17 	ldw	r4,-16(fp)
  804988:	20c7883a 	add	r3,r4,r3
  80498c:	18c00704 	addi	r3,r3,28
  804990:	18c00003 	ldbu	r3,0(r3)
  804994:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  804998:	e0bffc17 	ldw	r2,-16(fp)
  80499c:	10800217 	ldw	r2,8(r2)
  8049a0:	10800044 	addi	r2,r2,1
  8049a4:	10c00fcc 	andi	r3,r2,63
  8049a8:	e0bffc17 	ldw	r2,-16(fp)
  8049ac:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  8049b0:	e0fff517 	ldw	r3,-44(fp)
  8049b4:	e0bffe17 	ldw	r2,-8(fp)
  8049b8:	1880050e 	bge	r3,r2,8049d0 <altera_avalon_uart_read+0xac>
  8049bc:	e0bffc17 	ldw	r2,-16(fp)
  8049c0:	10c00217 	ldw	r3,8(r2)
  8049c4:	e0bffc17 	ldw	r2,-16(fp)
  8049c8:	10800317 	ldw	r2,12(r2)
  8049cc:	18bfe51e 	bne	r3,r2,804964 <__alt_mem_onchip_mem+0xff784964>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  8049d0:	e0bff517 	ldw	r2,-44(fp)
  8049d4:	1000251e 	bne	r2,zero,804a6c <altera_avalon_uart_read+0x148>
  8049d8:	e0bffc17 	ldw	r2,-16(fp)
  8049dc:	10c00217 	ldw	r3,8(r2)
  8049e0:	e0bffc17 	ldw	r2,-16(fp)
  8049e4:	10800317 	ldw	r2,12(r2)
  8049e8:	1880201e 	bne	r3,r2,804a6c <altera_avalon_uart_read+0x148>
    {
      if (!block)
  8049ec:	e0bff617 	ldw	r2,-40(fp)
  8049f0:	1000071e 	bne	r2,zero,804a10 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  8049f4:	08048d40 	call	8048d4 <alt_get_errno>
  8049f8:	1007883a 	mov	r3,r2
  8049fc:	008002c4 	movi	r2,11
  804a00:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  804a04:	00800044 	movi	r2,1
  804a08:	e0bff405 	stb	r2,-48(fp)
        break;
  804a0c:	00001b06 	br	804a7c <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804a10:	0005303a 	rdctl	r2,status
  804a14:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804a18:	e0fff917 	ldw	r3,-28(fp)
  804a1c:	00bfff84 	movi	r2,-2
  804a20:	1884703a 	and	r2,r3,r2
  804a24:	1001703a 	wrctl	status,r2
  
  return context;
  804a28:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  804a2c:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  804a30:	e0bffc17 	ldw	r2,-16(fp)
  804a34:	10800117 	ldw	r2,4(r2)
  804a38:	10c02014 	ori	r3,r2,128
  804a3c:	e0bffc17 	ldw	r2,-16(fp)
  804a40:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  804a44:	e0bffc17 	ldw	r2,-16(fp)
  804a48:	10800017 	ldw	r2,0(r2)
  804a4c:	10800304 	addi	r2,r2,12
  804a50:	e0fffc17 	ldw	r3,-16(fp)
  804a54:	18c00117 	ldw	r3,4(r3)
  804a58:	10c00035 	stwio	r3,0(r2)
  804a5c:	e0bff817 	ldw	r2,-32(fp)
  804a60:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804a64:	e0bffa17 	ldw	r2,-24(fp)
  804a68:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  804a6c:	e0bff517 	ldw	r2,-44(fp)
  804a70:	1000021e 	bne	r2,zero,804a7c <altera_avalon_uart_read+0x158>
  804a74:	e0bffe17 	ldw	r2,-8(fp)
  804a78:	103fcd1e 	bne	r2,zero,8049b0 <__alt_mem_onchip_mem+0xff7849b0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804a7c:	0005303a 	rdctl	r2,status
  804a80:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804a84:	e0fffb17 	ldw	r3,-20(fp)
  804a88:	00bfff84 	movi	r2,-2
  804a8c:	1884703a 	and	r2,r3,r2
  804a90:	1001703a 	wrctl	status,r2
  
  return context;
  804a94:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  804a98:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  804a9c:	e0bffc17 	ldw	r2,-16(fp)
  804aa0:	10800117 	ldw	r2,4(r2)
  804aa4:	10c02014 	ori	r3,r2,128
  804aa8:	e0bffc17 	ldw	r2,-16(fp)
  804aac:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  804ab0:	e0bffc17 	ldw	r2,-16(fp)
  804ab4:	10800017 	ldw	r2,0(r2)
  804ab8:	10800304 	addi	r2,r2,12
  804abc:	e0fffc17 	ldw	r3,-16(fp)
  804ac0:	18c00117 	ldw	r3,4(r3)
  804ac4:	10c00035 	stwio	r3,0(r2)
  804ac8:	e0bff817 	ldw	r2,-32(fp)
  804acc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804ad0:	e0bff717 	ldw	r2,-36(fp)
  804ad4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  804ad8:	e0bff403 	ldbu	r2,-48(fp)
  804adc:	10000226 	beq	r2,zero,804ae8 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
  804ae0:	00bffd44 	movi	r2,-11
  804ae4:	00000106 	br	804aec <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
  804ae8:	e0bff517 	ldw	r2,-44(fp)
  }
}
  804aec:	e037883a 	mov	sp,fp
  804af0:	dfc00117 	ldw	ra,4(sp)
  804af4:	df000017 	ldw	fp,0(sp)
  804af8:	dec00204 	addi	sp,sp,8
  804afc:	f800283a 	ret

00804b00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  804b00:	defffe04 	addi	sp,sp,-8
  804b04:	dfc00115 	stw	ra,4(sp)
  804b08:	df000015 	stw	fp,0(sp)
  804b0c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  804b10:	00802074 	movhi	r2,129
  804b14:	10a0ad04 	addi	r2,r2,-32076
  804b18:	10800017 	ldw	r2,0(r2)
  804b1c:	10000526 	beq	r2,zero,804b34 <alt_get_errno+0x34>
  804b20:	00802074 	movhi	r2,129
  804b24:	10a0ad04 	addi	r2,r2,-32076
  804b28:	10800017 	ldw	r2,0(r2)
  804b2c:	103ee83a 	callr	r2
  804b30:	00000206 	br	804b3c <alt_get_errno+0x3c>
  804b34:	00802074 	movhi	r2,129
  804b38:	10a6f704 	addi	r2,r2,-25636
}
  804b3c:	e037883a 	mov	sp,fp
  804b40:	dfc00117 	ldw	ra,4(sp)
  804b44:	df000017 	ldw	fp,0(sp)
  804b48:	dec00204 	addi	sp,sp,8
  804b4c:	f800283a 	ret

00804b50 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  804b50:	defff204 	addi	sp,sp,-56
  804b54:	dfc00d15 	stw	ra,52(sp)
  804b58:	df000c15 	stw	fp,48(sp)
  804b5c:	df000c04 	addi	fp,sp,48
  804b60:	e13ffc15 	stw	r4,-16(fp)
  804b64:	e17ffd15 	stw	r5,-12(fp)
  804b68:	e1bffe15 	stw	r6,-8(fp)
  804b6c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  804b70:	e0bffe17 	ldw	r2,-8(fp)
  804b74:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  804b78:	e0bfff17 	ldw	r2,-4(fp)
  804b7c:	1090000c 	andi	r2,r2,16384
  804b80:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  804b84:	00003c06 	br	804c78 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  804b88:	e0bffc17 	ldw	r2,-16(fp)
  804b8c:	10800517 	ldw	r2,20(r2)
  804b90:	10800044 	addi	r2,r2,1
  804b94:	10800fcc 	andi	r2,r2,63
  804b98:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  804b9c:	e0bffc17 	ldw	r2,-16(fp)
  804ba0:	10c00417 	ldw	r3,16(r2)
  804ba4:	e0bff717 	ldw	r2,-36(fp)
  804ba8:	1880221e 	bne	r3,r2,804c34 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
  804bac:	e0bff517 	ldw	r2,-44(fp)
  804bb0:	10000526 	beq	r2,zero,804bc8 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  804bb4:	0804b000 	call	804b00 <alt_get_errno>
  804bb8:	1007883a 	mov	r3,r2
  804bbc:	008002c4 	movi	r2,11
  804bc0:	18800015 	stw	r2,0(r3)
        break;
  804bc4:	00002e06 	br	804c80 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804bc8:	0005303a 	rdctl	r2,status
  804bcc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804bd0:	e0fff917 	ldw	r3,-28(fp)
  804bd4:	00bfff84 	movi	r2,-2
  804bd8:	1884703a 	and	r2,r3,r2
  804bdc:	1001703a 	wrctl	status,r2
  
  return context;
  804be0:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  804be4:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  804be8:	e0bffc17 	ldw	r2,-16(fp)
  804bec:	10800117 	ldw	r2,4(r2)
  804bf0:	10c11014 	ori	r3,r2,1088
  804bf4:	e0bffc17 	ldw	r2,-16(fp)
  804bf8:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  804bfc:	e0bffc17 	ldw	r2,-16(fp)
  804c00:	10800017 	ldw	r2,0(r2)
  804c04:	10800304 	addi	r2,r2,12
  804c08:	e0fffc17 	ldw	r3,-16(fp)
  804c0c:	18c00117 	ldw	r3,4(r3)
  804c10:	10c00035 	stwio	r3,0(r2)
  804c14:	e0bff817 	ldw	r2,-32(fp)
  804c18:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804c1c:	e0bff617 	ldw	r2,-40(fp)
  804c20:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  804c24:	e0bffc17 	ldw	r2,-16(fp)
  804c28:	10c00417 	ldw	r3,16(r2)
  804c2c:	e0bff717 	ldw	r2,-36(fp)
  804c30:	18bffc26 	beq	r3,r2,804c24 <__alt_mem_onchip_mem+0xff784c24>
      }
    }

    count--;
  804c34:	e0bff417 	ldw	r2,-48(fp)
  804c38:	10bfffc4 	addi	r2,r2,-1
  804c3c:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  804c40:	e0bffc17 	ldw	r2,-16(fp)
  804c44:	10c00517 	ldw	r3,20(r2)
  804c48:	e0bffd17 	ldw	r2,-12(fp)
  804c4c:	11000044 	addi	r4,r2,1
  804c50:	e13ffd15 	stw	r4,-12(fp)
  804c54:	10800003 	ldbu	r2,0(r2)
  804c58:	1009883a 	mov	r4,r2
  804c5c:	e0bffc17 	ldw	r2,-16(fp)
  804c60:	10c5883a 	add	r2,r2,r3
  804c64:	10801704 	addi	r2,r2,92
  804c68:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  804c6c:	e0bffc17 	ldw	r2,-16(fp)
  804c70:	e0fff717 	ldw	r3,-36(fp)
  804c74:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  804c78:	e0bff417 	ldw	r2,-48(fp)
  804c7c:	103fc21e 	bne	r2,zero,804b88 <__alt_mem_onchip_mem+0xff784b88>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804c80:	0005303a 	rdctl	r2,status
  804c84:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804c88:	e0fffb17 	ldw	r3,-20(fp)
  804c8c:	00bfff84 	movi	r2,-2
  804c90:	1884703a 	and	r2,r3,r2
  804c94:	1001703a 	wrctl	status,r2
  
  return context;
  804c98:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  804c9c:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  804ca0:	e0bffc17 	ldw	r2,-16(fp)
  804ca4:	10800117 	ldw	r2,4(r2)
  804ca8:	10c11014 	ori	r3,r2,1088
  804cac:	e0bffc17 	ldw	r2,-16(fp)
  804cb0:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  804cb4:	e0bffc17 	ldw	r2,-16(fp)
  804cb8:	10800017 	ldw	r2,0(r2)
  804cbc:	10800304 	addi	r2,r2,12
  804cc0:	e0fffc17 	ldw	r3,-16(fp)
  804cc4:	18c00117 	ldw	r3,4(r3)
  804cc8:	10c00035 	stwio	r3,0(r2)
  804ccc:	e0bff817 	ldw	r2,-32(fp)
  804cd0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804cd4:	e0bffa17 	ldw	r2,-24(fp)
  804cd8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  804cdc:	e0fffe17 	ldw	r3,-8(fp)
  804ce0:	e0bff417 	ldw	r2,-48(fp)
  804ce4:	1885c83a 	sub	r2,r3,r2
}
  804ce8:	e037883a 	mov	sp,fp
  804cec:	dfc00117 	ldw	ra,4(sp)
  804cf0:	df000017 	ldw	fp,0(sp)
  804cf4:	dec00204 	addi	sp,sp,8
  804cf8:	f800283a 	ret

00804cfc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  804cfc:	defff504 	addi	sp,sp,-44
  804d00:	df000a15 	stw	fp,40(sp)
  804d04:	df000a04 	addi	fp,sp,40
  804d08:	e13ffc15 	stw	r4,-16(fp)
  804d0c:	e17ffd15 	stw	r5,-12(fp)
  804d10:	e1bffe15 	stw	r6,-8(fp)
  804d14:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  804d18:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  804d1c:	00802074 	movhi	r2,129
  804d20:	10a6f404 	addi	r2,r2,-25648
  804d24:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  804d28:	10003f26 	beq	r2,zero,804e28 <alt_alarm_start+0x12c>
  {
    if (alarm)
  804d2c:	e0bffc17 	ldw	r2,-16(fp)
  804d30:	10003b26 	beq	r2,zero,804e20 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
  804d34:	e0bffc17 	ldw	r2,-16(fp)
  804d38:	e0fffe17 	ldw	r3,-8(fp)
  804d3c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  804d40:	e0bffc17 	ldw	r2,-16(fp)
  804d44:	e0ffff17 	ldw	r3,-4(fp)
  804d48:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804d4c:	0005303a 	rdctl	r2,status
  804d50:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804d54:	e0fff917 	ldw	r3,-28(fp)
  804d58:	00bfff84 	movi	r2,-2
  804d5c:	1884703a 	and	r2,r3,r2
  804d60:	1001703a 	wrctl	status,r2
  
  return context;
  804d64:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  804d68:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  804d6c:	00802074 	movhi	r2,129
  804d70:	10a6f504 	addi	r2,r2,-25644
  804d74:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  804d78:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  804d7c:	e0fffd17 	ldw	r3,-12(fp)
  804d80:	e0bff617 	ldw	r2,-40(fp)
  804d84:	1885883a 	add	r2,r3,r2
  804d88:	10c00044 	addi	r3,r2,1
  804d8c:	e0bffc17 	ldw	r2,-16(fp)
  804d90:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  804d94:	e0bffc17 	ldw	r2,-16(fp)
  804d98:	10c00217 	ldw	r3,8(r2)
  804d9c:	e0bff617 	ldw	r2,-40(fp)
  804da0:	1880042e 	bgeu	r3,r2,804db4 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
  804da4:	e0bffc17 	ldw	r2,-16(fp)
  804da8:	00c00044 	movi	r3,1
  804dac:	10c00405 	stb	r3,16(r2)
  804db0:	00000206 	br	804dbc <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
  804db4:	e0bffc17 	ldw	r2,-16(fp)
  804db8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  804dbc:	e0fffc17 	ldw	r3,-16(fp)
  804dc0:	00802074 	movhi	r2,129
  804dc4:	10a0af04 	addi	r2,r2,-32068
  804dc8:	e0bffa15 	stw	r2,-24(fp)
  804dcc:	e0fffb15 	stw	r3,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  804dd0:	e0bffb17 	ldw	r2,-20(fp)
  804dd4:	e0fffa17 	ldw	r3,-24(fp)
  804dd8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  804ddc:	e0bffa17 	ldw	r2,-24(fp)
  804de0:	10c00017 	ldw	r3,0(r2)
  804de4:	e0bffb17 	ldw	r2,-20(fp)
  804de8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  804dec:	e0bffa17 	ldw	r2,-24(fp)
  804df0:	10800017 	ldw	r2,0(r2)
  804df4:	e0fffb17 	ldw	r3,-20(fp)
  804df8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  804dfc:	e0bffa17 	ldw	r2,-24(fp)
  804e00:	e0fffb17 	ldw	r3,-20(fp)
  804e04:	10c00015 	stw	r3,0(r2)
  804e08:	e0bff817 	ldw	r2,-32(fp)
  804e0c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804e10:	e0bff717 	ldw	r2,-36(fp)
  804e14:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  804e18:	0005883a 	mov	r2,zero
  804e1c:	00000306 	br	804e2c <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
  804e20:	00bffa84 	movi	r2,-22
  804e24:	00000106 	br	804e2c <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
  804e28:	00bfde84 	movi	r2,-134
  }
}
  804e2c:	e037883a 	mov	sp,fp
  804e30:	df000017 	ldw	fp,0(sp)
  804e34:	dec00104 	addi	sp,sp,4
  804e38:	f800283a 	ret

00804e3c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  804e3c:	defffe04 	addi	sp,sp,-8
  804e40:	dfc00115 	stw	ra,4(sp)
  804e44:	df000015 	stw	fp,0(sp)
  804e48:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  804e4c:	00802074 	movhi	r2,129
  804e50:	10a0ad04 	addi	r2,r2,-32076
  804e54:	10800017 	ldw	r2,0(r2)
  804e58:	10000526 	beq	r2,zero,804e70 <alt_get_errno+0x34>
  804e5c:	00802074 	movhi	r2,129
  804e60:	10a0ad04 	addi	r2,r2,-32076
  804e64:	10800017 	ldw	r2,0(r2)
  804e68:	103ee83a 	callr	r2
  804e6c:	00000206 	br	804e78 <alt_get_errno+0x3c>
  804e70:	00802074 	movhi	r2,129
  804e74:	10a6f704 	addi	r2,r2,-25636
}
  804e78:	e037883a 	mov	sp,fp
  804e7c:	dfc00117 	ldw	ra,4(sp)
  804e80:	df000017 	ldw	fp,0(sp)
  804e84:	dec00204 	addi	sp,sp,8
  804e88:	f800283a 	ret

00804e8c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  804e8c:	defffb04 	addi	sp,sp,-20
  804e90:	dfc00415 	stw	ra,16(sp)
  804e94:	df000315 	stw	fp,12(sp)
  804e98:	df000304 	addi	fp,sp,12
  804e9c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  804ea0:	e0bfff17 	ldw	r2,-4(fp)
  804ea4:	10000616 	blt	r2,zero,804ec0 <close+0x34>
  804ea8:	e0bfff17 	ldw	r2,-4(fp)
  804eac:	10c00324 	muli	r3,r2,12
  804eb0:	00802034 	movhi	r2,128
  804eb4:	109f3e04 	addi	r2,r2,31992
  804eb8:	1885883a 	add	r2,r3,r2
  804ebc:	00000106 	br	804ec4 <close+0x38>
  804ec0:	0005883a 	mov	r2,zero
  804ec4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  804ec8:	e0bffd17 	ldw	r2,-12(fp)
  804ecc:	10001926 	beq	r2,zero,804f34 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  804ed0:	e0bffd17 	ldw	r2,-12(fp)
  804ed4:	10800017 	ldw	r2,0(r2)
  804ed8:	10800417 	ldw	r2,16(r2)
  804edc:	10000626 	beq	r2,zero,804ef8 <close+0x6c>
  804ee0:	e0bffd17 	ldw	r2,-12(fp)
  804ee4:	10800017 	ldw	r2,0(r2)
  804ee8:	10800417 	ldw	r2,16(r2)
  804eec:	e13ffd17 	ldw	r4,-12(fp)
  804ef0:	103ee83a 	callr	r2
  804ef4:	00000106 	br	804efc <close+0x70>
  804ef8:	0005883a 	mov	r2,zero
  804efc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  804f00:	e13fff17 	ldw	r4,-4(fp)
  804f04:	080583c0 	call	80583c <alt_release_fd>
    if (rval < 0)
  804f08:	e0bffe17 	ldw	r2,-8(fp)
  804f0c:	1000070e 	bge	r2,zero,804f2c <close+0xa0>
    {
      ALT_ERRNO = -rval;
  804f10:	0804e3c0 	call	804e3c <alt_get_errno>
  804f14:	1007883a 	mov	r3,r2
  804f18:	e0bffe17 	ldw	r2,-8(fp)
  804f1c:	0085c83a 	sub	r2,zero,r2
  804f20:	18800015 	stw	r2,0(r3)
      return -1;
  804f24:	00bfffc4 	movi	r2,-1
  804f28:	00000706 	br	804f48 <close+0xbc>
    }
    return 0;
  804f2c:	0005883a 	mov	r2,zero
  804f30:	00000506 	br	804f48 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  804f34:	0804e3c0 	call	804e3c <alt_get_errno>
  804f38:	1007883a 	mov	r3,r2
  804f3c:	00801444 	movi	r2,81
  804f40:	18800015 	stw	r2,0(r3)
    return -1;
  804f44:	00bfffc4 	movi	r2,-1
  }
}
  804f48:	e037883a 	mov	sp,fp
  804f4c:	dfc00117 	ldw	ra,4(sp)
  804f50:	df000017 	ldw	fp,0(sp)
  804f54:	dec00204 	addi	sp,sp,8
  804f58:	f800283a 	ret

00804f5c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  804f5c:	defffe04 	addi	sp,sp,-8
  804f60:	df000115 	stw	fp,4(sp)
  804f64:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  804f68:	e03fff15 	stw	zero,-4(fp)
  804f6c:	00000506 	br	804f84 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  804f70:	e0bfff17 	ldw	r2,-4(fp)
  804f74:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  804f78:	e0bfff17 	ldw	r2,-4(fp)
  804f7c:	10800804 	addi	r2,r2,32
  804f80:	e0bfff15 	stw	r2,-4(fp)
  804f84:	e0bfff17 	ldw	r2,-4(fp)
  804f88:	10820030 	cmpltui	r2,r2,2048
  804f8c:	103ff81e 	bne	r2,zero,804f70 <__alt_mem_onchip_mem+0xff784f70>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  804f90:	0001883a 	nop
  804f94:	e037883a 	mov	sp,fp
  804f98:	df000017 	ldw	fp,0(sp)
  804f9c:	dec00104 	addi	sp,sp,4
  804fa0:	f800283a 	ret

00804fa4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  804fa4:	defffc04 	addi	sp,sp,-16
  804fa8:	df000315 	stw	fp,12(sp)
  804fac:	df000304 	addi	fp,sp,12
  804fb0:	e13ffd15 	stw	r4,-12(fp)
  804fb4:	e17ffe15 	stw	r5,-8(fp)
  804fb8:	e1bfff15 	stw	r6,-4(fp)
  return len;
  804fbc:	e0bfff17 	ldw	r2,-4(fp)
}
  804fc0:	e037883a 	mov	sp,fp
  804fc4:	df000017 	ldw	fp,0(sp)
  804fc8:	dec00104 	addi	sp,sp,4
  804fcc:	f800283a 	ret

00804fd0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  804fd0:	defffe04 	addi	sp,sp,-8
  804fd4:	dfc00115 	stw	ra,4(sp)
  804fd8:	df000015 	stw	fp,0(sp)
  804fdc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  804fe0:	00802074 	movhi	r2,129
  804fe4:	10a0ad04 	addi	r2,r2,-32076
  804fe8:	10800017 	ldw	r2,0(r2)
  804fec:	10000526 	beq	r2,zero,805004 <alt_get_errno+0x34>
  804ff0:	00802074 	movhi	r2,129
  804ff4:	10a0ad04 	addi	r2,r2,-32076
  804ff8:	10800017 	ldw	r2,0(r2)
  804ffc:	103ee83a 	callr	r2
  805000:	00000206 	br	80500c <alt_get_errno+0x3c>
  805004:	00802074 	movhi	r2,129
  805008:	10a6f704 	addi	r2,r2,-25636
}
  80500c:	e037883a 	mov	sp,fp
  805010:	dfc00117 	ldw	ra,4(sp)
  805014:	df000017 	ldw	fp,0(sp)
  805018:	dec00204 	addi	sp,sp,8
  80501c:	f800283a 	ret

00805020 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  805020:	defffa04 	addi	sp,sp,-24
  805024:	dfc00515 	stw	ra,20(sp)
  805028:	df000415 	stw	fp,16(sp)
  80502c:	df000404 	addi	fp,sp,16
  805030:	e13ffe15 	stw	r4,-8(fp)
  805034:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  805038:	e0bffe17 	ldw	r2,-8(fp)
  80503c:	10000326 	beq	r2,zero,80504c <alt_dev_llist_insert+0x2c>
  805040:	e0bffe17 	ldw	r2,-8(fp)
  805044:	10800217 	ldw	r2,8(r2)
  805048:	1000061e 	bne	r2,zero,805064 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  80504c:	0804fd00 	call	804fd0 <alt_get_errno>
  805050:	1007883a 	mov	r3,r2
  805054:	00800584 	movi	r2,22
  805058:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  80505c:	00bffa84 	movi	r2,-22
  805060:	00001306 	br	8050b0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  805064:	e0bffe17 	ldw	r2,-8(fp)
  805068:	e0ffff17 	ldw	r3,-4(fp)
  80506c:	e0fffc15 	stw	r3,-16(fp)
  805070:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  805074:	e0bffd17 	ldw	r2,-12(fp)
  805078:	e0fffc17 	ldw	r3,-16(fp)
  80507c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  805080:	e0bffc17 	ldw	r2,-16(fp)
  805084:	10c00017 	ldw	r3,0(r2)
  805088:	e0bffd17 	ldw	r2,-12(fp)
  80508c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  805090:	e0bffc17 	ldw	r2,-16(fp)
  805094:	10800017 	ldw	r2,0(r2)
  805098:	e0fffd17 	ldw	r3,-12(fp)
  80509c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  8050a0:	e0bffc17 	ldw	r2,-16(fp)
  8050a4:	e0fffd17 	ldw	r3,-12(fp)
  8050a8:	10c00015 	stw	r3,0(r2)

  return 0;  
  8050ac:	0005883a 	mov	r2,zero
}
  8050b0:	e037883a 	mov	sp,fp
  8050b4:	dfc00117 	ldw	ra,4(sp)
  8050b8:	df000017 	ldw	fp,0(sp)
  8050bc:	dec00204 	addi	sp,sp,8
  8050c0:	f800283a 	ret

008050c4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  8050c4:	defffd04 	addi	sp,sp,-12
  8050c8:	dfc00215 	stw	ra,8(sp)
  8050cc:	df000115 	stw	fp,4(sp)
  8050d0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  8050d4:	00802034 	movhi	r2,128
  8050d8:	1099f004 	addi	r2,r2,26560
  8050dc:	e0bfff15 	stw	r2,-4(fp)
  8050e0:	00000606 	br	8050fc <_do_ctors+0x38>
        (*ctor) (); 
  8050e4:	e0bfff17 	ldw	r2,-4(fp)
  8050e8:	10800017 	ldw	r2,0(r2)
  8050ec:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  8050f0:	e0bfff17 	ldw	r2,-4(fp)
  8050f4:	10bfff04 	addi	r2,r2,-4
  8050f8:	e0bfff15 	stw	r2,-4(fp)
  8050fc:	e0ffff17 	ldw	r3,-4(fp)
  805100:	00802034 	movhi	r2,128
  805104:	1099f104 	addi	r2,r2,26564
  805108:	18bff62e 	bgeu	r3,r2,8050e4 <__alt_mem_onchip_mem+0xff7850e4>
        (*ctor) (); 
}
  80510c:	0001883a 	nop
  805110:	e037883a 	mov	sp,fp
  805114:	dfc00117 	ldw	ra,4(sp)
  805118:	df000017 	ldw	fp,0(sp)
  80511c:	dec00204 	addi	sp,sp,8
  805120:	f800283a 	ret

00805124 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  805124:	defffd04 	addi	sp,sp,-12
  805128:	dfc00215 	stw	ra,8(sp)
  80512c:	df000115 	stw	fp,4(sp)
  805130:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  805134:	00802034 	movhi	r2,128
  805138:	1099f004 	addi	r2,r2,26560
  80513c:	e0bfff15 	stw	r2,-4(fp)
  805140:	00000606 	br	80515c <_do_dtors+0x38>
        (*dtor) (); 
  805144:	e0bfff17 	ldw	r2,-4(fp)
  805148:	10800017 	ldw	r2,0(r2)
  80514c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  805150:	e0bfff17 	ldw	r2,-4(fp)
  805154:	10bfff04 	addi	r2,r2,-4
  805158:	e0bfff15 	stw	r2,-4(fp)
  80515c:	e0ffff17 	ldw	r3,-4(fp)
  805160:	00802034 	movhi	r2,128
  805164:	1099f104 	addi	r2,r2,26564
  805168:	18bff62e 	bgeu	r3,r2,805144 <__alt_mem_onchip_mem+0xff785144>
        (*dtor) (); 
}
  80516c:	0001883a 	nop
  805170:	e037883a 	mov	sp,fp
  805174:	dfc00117 	ldw	ra,4(sp)
  805178:	df000017 	ldw	fp,0(sp)
  80517c:	dec00204 	addi	sp,sp,8
  805180:	f800283a 	ret

00805184 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  805184:	defffe04 	addi	sp,sp,-8
  805188:	dfc00115 	stw	ra,4(sp)
  80518c:	df000015 	stw	fp,0(sp)
  805190:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  805194:	01440004 	movi	r5,4096
  805198:	0009883a 	mov	r4,zero
  80519c:	0805e480 	call	805e48 <alt_icache_flush>
#endif
}
  8051a0:	0001883a 	nop
  8051a4:	e037883a 	mov	sp,fp
  8051a8:	dfc00117 	ldw	ra,4(sp)
  8051ac:	df000017 	ldw	fp,0(sp)
  8051b0:	dec00204 	addi	sp,sp,8
  8051b4:	f800283a 	ret

008051b8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  8051b8:	defff904 	addi	sp,sp,-28
  8051bc:	dfc00615 	stw	ra,24(sp)
  8051c0:	df000515 	stw	fp,20(sp)
  8051c4:	df000504 	addi	fp,sp,20
  8051c8:	e13ffc15 	stw	r4,-16(fp)
  8051cc:	e17ffd15 	stw	r5,-12(fp)
  8051d0:	e1bffe15 	stw	r6,-8(fp)
  8051d4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  8051d8:	e0800217 	ldw	r2,8(fp)
  8051dc:	d8800015 	stw	r2,0(sp)
  8051e0:	e1ffff17 	ldw	r7,-4(fp)
  8051e4:	e1bffe17 	ldw	r6,-8(fp)
  8051e8:	e17ffd17 	ldw	r5,-12(fp)
  8051ec:	e13ffc17 	ldw	r4,-16(fp)
  8051f0:	08053980 	call	805398 <alt_iic_isr_register>
}  
  8051f4:	e037883a 	mov	sp,fp
  8051f8:	dfc00117 	ldw	ra,4(sp)
  8051fc:	df000017 	ldw	fp,0(sp)
  805200:	dec00204 	addi	sp,sp,8
  805204:	f800283a 	ret

00805208 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  805208:	defff904 	addi	sp,sp,-28
  80520c:	df000615 	stw	fp,24(sp)
  805210:	df000604 	addi	fp,sp,24
  805214:	e13ffe15 	stw	r4,-8(fp)
  805218:	e17fff15 	stw	r5,-4(fp)
  80521c:	e0bfff17 	ldw	r2,-4(fp)
  805220:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805224:	0005303a 	rdctl	r2,status
  805228:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80522c:	e0fffb17 	ldw	r3,-20(fp)
  805230:	00bfff84 	movi	r2,-2
  805234:	1884703a 	and	r2,r3,r2
  805238:	1001703a 	wrctl	status,r2
  
  return context;
  80523c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  805240:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  805244:	00c00044 	movi	r3,1
  805248:	e0bffa17 	ldw	r2,-24(fp)
  80524c:	1884983a 	sll	r2,r3,r2
  805250:	1007883a 	mov	r3,r2
  805254:	00802074 	movhi	r2,129
  805258:	10a6f304 	addi	r2,r2,-25652
  80525c:	10800017 	ldw	r2,0(r2)
  805260:	1886b03a 	or	r3,r3,r2
  805264:	00802074 	movhi	r2,129
  805268:	10a6f304 	addi	r2,r2,-25652
  80526c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  805270:	00802074 	movhi	r2,129
  805274:	10a6f304 	addi	r2,r2,-25652
  805278:	10800017 	ldw	r2,0(r2)
  80527c:	100170fa 	wrctl	ienable,r2
  805280:	e0bffc17 	ldw	r2,-16(fp)
  805284:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805288:	e0bffd17 	ldw	r2,-12(fp)
  80528c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  805290:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  805294:	0001883a 	nop
}
  805298:	e037883a 	mov	sp,fp
  80529c:	df000017 	ldw	fp,0(sp)
  8052a0:	dec00104 	addi	sp,sp,4
  8052a4:	f800283a 	ret

008052a8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  8052a8:	defff904 	addi	sp,sp,-28
  8052ac:	df000615 	stw	fp,24(sp)
  8052b0:	df000604 	addi	fp,sp,24
  8052b4:	e13ffe15 	stw	r4,-8(fp)
  8052b8:	e17fff15 	stw	r5,-4(fp)
  8052bc:	e0bfff17 	ldw	r2,-4(fp)
  8052c0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8052c4:	0005303a 	rdctl	r2,status
  8052c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8052cc:	e0fffb17 	ldw	r3,-20(fp)
  8052d0:	00bfff84 	movi	r2,-2
  8052d4:	1884703a 	and	r2,r3,r2
  8052d8:	1001703a 	wrctl	status,r2
  
  return context;
  8052dc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  8052e0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  8052e4:	00c00044 	movi	r3,1
  8052e8:	e0bffa17 	ldw	r2,-24(fp)
  8052ec:	1884983a 	sll	r2,r3,r2
  8052f0:	0084303a 	nor	r2,zero,r2
  8052f4:	1007883a 	mov	r3,r2
  8052f8:	00802074 	movhi	r2,129
  8052fc:	10a6f304 	addi	r2,r2,-25652
  805300:	10800017 	ldw	r2,0(r2)
  805304:	1886703a 	and	r3,r3,r2
  805308:	00802074 	movhi	r2,129
  80530c:	10a6f304 	addi	r2,r2,-25652
  805310:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  805314:	00802074 	movhi	r2,129
  805318:	10a6f304 	addi	r2,r2,-25652
  80531c:	10800017 	ldw	r2,0(r2)
  805320:	100170fa 	wrctl	ienable,r2
  805324:	e0bffc17 	ldw	r2,-16(fp)
  805328:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80532c:	e0bffd17 	ldw	r2,-12(fp)
  805330:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  805334:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  805338:	0001883a 	nop
}
  80533c:	e037883a 	mov	sp,fp
  805340:	df000017 	ldw	fp,0(sp)
  805344:	dec00104 	addi	sp,sp,4
  805348:	f800283a 	ret

0080534c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  80534c:	defffc04 	addi	sp,sp,-16
  805350:	df000315 	stw	fp,12(sp)
  805354:	df000304 	addi	fp,sp,12
  805358:	e13ffe15 	stw	r4,-8(fp)
  80535c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  805360:	000530fa 	rdctl	r2,ienable
  805364:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  805368:	00c00044 	movi	r3,1
  80536c:	e0bfff17 	ldw	r2,-4(fp)
  805370:	1884983a 	sll	r2,r3,r2
  805374:	1007883a 	mov	r3,r2
  805378:	e0bffd17 	ldw	r2,-12(fp)
  80537c:	1884703a 	and	r2,r3,r2
  805380:	1004c03a 	cmpne	r2,r2,zero
  805384:	10803fcc 	andi	r2,r2,255
}
  805388:	e037883a 	mov	sp,fp
  80538c:	df000017 	ldw	fp,0(sp)
  805390:	dec00104 	addi	sp,sp,4
  805394:	f800283a 	ret

00805398 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  805398:	defff504 	addi	sp,sp,-44
  80539c:	dfc00a15 	stw	ra,40(sp)
  8053a0:	df000915 	stw	fp,36(sp)
  8053a4:	df000904 	addi	fp,sp,36
  8053a8:	e13ffc15 	stw	r4,-16(fp)
  8053ac:	e17ffd15 	stw	r5,-12(fp)
  8053b0:	e1bffe15 	stw	r6,-8(fp)
  8053b4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  8053b8:	00bffa84 	movi	r2,-22
  8053bc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  8053c0:	e0bffd17 	ldw	r2,-12(fp)
  8053c4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  8053c8:	e0bff817 	ldw	r2,-32(fp)
  8053cc:	10800808 	cmpgei	r2,r2,32
  8053d0:	1000271e 	bne	r2,zero,805470 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8053d4:	0005303a 	rdctl	r2,status
  8053d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8053dc:	e0fffb17 	ldw	r3,-20(fp)
  8053e0:	00bfff84 	movi	r2,-2
  8053e4:	1884703a 	and	r2,r3,r2
  8053e8:	1001703a 	wrctl	status,r2
  
  return context;
  8053ec:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  8053f0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  8053f4:	00802074 	movhi	r2,129
  8053f8:	10a6f804 	addi	r2,r2,-25632
  8053fc:	e0fff817 	ldw	r3,-32(fp)
  805400:	180690fa 	slli	r3,r3,3
  805404:	10c5883a 	add	r2,r2,r3
  805408:	e0fffe17 	ldw	r3,-8(fp)
  80540c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  805410:	00802074 	movhi	r2,129
  805414:	10a6f804 	addi	r2,r2,-25632
  805418:	e0fff817 	ldw	r3,-32(fp)
  80541c:	180690fa 	slli	r3,r3,3
  805420:	10c5883a 	add	r2,r2,r3
  805424:	10800104 	addi	r2,r2,4
  805428:	e0ffff17 	ldw	r3,-4(fp)
  80542c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  805430:	e0bffe17 	ldw	r2,-8(fp)
  805434:	10000526 	beq	r2,zero,80544c <alt_iic_isr_register+0xb4>
  805438:	e0bff817 	ldw	r2,-32(fp)
  80543c:	100b883a 	mov	r5,r2
  805440:	e13ffc17 	ldw	r4,-16(fp)
  805444:	08052080 	call	805208 <alt_ic_irq_enable>
  805448:	00000406 	br	80545c <alt_iic_isr_register+0xc4>
  80544c:	e0bff817 	ldw	r2,-32(fp)
  805450:	100b883a 	mov	r5,r2
  805454:	e13ffc17 	ldw	r4,-16(fp)
  805458:	08052a80 	call	8052a8 <alt_ic_irq_disable>
  80545c:	e0bff715 	stw	r2,-36(fp)
  805460:	e0bffa17 	ldw	r2,-24(fp)
  805464:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805468:	e0bff917 	ldw	r2,-28(fp)
  80546c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  805470:	e0bff717 	ldw	r2,-36(fp)
}
  805474:	e037883a 	mov	sp,fp
  805478:	dfc00117 	ldw	ra,4(sp)
  80547c:	df000017 	ldw	fp,0(sp)
  805480:	dec00204 	addi	sp,sp,8
  805484:	f800283a 	ret

00805488 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  805488:	defff904 	addi	sp,sp,-28
  80548c:	dfc00615 	stw	ra,24(sp)
  805490:	df000515 	stw	fp,20(sp)
  805494:	df000504 	addi	fp,sp,20
  805498:	e13ffc15 	stw	r4,-16(fp)
  80549c:	e17ffd15 	stw	r5,-12(fp)
  8054a0:	e1bffe15 	stw	r6,-8(fp)
  8054a4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  8054a8:	e1bfff17 	ldw	r6,-4(fp)
  8054ac:	e17ffe17 	ldw	r5,-8(fp)
  8054b0:	e13ffd17 	ldw	r4,-12(fp)
  8054b4:	08056e40 	call	8056e4 <open>
  8054b8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  8054bc:	e0bffb17 	ldw	r2,-20(fp)
  8054c0:	10001c16 	blt	r2,zero,805534 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  8054c4:	00802034 	movhi	r2,128
  8054c8:	109f3e04 	addi	r2,r2,31992
  8054cc:	e0fffb17 	ldw	r3,-20(fp)
  8054d0:	18c00324 	muli	r3,r3,12
  8054d4:	10c5883a 	add	r2,r2,r3
  8054d8:	10c00017 	ldw	r3,0(r2)
  8054dc:	e0bffc17 	ldw	r2,-16(fp)
  8054e0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  8054e4:	00802034 	movhi	r2,128
  8054e8:	109f3e04 	addi	r2,r2,31992
  8054ec:	e0fffb17 	ldw	r3,-20(fp)
  8054f0:	18c00324 	muli	r3,r3,12
  8054f4:	10c5883a 	add	r2,r2,r3
  8054f8:	10800104 	addi	r2,r2,4
  8054fc:	10c00017 	ldw	r3,0(r2)
  805500:	e0bffc17 	ldw	r2,-16(fp)
  805504:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  805508:	00802034 	movhi	r2,128
  80550c:	109f3e04 	addi	r2,r2,31992
  805510:	e0fffb17 	ldw	r3,-20(fp)
  805514:	18c00324 	muli	r3,r3,12
  805518:	10c5883a 	add	r2,r2,r3
  80551c:	10800204 	addi	r2,r2,8
  805520:	10c00017 	ldw	r3,0(r2)
  805524:	e0bffc17 	ldw	r2,-16(fp)
  805528:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  80552c:	e13ffb17 	ldw	r4,-20(fp)
  805530:	080583c0 	call	80583c <alt_release_fd>
  }
} 
  805534:	0001883a 	nop
  805538:	e037883a 	mov	sp,fp
  80553c:	dfc00117 	ldw	ra,4(sp)
  805540:	df000017 	ldw	fp,0(sp)
  805544:	dec00204 	addi	sp,sp,8
  805548:	f800283a 	ret

0080554c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  80554c:	defffb04 	addi	sp,sp,-20
  805550:	dfc00415 	stw	ra,16(sp)
  805554:	df000315 	stw	fp,12(sp)
  805558:	df000304 	addi	fp,sp,12
  80555c:	e13ffd15 	stw	r4,-12(fp)
  805560:	e17ffe15 	stw	r5,-8(fp)
  805564:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  805568:	01c07fc4 	movi	r7,511
  80556c:	01800044 	movi	r6,1
  805570:	e17ffd17 	ldw	r5,-12(fp)
  805574:	01002034 	movhi	r4,128
  805578:	211f4104 	addi	r4,r4,32004
  80557c:	08054880 	call	805488 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  805580:	01c07fc4 	movi	r7,511
  805584:	000d883a 	mov	r6,zero
  805588:	e17ffe17 	ldw	r5,-8(fp)
  80558c:	01002034 	movhi	r4,128
  805590:	211f3e04 	addi	r4,r4,31992
  805594:	08054880 	call	805488 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  805598:	01c07fc4 	movi	r7,511
  80559c:	01800044 	movi	r6,1
  8055a0:	e17fff17 	ldw	r5,-4(fp)
  8055a4:	01002034 	movhi	r4,128
  8055a8:	211f4404 	addi	r4,r4,32016
  8055ac:	08054880 	call	805488 <alt_open_fd>
}  
  8055b0:	0001883a 	nop
  8055b4:	e037883a 	mov	sp,fp
  8055b8:	dfc00117 	ldw	ra,4(sp)
  8055bc:	df000017 	ldw	fp,0(sp)
  8055c0:	dec00204 	addi	sp,sp,8
  8055c4:	f800283a 	ret

008055c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8055c8:	defffe04 	addi	sp,sp,-8
  8055cc:	dfc00115 	stw	ra,4(sp)
  8055d0:	df000015 	stw	fp,0(sp)
  8055d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8055d8:	00802074 	movhi	r2,129
  8055dc:	10a0ad04 	addi	r2,r2,-32076
  8055e0:	10800017 	ldw	r2,0(r2)
  8055e4:	10000526 	beq	r2,zero,8055fc <alt_get_errno+0x34>
  8055e8:	00802074 	movhi	r2,129
  8055ec:	10a0ad04 	addi	r2,r2,-32076
  8055f0:	10800017 	ldw	r2,0(r2)
  8055f4:	103ee83a 	callr	r2
  8055f8:	00000206 	br	805604 <alt_get_errno+0x3c>
  8055fc:	00802074 	movhi	r2,129
  805600:	10a6f704 	addi	r2,r2,-25636
}
  805604:	e037883a 	mov	sp,fp
  805608:	dfc00117 	ldw	ra,4(sp)
  80560c:	df000017 	ldw	fp,0(sp)
  805610:	dec00204 	addi	sp,sp,8
  805614:	f800283a 	ret

00805618 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  805618:	defffd04 	addi	sp,sp,-12
  80561c:	df000215 	stw	fp,8(sp)
  805620:	df000204 	addi	fp,sp,8
  805624:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  805628:	e0bfff17 	ldw	r2,-4(fp)
  80562c:	10800217 	ldw	r2,8(r2)
  805630:	10d00034 	orhi	r3,r2,16384
  805634:	e0bfff17 	ldw	r2,-4(fp)
  805638:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80563c:	e03ffe15 	stw	zero,-8(fp)
  805640:	00001d06 	br	8056b8 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  805644:	00802034 	movhi	r2,128
  805648:	109f3e04 	addi	r2,r2,31992
  80564c:	e0fffe17 	ldw	r3,-8(fp)
  805650:	18c00324 	muli	r3,r3,12
  805654:	10c5883a 	add	r2,r2,r3
  805658:	10c00017 	ldw	r3,0(r2)
  80565c:	e0bfff17 	ldw	r2,-4(fp)
  805660:	10800017 	ldw	r2,0(r2)
  805664:	1880111e 	bne	r3,r2,8056ac <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  805668:	00802034 	movhi	r2,128
  80566c:	109f3e04 	addi	r2,r2,31992
  805670:	e0fffe17 	ldw	r3,-8(fp)
  805674:	18c00324 	muli	r3,r3,12
  805678:	10c5883a 	add	r2,r2,r3
  80567c:	10800204 	addi	r2,r2,8
  805680:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  805684:	1000090e 	bge	r2,zero,8056ac <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  805688:	e0bffe17 	ldw	r2,-8(fp)
  80568c:	10c00324 	muli	r3,r2,12
  805690:	00802034 	movhi	r2,128
  805694:	109f3e04 	addi	r2,r2,31992
  805698:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  80569c:	e0bfff17 	ldw	r2,-4(fp)
  8056a0:	18800226 	beq	r3,r2,8056ac <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  8056a4:	00bffcc4 	movi	r2,-13
  8056a8:	00000a06 	br	8056d4 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  8056ac:	e0bffe17 	ldw	r2,-8(fp)
  8056b0:	10800044 	addi	r2,r2,1
  8056b4:	e0bffe15 	stw	r2,-8(fp)
  8056b8:	00802074 	movhi	r2,129
  8056bc:	10a0ac04 	addi	r2,r2,-32080
  8056c0:	10800017 	ldw	r2,0(r2)
  8056c4:	1007883a 	mov	r3,r2
  8056c8:	e0bffe17 	ldw	r2,-8(fp)
  8056cc:	18bfdd2e 	bgeu	r3,r2,805644 <__alt_mem_onchip_mem+0xff785644>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  8056d0:	0005883a 	mov	r2,zero
}
  8056d4:	e037883a 	mov	sp,fp
  8056d8:	df000017 	ldw	fp,0(sp)
  8056dc:	dec00104 	addi	sp,sp,4
  8056e0:	f800283a 	ret

008056e4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  8056e4:	defff604 	addi	sp,sp,-40
  8056e8:	dfc00915 	stw	ra,36(sp)
  8056ec:	df000815 	stw	fp,32(sp)
  8056f0:	df000804 	addi	fp,sp,32
  8056f4:	e13ffd15 	stw	r4,-12(fp)
  8056f8:	e17ffe15 	stw	r5,-8(fp)
  8056fc:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  805700:	00bfffc4 	movi	r2,-1
  805704:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  805708:	00bffb44 	movi	r2,-19
  80570c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  805710:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  805714:	01402074 	movhi	r5,129
  805718:	2960aa04 	addi	r5,r5,-32088
  80571c:	e13ffd17 	ldw	r4,-12(fp)
  805720:	0805bf00 	call	805bf0 <alt_find_dev>
  805724:	e0bff815 	stw	r2,-32(fp)
  805728:	e0bff817 	ldw	r2,-32(fp)
  80572c:	1000051e 	bne	r2,zero,805744 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  805730:	e13ffd17 	ldw	r4,-12(fp)
  805734:	0805c800 	call	805c80 <alt_find_file>
  805738:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  80573c:	00800044 	movi	r2,1
  805740:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  805744:	e0bff817 	ldw	r2,-32(fp)
  805748:	10002926 	beq	r2,zero,8057f0 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
  80574c:	e13ff817 	ldw	r4,-32(fp)
  805750:	0805d940 	call	805d94 <alt_get_fd>
  805754:	e0bff915 	stw	r2,-28(fp)
  805758:	e0bff917 	ldw	r2,-28(fp)
  80575c:	1000030e 	bge	r2,zero,80576c <open+0x88>
    {
      status = index;
  805760:	e0bff917 	ldw	r2,-28(fp)
  805764:	e0bffa15 	stw	r2,-24(fp)
  805768:	00002306 	br	8057f8 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
  80576c:	e0bff917 	ldw	r2,-28(fp)
  805770:	10c00324 	muli	r3,r2,12
  805774:	00802034 	movhi	r2,128
  805778:	109f3e04 	addi	r2,r2,31992
  80577c:	1885883a 	add	r2,r3,r2
  805780:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  805784:	e0fffe17 	ldw	r3,-8(fp)
  805788:	00900034 	movhi	r2,16384
  80578c:	10bfffc4 	addi	r2,r2,-1
  805790:	1886703a 	and	r3,r3,r2
  805794:	e0bffc17 	ldw	r2,-16(fp)
  805798:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  80579c:	e0bffb17 	ldw	r2,-20(fp)
  8057a0:	1000051e 	bne	r2,zero,8057b8 <open+0xd4>
  8057a4:	e13ffc17 	ldw	r4,-16(fp)
  8057a8:	08056180 	call	805618 <alt_file_locked>
  8057ac:	e0bffa15 	stw	r2,-24(fp)
  8057b0:	e0bffa17 	ldw	r2,-24(fp)
  8057b4:	10001016 	blt	r2,zero,8057f8 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  8057b8:	e0bff817 	ldw	r2,-32(fp)
  8057bc:	10800317 	ldw	r2,12(r2)
  8057c0:	10000826 	beq	r2,zero,8057e4 <open+0x100>
  8057c4:	e0bff817 	ldw	r2,-32(fp)
  8057c8:	10800317 	ldw	r2,12(r2)
  8057cc:	e1ffff17 	ldw	r7,-4(fp)
  8057d0:	e1bffe17 	ldw	r6,-8(fp)
  8057d4:	e17ffd17 	ldw	r5,-12(fp)
  8057d8:	e13ffc17 	ldw	r4,-16(fp)
  8057dc:	103ee83a 	callr	r2
  8057e0:	00000106 	br	8057e8 <open+0x104>
  8057e4:	0005883a 	mov	r2,zero
  8057e8:	e0bffa15 	stw	r2,-24(fp)
  8057ec:	00000206 	br	8057f8 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
  8057f0:	00bffb44 	movi	r2,-19
  8057f4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  8057f8:	e0bffa17 	ldw	r2,-24(fp)
  8057fc:	1000090e 	bge	r2,zero,805824 <open+0x140>
  {
    alt_release_fd (index);  
  805800:	e13ff917 	ldw	r4,-28(fp)
  805804:	080583c0 	call	80583c <alt_release_fd>
    ALT_ERRNO = -status;
  805808:	08055c80 	call	8055c8 <alt_get_errno>
  80580c:	1007883a 	mov	r3,r2
  805810:	e0bffa17 	ldw	r2,-24(fp)
  805814:	0085c83a 	sub	r2,zero,r2
  805818:	18800015 	stw	r2,0(r3)
    return -1;
  80581c:	00bfffc4 	movi	r2,-1
  805820:	00000106 	br	805828 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
  805824:	e0bff917 	ldw	r2,-28(fp)
}
  805828:	e037883a 	mov	sp,fp
  80582c:	dfc00117 	ldw	ra,4(sp)
  805830:	df000017 	ldw	fp,0(sp)
  805834:	dec00204 	addi	sp,sp,8
  805838:	f800283a 	ret

0080583c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80583c:	defffe04 	addi	sp,sp,-8
  805840:	df000115 	stw	fp,4(sp)
  805844:	df000104 	addi	fp,sp,4
  805848:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80584c:	e0bfff17 	ldw	r2,-4(fp)
  805850:	108000d0 	cmplti	r2,r2,3
  805854:	10000d1e 	bne	r2,zero,80588c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  805858:	00802034 	movhi	r2,128
  80585c:	109f3e04 	addi	r2,r2,31992
  805860:	e0ffff17 	ldw	r3,-4(fp)
  805864:	18c00324 	muli	r3,r3,12
  805868:	10c5883a 	add	r2,r2,r3
  80586c:	10800204 	addi	r2,r2,8
  805870:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  805874:	00802034 	movhi	r2,128
  805878:	109f3e04 	addi	r2,r2,31992
  80587c:	e0ffff17 	ldw	r3,-4(fp)
  805880:	18c00324 	muli	r3,r3,12
  805884:	10c5883a 	add	r2,r2,r3
  805888:	10000015 	stw	zero,0(r2)
  }
}
  80588c:	0001883a 	nop
  805890:	e037883a 	mov	sp,fp
  805894:	df000017 	ldw	fp,0(sp)
  805898:	dec00104 	addi	sp,sp,4
  80589c:	f800283a 	ret

008058a0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  8058a0:	defffa04 	addi	sp,sp,-24
  8058a4:	df000515 	stw	fp,20(sp)
  8058a8:	df000504 	addi	fp,sp,20
  8058ac:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8058b0:	0005303a 	rdctl	r2,status
  8058b4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8058b8:	e0fffc17 	ldw	r3,-16(fp)
  8058bc:	00bfff84 	movi	r2,-2
  8058c0:	1884703a 	and	r2,r3,r2
  8058c4:	1001703a 	wrctl	status,r2
  
  return context;
  8058c8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  8058cc:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  8058d0:	e0bfff17 	ldw	r2,-4(fp)
  8058d4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  8058d8:	e0bffd17 	ldw	r2,-12(fp)
  8058dc:	10800017 	ldw	r2,0(r2)
  8058e0:	e0fffd17 	ldw	r3,-12(fp)
  8058e4:	18c00117 	ldw	r3,4(r3)
  8058e8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  8058ec:	e0bffd17 	ldw	r2,-12(fp)
  8058f0:	10800117 	ldw	r2,4(r2)
  8058f4:	e0fffd17 	ldw	r3,-12(fp)
  8058f8:	18c00017 	ldw	r3,0(r3)
  8058fc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  805900:	e0bffd17 	ldw	r2,-12(fp)
  805904:	e0fffd17 	ldw	r3,-12(fp)
  805908:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  80590c:	e0bffd17 	ldw	r2,-12(fp)
  805910:	e0fffd17 	ldw	r3,-12(fp)
  805914:	10c00015 	stw	r3,0(r2)
  805918:	e0bffb17 	ldw	r2,-20(fp)
  80591c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805920:	e0bffe17 	ldw	r2,-8(fp)
  805924:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  805928:	0001883a 	nop
  80592c:	e037883a 	mov	sp,fp
  805930:	df000017 	ldw	fp,0(sp)
  805934:	dec00104 	addi	sp,sp,4
  805938:	f800283a 	ret

0080593c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  80593c:	defffb04 	addi	sp,sp,-20
  805940:	dfc00415 	stw	ra,16(sp)
  805944:	df000315 	stw	fp,12(sp)
  805948:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  80594c:	d0a00817 	ldw	r2,-32736(gp)
  805950:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  805954:	d0a64e17 	ldw	r2,-26312(gp)
  805958:	10800044 	addi	r2,r2,1
  80595c:	d0a64e15 	stw	r2,-26312(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  805960:	00002e06 	br	805a1c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  805964:	e0bffd17 	ldw	r2,-12(fp)
  805968:	10800017 	ldw	r2,0(r2)
  80596c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  805970:	e0bffd17 	ldw	r2,-12(fp)
  805974:	10800403 	ldbu	r2,16(r2)
  805978:	10803fcc 	andi	r2,r2,255
  80597c:	10000426 	beq	r2,zero,805990 <alt_tick+0x54>
  805980:	d0a64e17 	ldw	r2,-26312(gp)
  805984:	1000021e 	bne	r2,zero,805990 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  805988:	e0bffd17 	ldw	r2,-12(fp)
  80598c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  805990:	e0bffd17 	ldw	r2,-12(fp)
  805994:	10800217 	ldw	r2,8(r2)
  805998:	d0e64e17 	ldw	r3,-26312(gp)
  80599c:	18801d36 	bltu	r3,r2,805a14 <alt_tick+0xd8>
  8059a0:	e0bffd17 	ldw	r2,-12(fp)
  8059a4:	10800403 	ldbu	r2,16(r2)
  8059a8:	10803fcc 	andi	r2,r2,255
  8059ac:	1000191e 	bne	r2,zero,805a14 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  8059b0:	e0bffd17 	ldw	r2,-12(fp)
  8059b4:	10800317 	ldw	r2,12(r2)
  8059b8:	e0fffd17 	ldw	r3,-12(fp)
  8059bc:	18c00517 	ldw	r3,20(r3)
  8059c0:	1809883a 	mov	r4,r3
  8059c4:	103ee83a 	callr	r2
  8059c8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  8059cc:	e0bfff17 	ldw	r2,-4(fp)
  8059d0:	1000031e 	bne	r2,zero,8059e0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  8059d4:	e13ffd17 	ldw	r4,-12(fp)
  8059d8:	08058a00 	call	8058a0 <alt_alarm_stop>
  8059dc:	00000d06 	br	805a14 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  8059e0:	e0bffd17 	ldw	r2,-12(fp)
  8059e4:	10c00217 	ldw	r3,8(r2)
  8059e8:	e0bfff17 	ldw	r2,-4(fp)
  8059ec:	1887883a 	add	r3,r3,r2
  8059f0:	e0bffd17 	ldw	r2,-12(fp)
  8059f4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  8059f8:	e0bffd17 	ldw	r2,-12(fp)
  8059fc:	10c00217 	ldw	r3,8(r2)
  805a00:	d0a64e17 	ldw	r2,-26312(gp)
  805a04:	1880032e 	bgeu	r3,r2,805a14 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  805a08:	e0bffd17 	ldw	r2,-12(fp)
  805a0c:	00c00044 	movi	r3,1
  805a10:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  805a14:	e0bffe17 	ldw	r2,-8(fp)
  805a18:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  805a1c:	e0fffd17 	ldw	r3,-12(fp)
  805a20:	d0a00804 	addi	r2,gp,-32736
  805a24:	18bfcf1e 	bne	r3,r2,805964 <__alt_mem_onchip_mem+0xff785964>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  805a28:	0001883a 	nop
}
  805a2c:	0001883a 	nop
  805a30:	e037883a 	mov	sp,fp
  805a34:	dfc00117 	ldw	ra,4(sp)
  805a38:	df000017 	ldw	fp,0(sp)
  805a3c:	dec00204 	addi	sp,sp,8
  805a40:	f800283a 	ret

00805a44 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  805a44:	defffd04 	addi	sp,sp,-12
  805a48:	dfc00215 	stw	ra,8(sp)
  805a4c:	df000115 	stw	fp,4(sp)
  805a50:	df000104 	addi	fp,sp,4
  805a54:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  805a58:	e13fff17 	ldw	r4,-4(fp)
  805a5c:	0805a980 	call	805a98 <alt_busy_sleep>
}
  805a60:	e037883a 	mov	sp,fp
  805a64:	dfc00117 	ldw	ra,4(sp)
  805a68:	df000017 	ldw	fp,0(sp)
  805a6c:	dec00204 	addi	sp,sp,8
  805a70:	f800283a 	ret

00805a74 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  805a74:	deffff04 	addi	sp,sp,-4
  805a78:	df000015 	stw	fp,0(sp)
  805a7c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  805a80:	000170fa 	wrctl	ienable,zero
}
  805a84:	0001883a 	nop
  805a88:	e037883a 	mov	sp,fp
  805a8c:	df000017 	ldw	fp,0(sp)
  805a90:	dec00104 	addi	sp,sp,4
  805a94:	f800283a 	ret

00805a98 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  805a98:	defffa04 	addi	sp,sp,-24
  805a9c:	dfc00515 	stw	ra,20(sp)
  805aa0:	df000415 	stw	fp,16(sp)
  805aa4:	df000404 	addi	fp,sp,16
  805aa8:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  805aac:	008000c4 	movi	r2,3
  805ab0:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  805ab4:	e0fffd17 	ldw	r3,-12(fp)
  805ab8:	008003f4 	movhi	r2,15
  805abc:	10909004 	addi	r2,r2,16960
  805ac0:	1885383a 	mul	r2,r3,r2
  805ac4:	100b883a 	mov	r5,r2
  805ac8:	0100bef4 	movhi	r4,763
  805acc:	213c2004 	addi	r4,r4,-3968
  805ad0:	08066d40 	call	8066d4 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  805ad4:	100b883a 	mov	r5,r2
  805ad8:	01200034 	movhi	r4,32768
  805adc:	213fffc4 	addi	r4,r4,-1
  805ae0:	08066d40 	call	8066d4 <__udivsi3>
  805ae4:	100b883a 	mov	r5,r2
  805ae8:	e13fff17 	ldw	r4,-4(fp)
  805aec:	08066d40 	call	8066d4 <__udivsi3>
  805af0:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  805af4:	e0bffe17 	ldw	r2,-8(fp)
  805af8:	10002a26 	beq	r2,zero,805ba4 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  805afc:	e03ffc15 	stw	zero,-16(fp)
  805b00:	00001706 	br	805b60 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  805b04:	00a00034 	movhi	r2,32768
  805b08:	10bfffc4 	addi	r2,r2,-1
  805b0c:	10bfffc4 	addi	r2,r2,-1
  805b10:	103ffe1e 	bne	r2,zero,805b0c <__alt_mem_onchip_mem+0xff785b0c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  805b14:	e0fffd17 	ldw	r3,-12(fp)
  805b18:	008003f4 	movhi	r2,15
  805b1c:	10909004 	addi	r2,r2,16960
  805b20:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  805b24:	100b883a 	mov	r5,r2
  805b28:	0100bef4 	movhi	r4,763
  805b2c:	213c2004 	addi	r4,r4,-3968
  805b30:	08066d40 	call	8066d4 <__udivsi3>
  805b34:	100b883a 	mov	r5,r2
  805b38:	01200034 	movhi	r4,32768
  805b3c:	213fffc4 	addi	r4,r4,-1
  805b40:	08066d40 	call	8066d4 <__udivsi3>
  805b44:	1007883a 	mov	r3,r2
  805b48:	e0bfff17 	ldw	r2,-4(fp)
  805b4c:	10c5c83a 	sub	r2,r2,r3
  805b50:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  805b54:	e0bffc17 	ldw	r2,-16(fp)
  805b58:	10800044 	addi	r2,r2,1
  805b5c:	e0bffc15 	stw	r2,-16(fp)
  805b60:	e0fffc17 	ldw	r3,-16(fp)
  805b64:	e0bffe17 	ldw	r2,-8(fp)
  805b68:	18bfe616 	blt	r3,r2,805b04 <__alt_mem_onchip_mem+0xff785b04>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  805b6c:	e0fffd17 	ldw	r3,-12(fp)
  805b70:	008003f4 	movhi	r2,15
  805b74:	10909004 	addi	r2,r2,16960
  805b78:	1885383a 	mul	r2,r3,r2
  805b7c:	100b883a 	mov	r5,r2
  805b80:	0100bef4 	movhi	r4,763
  805b84:	213c2004 	addi	r4,r4,-3968
  805b88:	08066d40 	call	8066d4 <__udivsi3>
  805b8c:	1007883a 	mov	r3,r2
  805b90:	e0bfff17 	ldw	r2,-4(fp)
  805b94:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  805b98:	10bfffc4 	addi	r2,r2,-1
  805b9c:	103ffe1e 	bne	r2,zero,805b98 <__alt_mem_onchip_mem+0xff785b98>
  805ba0:	00000d06 	br	805bd8 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  805ba4:	e0fffd17 	ldw	r3,-12(fp)
  805ba8:	008003f4 	movhi	r2,15
  805bac:	10909004 	addi	r2,r2,16960
  805bb0:	1885383a 	mul	r2,r3,r2
  805bb4:	100b883a 	mov	r5,r2
  805bb8:	0100bef4 	movhi	r4,763
  805bbc:	213c2004 	addi	r4,r4,-3968
  805bc0:	08066d40 	call	8066d4 <__udivsi3>
  805bc4:	1007883a 	mov	r3,r2
  805bc8:	e0bfff17 	ldw	r2,-4(fp)
  805bcc:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  805bd0:	10bfffc4 	addi	r2,r2,-1
  805bd4:	00bffe16 	blt	zero,r2,805bd0 <__alt_mem_onchip_mem+0xff785bd0>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  805bd8:	0005883a 	mov	r2,zero
}
  805bdc:	e037883a 	mov	sp,fp
  805be0:	dfc00117 	ldw	ra,4(sp)
  805be4:	df000017 	ldw	fp,0(sp)
  805be8:	dec00204 	addi	sp,sp,8
  805bec:	f800283a 	ret

00805bf0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  805bf0:	defffa04 	addi	sp,sp,-24
  805bf4:	dfc00515 	stw	ra,20(sp)
  805bf8:	df000415 	stw	fp,16(sp)
  805bfc:	df000404 	addi	fp,sp,16
  805c00:	e13ffe15 	stw	r4,-8(fp)
  805c04:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  805c08:	e0bfff17 	ldw	r2,-4(fp)
  805c0c:	10800017 	ldw	r2,0(r2)
  805c10:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  805c14:	e13ffe17 	ldw	r4,-8(fp)
  805c18:	08062ac0 	call	8062ac <strlen>
  805c1c:	10800044 	addi	r2,r2,1
  805c20:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  805c24:	00000d06 	br	805c5c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  805c28:	e0bffc17 	ldw	r2,-16(fp)
  805c2c:	10800217 	ldw	r2,8(r2)
  805c30:	e0fffd17 	ldw	r3,-12(fp)
  805c34:	180d883a 	mov	r6,r3
  805c38:	e17ffe17 	ldw	r5,-8(fp)
  805c3c:	1009883a 	mov	r4,r2
  805c40:	0805fc00 	call	805fc0 <memcmp>
  805c44:	1000021e 	bne	r2,zero,805c50 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  805c48:	e0bffc17 	ldw	r2,-16(fp)
  805c4c:	00000706 	br	805c6c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  805c50:	e0bffc17 	ldw	r2,-16(fp)
  805c54:	10800017 	ldw	r2,0(r2)
  805c58:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  805c5c:	e0fffc17 	ldw	r3,-16(fp)
  805c60:	e0bfff17 	ldw	r2,-4(fp)
  805c64:	18bff01e 	bne	r3,r2,805c28 <__alt_mem_onchip_mem+0xff785c28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  805c68:	0005883a 	mov	r2,zero
}
  805c6c:	e037883a 	mov	sp,fp
  805c70:	dfc00117 	ldw	ra,4(sp)
  805c74:	df000017 	ldw	fp,0(sp)
  805c78:	dec00204 	addi	sp,sp,8
  805c7c:	f800283a 	ret

00805c80 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  805c80:	defffb04 	addi	sp,sp,-20
  805c84:	dfc00415 	stw	ra,16(sp)
  805c88:	df000315 	stw	fp,12(sp)
  805c8c:	df000304 	addi	fp,sp,12
  805c90:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  805c94:	00802074 	movhi	r2,129
  805c98:	10a0a804 	addi	r2,r2,-32096
  805c9c:	10800017 	ldw	r2,0(r2)
  805ca0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  805ca4:	00003106 	br	805d6c <alt_find_file+0xec>
  {
    len = strlen(next->name);
  805ca8:	e0bffd17 	ldw	r2,-12(fp)
  805cac:	10800217 	ldw	r2,8(r2)
  805cb0:	1009883a 	mov	r4,r2
  805cb4:	08062ac0 	call	8062ac <strlen>
  805cb8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  805cbc:	e0bffd17 	ldw	r2,-12(fp)
  805cc0:	10c00217 	ldw	r3,8(r2)
  805cc4:	e0bffe17 	ldw	r2,-8(fp)
  805cc8:	10bfffc4 	addi	r2,r2,-1
  805ccc:	1885883a 	add	r2,r3,r2
  805cd0:	10800003 	ldbu	r2,0(r2)
  805cd4:	10803fcc 	andi	r2,r2,255
  805cd8:	1080201c 	xori	r2,r2,128
  805cdc:	10bfe004 	addi	r2,r2,-128
  805ce0:	10800bd8 	cmpnei	r2,r2,47
  805ce4:	1000031e 	bne	r2,zero,805cf4 <alt_find_file+0x74>
    {
      len -= 1;
  805ce8:	e0bffe17 	ldw	r2,-8(fp)
  805cec:	10bfffc4 	addi	r2,r2,-1
  805cf0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  805cf4:	e0bffe17 	ldw	r2,-8(fp)
  805cf8:	e0ffff17 	ldw	r3,-4(fp)
  805cfc:	1885883a 	add	r2,r3,r2
  805d00:	10800003 	ldbu	r2,0(r2)
  805d04:	10803fcc 	andi	r2,r2,255
  805d08:	1080201c 	xori	r2,r2,128
  805d0c:	10bfe004 	addi	r2,r2,-128
  805d10:	10800be0 	cmpeqi	r2,r2,47
  805d14:	1000081e 	bne	r2,zero,805d38 <alt_find_file+0xb8>
  805d18:	e0bffe17 	ldw	r2,-8(fp)
  805d1c:	e0ffff17 	ldw	r3,-4(fp)
  805d20:	1885883a 	add	r2,r3,r2
  805d24:	10800003 	ldbu	r2,0(r2)
  805d28:	10803fcc 	andi	r2,r2,255
  805d2c:	1080201c 	xori	r2,r2,128
  805d30:	10bfe004 	addi	r2,r2,-128
  805d34:	10000a1e 	bne	r2,zero,805d60 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
  805d38:	e0bffd17 	ldw	r2,-12(fp)
  805d3c:	10800217 	ldw	r2,8(r2)
  805d40:	e0fffe17 	ldw	r3,-8(fp)
  805d44:	180d883a 	mov	r6,r3
  805d48:	e17fff17 	ldw	r5,-4(fp)
  805d4c:	1009883a 	mov	r4,r2
  805d50:	0805fc00 	call	805fc0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  805d54:	1000021e 	bne	r2,zero,805d60 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  805d58:	e0bffd17 	ldw	r2,-12(fp)
  805d5c:	00000806 	br	805d80 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
  805d60:	e0bffd17 	ldw	r2,-12(fp)
  805d64:	10800017 	ldw	r2,0(r2)
  805d68:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  805d6c:	e0fffd17 	ldw	r3,-12(fp)
  805d70:	00802074 	movhi	r2,129
  805d74:	10a0a804 	addi	r2,r2,-32096
  805d78:	18bfcb1e 	bne	r3,r2,805ca8 <__alt_mem_onchip_mem+0xff785ca8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  805d7c:	0005883a 	mov	r2,zero
}
  805d80:	e037883a 	mov	sp,fp
  805d84:	dfc00117 	ldw	ra,4(sp)
  805d88:	df000017 	ldw	fp,0(sp)
  805d8c:	dec00204 	addi	sp,sp,8
  805d90:	f800283a 	ret

00805d94 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  805d94:	defffc04 	addi	sp,sp,-16
  805d98:	df000315 	stw	fp,12(sp)
  805d9c:	df000304 	addi	fp,sp,12
  805da0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  805da4:	00bffa04 	movi	r2,-24
  805da8:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  805dac:	e03ffd15 	stw	zero,-12(fp)
  805db0:	00001d06 	br	805e28 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
  805db4:	00802034 	movhi	r2,128
  805db8:	109f3e04 	addi	r2,r2,31992
  805dbc:	e0fffd17 	ldw	r3,-12(fp)
  805dc0:	18c00324 	muli	r3,r3,12
  805dc4:	10c5883a 	add	r2,r2,r3
  805dc8:	10800017 	ldw	r2,0(r2)
  805dcc:	1000131e 	bne	r2,zero,805e1c <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
  805dd0:	00802034 	movhi	r2,128
  805dd4:	109f3e04 	addi	r2,r2,31992
  805dd8:	e0fffd17 	ldw	r3,-12(fp)
  805ddc:	18c00324 	muli	r3,r3,12
  805de0:	10c5883a 	add	r2,r2,r3
  805de4:	e0ffff17 	ldw	r3,-4(fp)
  805de8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  805dec:	00802074 	movhi	r2,129
  805df0:	10a0ac04 	addi	r2,r2,-32080
  805df4:	10c00017 	ldw	r3,0(r2)
  805df8:	e0bffd17 	ldw	r2,-12(fp)
  805dfc:	1880040e 	bge	r3,r2,805e10 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
  805e00:	00802074 	movhi	r2,129
  805e04:	10a0ac04 	addi	r2,r2,-32080
  805e08:	e0fffd17 	ldw	r3,-12(fp)
  805e0c:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
  805e10:	e0bffd17 	ldw	r2,-12(fp)
  805e14:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  805e18:	00000606 	br	805e34 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  805e1c:	e0bffd17 	ldw	r2,-12(fp)
  805e20:	10800044 	addi	r2,r2,1
  805e24:	e0bffd15 	stw	r2,-12(fp)
  805e28:	e0bffd17 	ldw	r2,-12(fp)
  805e2c:	10800810 	cmplti	r2,r2,32
  805e30:	103fe01e 	bne	r2,zero,805db4 <__alt_mem_onchip_mem+0xff785db4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  805e34:	e0bffe17 	ldw	r2,-8(fp)
}
  805e38:	e037883a 	mov	sp,fp
  805e3c:	df000017 	ldw	fp,0(sp)
  805e40:	dec00104 	addi	sp,sp,4
  805e44:	f800283a 	ret

00805e48 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  805e48:	defffb04 	addi	sp,sp,-20
  805e4c:	df000415 	stw	fp,16(sp)
  805e50:	df000404 	addi	fp,sp,16
  805e54:	e13ffe15 	stw	r4,-8(fp)
  805e58:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  805e5c:	e0bfff17 	ldw	r2,-4(fp)
  805e60:	10840070 	cmpltui	r2,r2,4097
  805e64:	1000021e 	bne	r2,zero,805e70 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  805e68:	00840004 	movi	r2,4096
  805e6c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  805e70:	e0fffe17 	ldw	r3,-8(fp)
  805e74:	e0bfff17 	ldw	r2,-4(fp)
  805e78:	1885883a 	add	r2,r3,r2
  805e7c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  805e80:	e0bffe17 	ldw	r2,-8(fp)
  805e84:	e0bffc15 	stw	r2,-16(fp)
  805e88:	00000506 	br	805ea0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  805e8c:	e0bffc17 	ldw	r2,-16(fp)
  805e90:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  805e94:	e0bffc17 	ldw	r2,-16(fp)
  805e98:	10800804 	addi	r2,r2,32
  805e9c:	e0bffc15 	stw	r2,-16(fp)
  805ea0:	e0fffc17 	ldw	r3,-16(fp)
  805ea4:	e0bffd17 	ldw	r2,-12(fp)
  805ea8:	18bff836 	bltu	r3,r2,805e8c <__alt_mem_onchip_mem+0xff785e8c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  805eac:	e0bffe17 	ldw	r2,-8(fp)
  805eb0:	108007cc 	andi	r2,r2,31
  805eb4:	10000226 	beq	r2,zero,805ec0 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  805eb8:	e0bffc17 	ldw	r2,-16(fp)
  805ebc:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  805ec0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  805ec4:	0001883a 	nop
  805ec8:	e037883a 	mov	sp,fp
  805ecc:	df000017 	ldw	fp,0(sp)
  805ed0:	dec00104 	addi	sp,sp,4
  805ed4:	f800283a 	ret

00805ed8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  805ed8:	defffe04 	addi	sp,sp,-8
  805edc:	df000115 	stw	fp,4(sp)
  805ee0:	df000104 	addi	fp,sp,4
  805ee4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  805ee8:	e0bfff17 	ldw	r2,-4(fp)
  805eec:	10bffe84 	addi	r2,r2,-6
  805ef0:	10c00428 	cmpgeui	r3,r2,16
  805ef4:	18001a1e 	bne	r3,zero,805f60 <alt_exception_cause_generated_bad_addr+0x88>
  805ef8:	100690ba 	slli	r3,r2,2
  805efc:	00802034 	movhi	r2,128
  805f00:	1097c404 	addi	r2,r2,24336
  805f04:	1885883a 	add	r2,r3,r2
  805f08:	10800017 	ldw	r2,0(r2)
  805f0c:	1000683a 	jmp	r2
  805f10:	00805f50 	cmplti	r2,zero,381
  805f14:	00805f50 	cmplti	r2,zero,381
  805f18:	00805f60 	cmpeqi	r2,zero,381
  805f1c:	00805f60 	cmpeqi	r2,zero,381
  805f20:	00805f60 	cmpeqi	r2,zero,381
  805f24:	00805f50 	cmplti	r2,zero,381
  805f28:	00805f58 	cmpnei	r2,zero,381
  805f2c:	00805f60 	cmpeqi	r2,zero,381
  805f30:	00805f50 	cmplti	r2,zero,381
  805f34:	00805f50 	cmplti	r2,zero,381
  805f38:	00805f60 	cmpeqi	r2,zero,381
  805f3c:	00805f50 	cmplti	r2,zero,381
  805f40:	00805f58 	cmpnei	r2,zero,381
  805f44:	00805f60 	cmpeqi	r2,zero,381
  805f48:	00805f60 	cmpeqi	r2,zero,381
  805f4c:	00805f50 	cmplti	r2,zero,381
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  805f50:	00800044 	movi	r2,1
  805f54:	00000306 	br	805f64 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  805f58:	0005883a 	mov	r2,zero
  805f5c:	00000106 	br	805f64 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  805f60:	0005883a 	mov	r2,zero
  }
}
  805f64:	e037883a 	mov	sp,fp
  805f68:	df000017 	ldw	fp,0(sp)
  805f6c:	dec00104 	addi	sp,sp,4
  805f70:	f800283a 	ret

00805f74 <atexit>:
  805f74:	200b883a 	mov	r5,r4
  805f78:	000f883a 	mov	r7,zero
  805f7c:	000d883a 	mov	r6,zero
  805f80:	0009883a 	mov	r4,zero
  805f84:	08063441 	jmpi	806344 <__register_exitproc>

00805f88 <exit>:
  805f88:	defffe04 	addi	sp,sp,-8
  805f8c:	000b883a 	mov	r5,zero
  805f90:	dc000015 	stw	r16,0(sp)
  805f94:	dfc00115 	stw	ra,4(sp)
  805f98:	2021883a 	mov	r16,r4
  805f9c:	080645c0 	call	80645c <__call_exitprocs>
  805fa0:	00802074 	movhi	r2,129
  805fa4:	10a0b204 	addi	r2,r2,-32056
  805fa8:	11000017 	ldw	r4,0(r2)
  805fac:	20800f17 	ldw	r2,60(r4)
  805fb0:	10000126 	beq	r2,zero,805fb8 <exit+0x30>
  805fb4:	103ee83a 	callr	r2
  805fb8:	8009883a 	mov	r4,r16
  805fbc:	08067900 	call	806790 <_exit>

00805fc0 <memcmp>:
  805fc0:	01c000c4 	movi	r7,3
  805fc4:	3980192e 	bgeu	r7,r6,80602c <memcmp+0x6c>
  805fc8:	2144b03a 	or	r2,r4,r5
  805fcc:	11c4703a 	and	r2,r2,r7
  805fd0:	10000f26 	beq	r2,zero,806010 <memcmp+0x50>
  805fd4:	20800003 	ldbu	r2,0(r4)
  805fd8:	28c00003 	ldbu	r3,0(r5)
  805fdc:	10c0151e 	bne	r2,r3,806034 <memcmp+0x74>
  805fe0:	31bfff84 	addi	r6,r6,-2
  805fe4:	01ffffc4 	movi	r7,-1
  805fe8:	00000406 	br	805ffc <memcmp+0x3c>
  805fec:	20800003 	ldbu	r2,0(r4)
  805ff0:	28c00003 	ldbu	r3,0(r5)
  805ff4:	31bfffc4 	addi	r6,r6,-1
  805ff8:	10c00e1e 	bne	r2,r3,806034 <memcmp+0x74>
  805ffc:	21000044 	addi	r4,r4,1
  806000:	29400044 	addi	r5,r5,1
  806004:	31fff91e 	bne	r6,r7,805fec <__alt_mem_onchip_mem+0xff785fec>
  806008:	0005883a 	mov	r2,zero
  80600c:	f800283a 	ret
  806010:	20c00017 	ldw	r3,0(r4)
  806014:	28800017 	ldw	r2,0(r5)
  806018:	18bfee1e 	bne	r3,r2,805fd4 <__alt_mem_onchip_mem+0xff785fd4>
  80601c:	31bfff04 	addi	r6,r6,-4
  806020:	21000104 	addi	r4,r4,4
  806024:	29400104 	addi	r5,r5,4
  806028:	39bff936 	bltu	r7,r6,806010 <__alt_mem_onchip_mem+0xff786010>
  80602c:	303fe91e 	bne	r6,zero,805fd4 <__alt_mem_onchip_mem+0xff785fd4>
  806030:	003ff506 	br	806008 <__alt_mem_onchip_mem+0xff786008>
  806034:	10c5c83a 	sub	r2,r2,r3
  806038:	f800283a 	ret

0080603c <memcpy>:
  80603c:	defffd04 	addi	sp,sp,-12
  806040:	dfc00215 	stw	ra,8(sp)
  806044:	dc400115 	stw	r17,4(sp)
  806048:	dc000015 	stw	r16,0(sp)
  80604c:	00c003c4 	movi	r3,15
  806050:	2005883a 	mov	r2,r4
  806054:	1980452e 	bgeu	r3,r6,80616c <memcpy+0x130>
  806058:	2906b03a 	or	r3,r5,r4
  80605c:	18c000cc 	andi	r3,r3,3
  806060:	1800441e 	bne	r3,zero,806174 <memcpy+0x138>
  806064:	347ffc04 	addi	r17,r6,-16
  806068:	8822d13a 	srli	r17,r17,4
  80606c:	28c00104 	addi	r3,r5,4
  806070:	23400104 	addi	r13,r4,4
  806074:	8820913a 	slli	r16,r17,4
  806078:	2b000204 	addi	r12,r5,8
  80607c:	22c00204 	addi	r11,r4,8
  806080:	84000504 	addi	r16,r16,20
  806084:	2a800304 	addi	r10,r5,12
  806088:	22400304 	addi	r9,r4,12
  80608c:	2c21883a 	add	r16,r5,r16
  806090:	2811883a 	mov	r8,r5
  806094:	200f883a 	mov	r7,r4
  806098:	41000017 	ldw	r4,0(r8)
  80609c:	1fc00017 	ldw	ra,0(r3)
  8060a0:	63c00017 	ldw	r15,0(r12)
  8060a4:	39000015 	stw	r4,0(r7)
  8060a8:	53800017 	ldw	r14,0(r10)
  8060ac:	6fc00015 	stw	ra,0(r13)
  8060b0:	5bc00015 	stw	r15,0(r11)
  8060b4:	4b800015 	stw	r14,0(r9)
  8060b8:	18c00404 	addi	r3,r3,16
  8060bc:	39c00404 	addi	r7,r7,16
  8060c0:	42000404 	addi	r8,r8,16
  8060c4:	6b400404 	addi	r13,r13,16
  8060c8:	63000404 	addi	r12,r12,16
  8060cc:	5ac00404 	addi	r11,r11,16
  8060d0:	52800404 	addi	r10,r10,16
  8060d4:	4a400404 	addi	r9,r9,16
  8060d8:	1c3fef1e 	bne	r3,r16,806098 <__alt_mem_onchip_mem+0xff786098>
  8060dc:	89c00044 	addi	r7,r17,1
  8060e0:	380e913a 	slli	r7,r7,4
  8060e4:	310003cc 	andi	r4,r6,15
  8060e8:	02c000c4 	movi	r11,3
  8060ec:	11c7883a 	add	r3,r2,r7
  8060f0:	29cb883a 	add	r5,r5,r7
  8060f4:	5900212e 	bgeu	r11,r4,80617c <memcpy+0x140>
  8060f8:	1813883a 	mov	r9,r3
  8060fc:	2811883a 	mov	r8,r5
  806100:	200f883a 	mov	r7,r4
  806104:	42800017 	ldw	r10,0(r8)
  806108:	4a400104 	addi	r9,r9,4
  80610c:	39ffff04 	addi	r7,r7,-4
  806110:	4abfff15 	stw	r10,-4(r9)
  806114:	42000104 	addi	r8,r8,4
  806118:	59fffa36 	bltu	r11,r7,806104 <__alt_mem_onchip_mem+0xff786104>
  80611c:	213fff04 	addi	r4,r4,-4
  806120:	2008d0ba 	srli	r4,r4,2
  806124:	318000cc 	andi	r6,r6,3
  806128:	21000044 	addi	r4,r4,1
  80612c:	2109883a 	add	r4,r4,r4
  806130:	2109883a 	add	r4,r4,r4
  806134:	1907883a 	add	r3,r3,r4
  806138:	290b883a 	add	r5,r5,r4
  80613c:	30000626 	beq	r6,zero,806158 <memcpy+0x11c>
  806140:	198d883a 	add	r6,r3,r6
  806144:	29c00003 	ldbu	r7,0(r5)
  806148:	18c00044 	addi	r3,r3,1
  80614c:	29400044 	addi	r5,r5,1
  806150:	19ffffc5 	stb	r7,-1(r3)
  806154:	19bffb1e 	bne	r3,r6,806144 <__alt_mem_onchip_mem+0xff786144>
  806158:	dfc00217 	ldw	ra,8(sp)
  80615c:	dc400117 	ldw	r17,4(sp)
  806160:	dc000017 	ldw	r16,0(sp)
  806164:	dec00304 	addi	sp,sp,12
  806168:	f800283a 	ret
  80616c:	2007883a 	mov	r3,r4
  806170:	003ff206 	br	80613c <__alt_mem_onchip_mem+0xff78613c>
  806174:	2007883a 	mov	r3,r4
  806178:	003ff106 	br	806140 <__alt_mem_onchip_mem+0xff786140>
  80617c:	200d883a 	mov	r6,r4
  806180:	003fee06 	br	80613c <__alt_mem_onchip_mem+0xff78613c>

00806184 <memset>:
  806184:	20c000cc 	andi	r3,r4,3
  806188:	2005883a 	mov	r2,r4
  80618c:	18004426 	beq	r3,zero,8062a0 <memset+0x11c>
  806190:	31ffffc4 	addi	r7,r6,-1
  806194:	30004026 	beq	r6,zero,806298 <memset+0x114>
  806198:	2813883a 	mov	r9,r5
  80619c:	200d883a 	mov	r6,r4
  8061a0:	2007883a 	mov	r3,r4
  8061a4:	00000406 	br	8061b8 <memset+0x34>
  8061a8:	3a3fffc4 	addi	r8,r7,-1
  8061ac:	31800044 	addi	r6,r6,1
  8061b0:	38003926 	beq	r7,zero,806298 <memset+0x114>
  8061b4:	400f883a 	mov	r7,r8
  8061b8:	18c00044 	addi	r3,r3,1
  8061bc:	32400005 	stb	r9,0(r6)
  8061c0:	1a0000cc 	andi	r8,r3,3
  8061c4:	403ff81e 	bne	r8,zero,8061a8 <__alt_mem_onchip_mem+0xff7861a8>
  8061c8:	010000c4 	movi	r4,3
  8061cc:	21c02d2e 	bgeu	r4,r7,806284 <memset+0x100>
  8061d0:	29003fcc 	andi	r4,r5,255
  8061d4:	200c923a 	slli	r6,r4,8
  8061d8:	3108b03a 	or	r4,r6,r4
  8061dc:	200c943a 	slli	r6,r4,16
  8061e0:	218cb03a 	or	r6,r4,r6
  8061e4:	010003c4 	movi	r4,15
  8061e8:	21c0182e 	bgeu	r4,r7,80624c <memset+0xc8>
  8061ec:	3b3ffc04 	addi	r12,r7,-16
  8061f0:	6018d13a 	srli	r12,r12,4
  8061f4:	1a000104 	addi	r8,r3,4
  8061f8:	1ac00204 	addi	r11,r3,8
  8061fc:	6008913a 	slli	r4,r12,4
  806200:	1a800304 	addi	r10,r3,12
  806204:	1813883a 	mov	r9,r3
  806208:	21000504 	addi	r4,r4,20
  80620c:	1909883a 	add	r4,r3,r4
  806210:	49800015 	stw	r6,0(r9)
  806214:	41800015 	stw	r6,0(r8)
  806218:	59800015 	stw	r6,0(r11)
  80621c:	51800015 	stw	r6,0(r10)
  806220:	42000404 	addi	r8,r8,16
  806224:	4a400404 	addi	r9,r9,16
  806228:	5ac00404 	addi	r11,r11,16
  80622c:	52800404 	addi	r10,r10,16
  806230:	413ff71e 	bne	r8,r4,806210 <__alt_mem_onchip_mem+0xff786210>
  806234:	63000044 	addi	r12,r12,1
  806238:	6018913a 	slli	r12,r12,4
  80623c:	39c003cc 	andi	r7,r7,15
  806240:	010000c4 	movi	r4,3
  806244:	1b07883a 	add	r3,r3,r12
  806248:	21c00e2e 	bgeu	r4,r7,806284 <memset+0x100>
  80624c:	1813883a 	mov	r9,r3
  806250:	3811883a 	mov	r8,r7
  806254:	010000c4 	movi	r4,3
  806258:	49800015 	stw	r6,0(r9)
  80625c:	423fff04 	addi	r8,r8,-4
  806260:	4a400104 	addi	r9,r9,4
  806264:	223ffc36 	bltu	r4,r8,806258 <__alt_mem_onchip_mem+0xff786258>
  806268:	393fff04 	addi	r4,r7,-4
  80626c:	2008d0ba 	srli	r4,r4,2
  806270:	39c000cc 	andi	r7,r7,3
  806274:	21000044 	addi	r4,r4,1
  806278:	2109883a 	add	r4,r4,r4
  80627c:	2109883a 	add	r4,r4,r4
  806280:	1907883a 	add	r3,r3,r4
  806284:	38000526 	beq	r7,zero,80629c <memset+0x118>
  806288:	19cf883a 	add	r7,r3,r7
  80628c:	19400005 	stb	r5,0(r3)
  806290:	18c00044 	addi	r3,r3,1
  806294:	38fffd1e 	bne	r7,r3,80628c <__alt_mem_onchip_mem+0xff78628c>
  806298:	f800283a 	ret
  80629c:	f800283a 	ret
  8062a0:	2007883a 	mov	r3,r4
  8062a4:	300f883a 	mov	r7,r6
  8062a8:	003fc706 	br	8061c8 <__alt_mem_onchip_mem+0xff7861c8>

008062ac <strlen>:
  8062ac:	208000cc 	andi	r2,r4,3
  8062b0:	10002026 	beq	r2,zero,806334 <strlen+0x88>
  8062b4:	20800007 	ldb	r2,0(r4)
  8062b8:	10002026 	beq	r2,zero,80633c <strlen+0x90>
  8062bc:	2005883a 	mov	r2,r4
  8062c0:	00000206 	br	8062cc <strlen+0x20>
  8062c4:	10c00007 	ldb	r3,0(r2)
  8062c8:	18001826 	beq	r3,zero,80632c <strlen+0x80>
  8062cc:	10800044 	addi	r2,r2,1
  8062d0:	10c000cc 	andi	r3,r2,3
  8062d4:	183ffb1e 	bne	r3,zero,8062c4 <__alt_mem_onchip_mem+0xff7862c4>
  8062d8:	10c00017 	ldw	r3,0(r2)
  8062dc:	01ffbff4 	movhi	r7,65279
  8062e0:	39ffbfc4 	addi	r7,r7,-257
  8062e4:	00ca303a 	nor	r5,zero,r3
  8062e8:	01a02074 	movhi	r6,32897
  8062ec:	19c7883a 	add	r3,r3,r7
  8062f0:	31a02004 	addi	r6,r6,-32640
  8062f4:	1946703a 	and	r3,r3,r5
  8062f8:	1986703a 	and	r3,r3,r6
  8062fc:	1800091e 	bne	r3,zero,806324 <strlen+0x78>
  806300:	10800104 	addi	r2,r2,4
  806304:	10c00017 	ldw	r3,0(r2)
  806308:	19cb883a 	add	r5,r3,r7
  80630c:	00c6303a 	nor	r3,zero,r3
  806310:	28c6703a 	and	r3,r5,r3
  806314:	1986703a 	and	r3,r3,r6
  806318:	183ff926 	beq	r3,zero,806300 <__alt_mem_onchip_mem+0xff786300>
  80631c:	00000106 	br	806324 <strlen+0x78>
  806320:	10800044 	addi	r2,r2,1
  806324:	10c00007 	ldb	r3,0(r2)
  806328:	183ffd1e 	bne	r3,zero,806320 <__alt_mem_onchip_mem+0xff786320>
  80632c:	1105c83a 	sub	r2,r2,r4
  806330:	f800283a 	ret
  806334:	2005883a 	mov	r2,r4
  806338:	003fe706 	br	8062d8 <__alt_mem_onchip_mem+0xff7862d8>
  80633c:	0005883a 	mov	r2,zero
  806340:	f800283a 	ret

00806344 <__register_exitproc>:
  806344:	defffa04 	addi	sp,sp,-24
  806348:	dc000315 	stw	r16,12(sp)
  80634c:	04002074 	movhi	r16,129
  806350:	8420b204 	addi	r16,r16,-32056
  806354:	80c00017 	ldw	r3,0(r16)
  806358:	dc400415 	stw	r17,16(sp)
  80635c:	dfc00515 	stw	ra,20(sp)
  806360:	18805217 	ldw	r2,328(r3)
  806364:	2023883a 	mov	r17,r4
  806368:	10003726 	beq	r2,zero,806448 <__register_exitproc+0x104>
  80636c:	10c00117 	ldw	r3,4(r2)
  806370:	010007c4 	movi	r4,31
  806374:	20c00e16 	blt	r4,r3,8063b0 <__register_exitproc+0x6c>
  806378:	1a000044 	addi	r8,r3,1
  80637c:	8800221e 	bne	r17,zero,806408 <__register_exitproc+0xc4>
  806380:	18c00084 	addi	r3,r3,2
  806384:	18c7883a 	add	r3,r3,r3
  806388:	18c7883a 	add	r3,r3,r3
  80638c:	12000115 	stw	r8,4(r2)
  806390:	10c7883a 	add	r3,r2,r3
  806394:	19400015 	stw	r5,0(r3)
  806398:	0005883a 	mov	r2,zero
  80639c:	dfc00517 	ldw	ra,20(sp)
  8063a0:	dc400417 	ldw	r17,16(sp)
  8063a4:	dc000317 	ldw	r16,12(sp)
  8063a8:	dec00604 	addi	sp,sp,24
  8063ac:	f800283a 	ret
  8063b0:	00800034 	movhi	r2,0
  8063b4:	10800004 	addi	r2,r2,0
  8063b8:	10002626 	beq	r2,zero,806454 <__register_exitproc+0x110>
  8063bc:	01006404 	movi	r4,400
  8063c0:	d9400015 	stw	r5,0(sp)
  8063c4:	d9800115 	stw	r6,4(sp)
  8063c8:	d9c00215 	stw	r7,8(sp)
  8063cc:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  8063d0:	d9400017 	ldw	r5,0(sp)
  8063d4:	d9800117 	ldw	r6,4(sp)
  8063d8:	d9c00217 	ldw	r7,8(sp)
  8063dc:	10001d26 	beq	r2,zero,806454 <__register_exitproc+0x110>
  8063e0:	81000017 	ldw	r4,0(r16)
  8063e4:	10000115 	stw	zero,4(r2)
  8063e8:	02000044 	movi	r8,1
  8063ec:	22405217 	ldw	r9,328(r4)
  8063f0:	0007883a 	mov	r3,zero
  8063f4:	12400015 	stw	r9,0(r2)
  8063f8:	20805215 	stw	r2,328(r4)
  8063fc:	10006215 	stw	zero,392(r2)
  806400:	10006315 	stw	zero,396(r2)
  806404:	883fde26 	beq	r17,zero,806380 <__alt_mem_onchip_mem+0xff786380>
  806408:	18c9883a 	add	r4,r3,r3
  80640c:	2109883a 	add	r4,r4,r4
  806410:	1109883a 	add	r4,r2,r4
  806414:	21802215 	stw	r6,136(r4)
  806418:	01800044 	movi	r6,1
  80641c:	12406217 	ldw	r9,392(r2)
  806420:	30cc983a 	sll	r6,r6,r3
  806424:	4992b03a 	or	r9,r9,r6
  806428:	12406215 	stw	r9,392(r2)
  80642c:	21c04215 	stw	r7,264(r4)
  806430:	01000084 	movi	r4,2
  806434:	893fd21e 	bne	r17,r4,806380 <__alt_mem_onchip_mem+0xff786380>
  806438:	11006317 	ldw	r4,396(r2)
  80643c:	218cb03a 	or	r6,r4,r6
  806440:	11806315 	stw	r6,396(r2)
  806444:	003fce06 	br	806380 <__alt_mem_onchip_mem+0xff786380>
  806448:	18805304 	addi	r2,r3,332
  80644c:	18805215 	stw	r2,328(r3)
  806450:	003fc606 	br	80636c <__alt_mem_onchip_mem+0xff78636c>
  806454:	00bfffc4 	movi	r2,-1
  806458:	003fd006 	br	80639c <__alt_mem_onchip_mem+0xff78639c>

0080645c <__call_exitprocs>:
  80645c:	defff504 	addi	sp,sp,-44
  806460:	df000915 	stw	fp,36(sp)
  806464:	dd400615 	stw	r21,24(sp)
  806468:	dc800315 	stw	r18,12(sp)
  80646c:	dfc00a15 	stw	ra,40(sp)
  806470:	ddc00815 	stw	r23,32(sp)
  806474:	dd800715 	stw	r22,28(sp)
  806478:	dd000515 	stw	r20,20(sp)
  80647c:	dcc00415 	stw	r19,16(sp)
  806480:	dc400215 	stw	r17,8(sp)
  806484:	dc000115 	stw	r16,4(sp)
  806488:	d9000015 	stw	r4,0(sp)
  80648c:	2839883a 	mov	fp,r5
  806490:	04800044 	movi	r18,1
  806494:	057fffc4 	movi	r21,-1
  806498:	00802074 	movhi	r2,129
  80649c:	10a0b204 	addi	r2,r2,-32056
  8064a0:	12000017 	ldw	r8,0(r2)
  8064a4:	45005217 	ldw	r20,328(r8)
  8064a8:	44c05204 	addi	r19,r8,328
  8064ac:	a0001c26 	beq	r20,zero,806520 <__call_exitprocs+0xc4>
  8064b0:	a0800117 	ldw	r2,4(r20)
  8064b4:	15ffffc4 	addi	r23,r2,-1
  8064b8:	b8000d16 	blt	r23,zero,8064f0 <__call_exitprocs+0x94>
  8064bc:	14000044 	addi	r16,r2,1
  8064c0:	8421883a 	add	r16,r16,r16
  8064c4:	8421883a 	add	r16,r16,r16
  8064c8:	84402004 	addi	r17,r16,128
  8064cc:	a463883a 	add	r17,r20,r17
  8064d0:	a421883a 	add	r16,r20,r16
  8064d4:	e0001e26 	beq	fp,zero,806550 <__call_exitprocs+0xf4>
  8064d8:	80804017 	ldw	r2,256(r16)
  8064dc:	e0801c26 	beq	fp,r2,806550 <__call_exitprocs+0xf4>
  8064e0:	bdffffc4 	addi	r23,r23,-1
  8064e4:	843fff04 	addi	r16,r16,-4
  8064e8:	8c7fff04 	addi	r17,r17,-4
  8064ec:	bd7ff91e 	bne	r23,r21,8064d4 <__alt_mem_onchip_mem+0xff7864d4>
  8064f0:	00800034 	movhi	r2,0
  8064f4:	10800004 	addi	r2,r2,0
  8064f8:	10000926 	beq	r2,zero,806520 <__call_exitprocs+0xc4>
  8064fc:	a0800117 	ldw	r2,4(r20)
  806500:	1000301e 	bne	r2,zero,8065c4 <__call_exitprocs+0x168>
  806504:	a0800017 	ldw	r2,0(r20)
  806508:	10003226 	beq	r2,zero,8065d4 <__call_exitprocs+0x178>
  80650c:	a009883a 	mov	r4,r20
  806510:	98800015 	stw	r2,0(r19)
  806514:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  806518:	9d000017 	ldw	r20,0(r19)
  80651c:	a03fe41e 	bne	r20,zero,8064b0 <__alt_mem_onchip_mem+0xff7864b0>
  806520:	dfc00a17 	ldw	ra,40(sp)
  806524:	df000917 	ldw	fp,36(sp)
  806528:	ddc00817 	ldw	r23,32(sp)
  80652c:	dd800717 	ldw	r22,28(sp)
  806530:	dd400617 	ldw	r21,24(sp)
  806534:	dd000517 	ldw	r20,20(sp)
  806538:	dcc00417 	ldw	r19,16(sp)
  80653c:	dc800317 	ldw	r18,12(sp)
  806540:	dc400217 	ldw	r17,8(sp)
  806544:	dc000117 	ldw	r16,4(sp)
  806548:	dec00b04 	addi	sp,sp,44
  80654c:	f800283a 	ret
  806550:	a0800117 	ldw	r2,4(r20)
  806554:	80c00017 	ldw	r3,0(r16)
  806558:	10bfffc4 	addi	r2,r2,-1
  80655c:	15c01426 	beq	r2,r23,8065b0 <__call_exitprocs+0x154>
  806560:	80000015 	stw	zero,0(r16)
  806564:	183fde26 	beq	r3,zero,8064e0 <__alt_mem_onchip_mem+0xff7864e0>
  806568:	95c8983a 	sll	r4,r18,r23
  80656c:	a0806217 	ldw	r2,392(r20)
  806570:	a5800117 	ldw	r22,4(r20)
  806574:	2084703a 	and	r2,r4,r2
  806578:	10000b26 	beq	r2,zero,8065a8 <__call_exitprocs+0x14c>
  80657c:	a0806317 	ldw	r2,396(r20)
  806580:	2088703a 	and	r4,r4,r2
  806584:	20000c1e 	bne	r4,zero,8065b8 <__call_exitprocs+0x15c>
  806588:	89400017 	ldw	r5,0(r17)
  80658c:	d9000017 	ldw	r4,0(sp)
  806590:	183ee83a 	callr	r3
  806594:	a0800117 	ldw	r2,4(r20)
  806598:	15bfbf1e 	bne	r2,r22,806498 <__alt_mem_onchip_mem+0xff786498>
  80659c:	98800017 	ldw	r2,0(r19)
  8065a0:	153fcf26 	beq	r2,r20,8064e0 <__alt_mem_onchip_mem+0xff7864e0>
  8065a4:	003fbc06 	br	806498 <__alt_mem_onchip_mem+0xff786498>
  8065a8:	183ee83a 	callr	r3
  8065ac:	003ff906 	br	806594 <__alt_mem_onchip_mem+0xff786594>
  8065b0:	a5c00115 	stw	r23,4(r20)
  8065b4:	003feb06 	br	806564 <__alt_mem_onchip_mem+0xff786564>
  8065b8:	89000017 	ldw	r4,0(r17)
  8065bc:	183ee83a 	callr	r3
  8065c0:	003ff406 	br	806594 <__alt_mem_onchip_mem+0xff786594>
  8065c4:	a0800017 	ldw	r2,0(r20)
  8065c8:	a027883a 	mov	r19,r20
  8065cc:	1029883a 	mov	r20,r2
  8065d0:	003fb606 	br	8064ac <__alt_mem_onchip_mem+0xff7864ac>
  8065d4:	0005883a 	mov	r2,zero
  8065d8:	003ffb06 	br	8065c8 <__alt_mem_onchip_mem+0xff7865c8>

008065dc <__divsi3>:
  8065dc:	20001b16 	blt	r4,zero,80664c <__divsi3+0x70>
  8065e0:	000f883a 	mov	r7,zero
  8065e4:	28001616 	blt	r5,zero,806640 <__divsi3+0x64>
  8065e8:	200d883a 	mov	r6,r4
  8065ec:	29001a2e 	bgeu	r5,r4,806658 <__divsi3+0x7c>
  8065f0:	00800804 	movi	r2,32
  8065f4:	00c00044 	movi	r3,1
  8065f8:	00000106 	br	806600 <__divsi3+0x24>
  8065fc:	10000d26 	beq	r2,zero,806634 <__divsi3+0x58>
  806600:	294b883a 	add	r5,r5,r5
  806604:	10bfffc4 	addi	r2,r2,-1
  806608:	18c7883a 	add	r3,r3,r3
  80660c:	293ffb36 	bltu	r5,r4,8065fc <__alt_mem_onchip_mem+0xff7865fc>
  806610:	0005883a 	mov	r2,zero
  806614:	18000726 	beq	r3,zero,806634 <__divsi3+0x58>
  806618:	0005883a 	mov	r2,zero
  80661c:	31400236 	bltu	r6,r5,806628 <__divsi3+0x4c>
  806620:	314dc83a 	sub	r6,r6,r5
  806624:	10c4b03a 	or	r2,r2,r3
  806628:	1806d07a 	srli	r3,r3,1
  80662c:	280ad07a 	srli	r5,r5,1
  806630:	183ffa1e 	bne	r3,zero,80661c <__alt_mem_onchip_mem+0xff78661c>
  806634:	38000126 	beq	r7,zero,80663c <__divsi3+0x60>
  806638:	0085c83a 	sub	r2,zero,r2
  80663c:	f800283a 	ret
  806640:	014bc83a 	sub	r5,zero,r5
  806644:	39c0005c 	xori	r7,r7,1
  806648:	003fe706 	br	8065e8 <__alt_mem_onchip_mem+0xff7865e8>
  80664c:	0109c83a 	sub	r4,zero,r4
  806650:	01c00044 	movi	r7,1
  806654:	003fe306 	br	8065e4 <__alt_mem_onchip_mem+0xff7865e4>
  806658:	00c00044 	movi	r3,1
  80665c:	003fee06 	br	806618 <__alt_mem_onchip_mem+0xff786618>

00806660 <__modsi3>:
  806660:	20001716 	blt	r4,zero,8066c0 <__modsi3+0x60>
  806664:	000f883a 	mov	r7,zero
  806668:	2005883a 	mov	r2,r4
  80666c:	28001216 	blt	r5,zero,8066b8 <__modsi3+0x58>
  806670:	2900162e 	bgeu	r5,r4,8066cc <__modsi3+0x6c>
  806674:	01800804 	movi	r6,32
  806678:	00c00044 	movi	r3,1
  80667c:	00000106 	br	806684 <__modsi3+0x24>
  806680:	30000a26 	beq	r6,zero,8066ac <__modsi3+0x4c>
  806684:	294b883a 	add	r5,r5,r5
  806688:	31bfffc4 	addi	r6,r6,-1
  80668c:	18c7883a 	add	r3,r3,r3
  806690:	293ffb36 	bltu	r5,r4,806680 <__alt_mem_onchip_mem+0xff786680>
  806694:	18000526 	beq	r3,zero,8066ac <__modsi3+0x4c>
  806698:	1806d07a 	srli	r3,r3,1
  80669c:	11400136 	bltu	r2,r5,8066a4 <__modsi3+0x44>
  8066a0:	1145c83a 	sub	r2,r2,r5
  8066a4:	280ad07a 	srli	r5,r5,1
  8066a8:	183ffb1e 	bne	r3,zero,806698 <__alt_mem_onchip_mem+0xff786698>
  8066ac:	38000126 	beq	r7,zero,8066b4 <__modsi3+0x54>
  8066b0:	0085c83a 	sub	r2,zero,r2
  8066b4:	f800283a 	ret
  8066b8:	014bc83a 	sub	r5,zero,r5
  8066bc:	003fec06 	br	806670 <__alt_mem_onchip_mem+0xff786670>
  8066c0:	0109c83a 	sub	r4,zero,r4
  8066c4:	01c00044 	movi	r7,1
  8066c8:	003fe706 	br	806668 <__alt_mem_onchip_mem+0xff786668>
  8066cc:	00c00044 	movi	r3,1
  8066d0:	003ff106 	br	806698 <__alt_mem_onchip_mem+0xff786698>

008066d4 <__udivsi3>:
  8066d4:	200d883a 	mov	r6,r4
  8066d8:	2900152e 	bgeu	r5,r4,806730 <__udivsi3+0x5c>
  8066dc:	28001416 	blt	r5,zero,806730 <__udivsi3+0x5c>
  8066e0:	00800804 	movi	r2,32
  8066e4:	00c00044 	movi	r3,1
  8066e8:	00000206 	br	8066f4 <__udivsi3+0x20>
  8066ec:	10000e26 	beq	r2,zero,806728 <__udivsi3+0x54>
  8066f0:	28000516 	blt	r5,zero,806708 <__udivsi3+0x34>
  8066f4:	294b883a 	add	r5,r5,r5
  8066f8:	10bfffc4 	addi	r2,r2,-1
  8066fc:	18c7883a 	add	r3,r3,r3
  806700:	293ffa36 	bltu	r5,r4,8066ec <__alt_mem_onchip_mem+0xff7866ec>
  806704:	18000826 	beq	r3,zero,806728 <__udivsi3+0x54>
  806708:	0005883a 	mov	r2,zero
  80670c:	31400236 	bltu	r6,r5,806718 <__udivsi3+0x44>
  806710:	314dc83a 	sub	r6,r6,r5
  806714:	10c4b03a 	or	r2,r2,r3
  806718:	1806d07a 	srli	r3,r3,1
  80671c:	280ad07a 	srli	r5,r5,1
  806720:	183ffa1e 	bne	r3,zero,80670c <__alt_mem_onchip_mem+0xff78670c>
  806724:	f800283a 	ret
  806728:	0005883a 	mov	r2,zero
  80672c:	f800283a 	ret
  806730:	00c00044 	movi	r3,1
  806734:	003ff406 	br	806708 <__alt_mem_onchip_mem+0xff786708>

00806738 <__umodsi3>:
  806738:	2005883a 	mov	r2,r4
  80673c:	2900122e 	bgeu	r5,r4,806788 <__umodsi3+0x50>
  806740:	28001116 	blt	r5,zero,806788 <__umodsi3+0x50>
  806744:	01800804 	movi	r6,32
  806748:	00c00044 	movi	r3,1
  80674c:	00000206 	br	806758 <__umodsi3+0x20>
  806750:	30000c26 	beq	r6,zero,806784 <__umodsi3+0x4c>
  806754:	28000516 	blt	r5,zero,80676c <__umodsi3+0x34>
  806758:	294b883a 	add	r5,r5,r5
  80675c:	31bfffc4 	addi	r6,r6,-1
  806760:	18c7883a 	add	r3,r3,r3
  806764:	293ffa36 	bltu	r5,r4,806750 <__alt_mem_onchip_mem+0xff786750>
  806768:	18000626 	beq	r3,zero,806784 <__umodsi3+0x4c>
  80676c:	1806d07a 	srli	r3,r3,1
  806770:	11400136 	bltu	r2,r5,806778 <__umodsi3+0x40>
  806774:	1145c83a 	sub	r2,r2,r5
  806778:	280ad07a 	srli	r5,r5,1
  80677c:	183ffb1e 	bne	r3,zero,80676c <__alt_mem_onchip_mem+0xff78676c>
  806780:	f800283a 	ret
  806784:	f800283a 	ret
  806788:	00c00044 	movi	r3,1
  80678c:	003ff706 	br	80676c <__alt_mem_onchip_mem+0xff78676c>

00806790 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  806790:	defffd04 	addi	sp,sp,-12
  806794:	df000215 	stw	fp,8(sp)
  806798:	df000204 	addi	fp,sp,8
  80679c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  8067a0:	0001883a 	nop
  8067a4:	e0bfff17 	ldw	r2,-4(fp)
  8067a8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  8067ac:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  8067b0:	10000226 	beq	r2,zero,8067bc <_exit+0x2c>
    ALT_SIM_FAIL();
  8067b4:	002af070 	cmpltui	zero,zero,43969
  8067b8:	00000106 	br	8067c0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  8067bc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  8067c0:	003fff06 	br	8067c0 <__alt_mem_onchip_mem+0xff7867c0>
