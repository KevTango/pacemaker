 /*
 *  Created on: 22/09/2019
 *      Author: kevin
 */

#include "main.h"
#include "pacemaker.h"

//button interrupt function for ASense and VSense
void button_interrupt(void* context, alt_u32 id) {
	//read edge capture register and button value
	unsigned int edgeCapture = IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE);
	unsigned int uiButtonsValue = IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE);
	void* timerContext = 0;

	//sets the pedestrian crossing flags in mode 2,3 and 4
	if ((!(uiButtonsValue & 1<<0)) && !((current_mode == 1) || (current_mode == 0)))
		pedNS = 1;
	if ((!(uiButtonsValue & 1<<1)) && !((current_mode == 1) || (current_mode == 0)))
		pedEW = 1;

	//vehicle crossing interrupt
	if (current_mode == 4){
		if ((edgeCapture & 1<<2)) {
			++vehicle_cross;
			//check for odd button press (vehicle entering)
			if (vehicle_cross % 2){
				alt_alarm_start(&timer_vehicle,1,vehicle_timer_isr,timerContext);
				if ((current_state2 == yr_2) || (current_state2 == ry_2)){
					//prevent crashes by checking if timer has already started
					if (!camera_timer_has_started){
						fprintf(uart,"Camera activated\r\n");
						camera_timer_has_started = 1;
						alt_alarm_start(&timer_camera,camera_timeout,camera_timer_isr,timerContext);
					}
				}
				else if ((current_state2 == rr1_2) || (current_state2 == rr2_2)){
					fprintf(uart,"Camera activated\r\n");
					fprintf(uart,"Snapshot taken\r\n");
				}
			}
			//check for even button press (vehicle leaving)
			else{
				//stop alarms since vehicle has left before 2s are up
				if (camera_timer_has_started){
					alt_alarm_stop(&timer_camera);
					camera_timer_has_started = 0;
				}
				alt_alarm_stop(&timer_vehicle);
				fprintf(uart,"Vehicle left\r\n");
				fprintf(uart,"Vehicle was in the intersection for %d ms.\r\n",count);
				count = 0;
			}
		}
	}
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0);
}

int main(){
	reset();
	while(1){
		void* context = 0;
		//clear edge capture register
		IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0);
		//enable interrupts for all buttons
		IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTONS_BASE, 0x7);
		//register the button interrupt ISR
		alt_irq_register(BUTTONS_IRQ, context, button_interrupt);

		VSense = !(IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE) & 1<<0);
		ASense = !(IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE) & 1<<1);

		tick();
	}
}





